<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[undefined - Dietrich Ayala]]></title><description><![CDATA[Internet freedom, the web and Mozilla.]]></description><link>/</link><generator>Ghost</generator><lastBuildDate>Wed, 12 Jul 2017 05:35:22 GMT</lastBuildDate><atom:link href="/tag/undefined/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Badged Widgets with the Firefox 4 Add-on SDK]]></title><description><![CDATA[<p>Earlier tonight, <a href="http://sparklin.org/" title="Elisée on Twitter">Elisée</a> came into <a href="irc://irc.mozilla.org/#jetpack" title="#jetpack on IRC">#jetpack</a> with some questions, and we got to talking about badging on widgets. He&#39;d built a solution for his project, but we both agreed it should be easier. It&#39;s something that we&#39;ve gotten quite a few requests for, so using Elisée&#39;s approach, I made a standalone module for badging Widgets.</p>
<p><a href="https://github.com/autonome/Jetpack-Modules/blob/master/BadgedWidget.js" title="Source code">Module source code (and example).</a></p>
<p>The BadgedWidget API allows you to specify badge text, background color, and background opacity. The API needs to be properly integrated into the core Widget object, should allow updating each property individually, and a few other niceties (full control over styling?). But for now, here&#39;s a bird in your hand. If you&#39;ve got suggestions, let me know in the comments. Screenshot below.</p>
<p><img src="bBdbj.png" alt="Screenshot" title="Screenshot"></p>
]]></description><link>/2011/03/badged-widgets-with-the-firefox-4-add-on-sdk/index.html</link><guid isPermaLink="true">/2011/03/badged-widgets-with-the-firefox-4-add-on-sdk/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Mon, 28 Mar 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Github + Bugzilla (an Addon for Firefox 4)]]></title><description><![CDATA[<p>We use Github for the source code of the <a href="https://jetpack.mozillalabs.com/" title="Add-on SDK">Firefox Add-on SDK (aka Jetpack)</a>. We use Bugzilla to track bugs and feature development. These two systems do not play nicely together.</p>
<p>One especially annoying aspect of the workflow we use for the Add-on SDK is that it&#39;s a pain to submit a change in a way that satisfies both the Github and Bugzilla workflows. On Github you need to create a branch for your change, push it to Github, then go the page for the branch and submit a &quot;pull request&quot;, informing the forkees that you have changes you&#39;d like merged into the main repository. On Bugzilla, the typical process is to attach a diff of your changes to a bug, and request review from a specific person.</p>
<p>Atul Varma improved things with a great idea: Submit an HTML file as a bug attachment, which points to the pull-request page on Github. He added a feature to <a href="https://github.com/toolness/pybugzilla" title="Pybugzilla">Pybugzilla</a> that, given a pull-request URL and bug id, would generate the HTML file and submit it as an attachment to the bug. We now had something that was attached to a bug, that a reviewer could r+ or r-, making it easy for anyone following along to know where things were at, while allowing the code review itself to be done inline on Github.</p>
<p>However, using the tool isn&#39;t easy. You have to do your development work, then go to the Github page to make the pull request, then go back to the command line to construct the correct invocation of the command, then back to the Bugzilla page to request review from someone.</p>
<p>So I wrote an add-on to reduce the number of steps. With the Github Bugzilla Tweaks add-on, there&#39;s now a button the Github pull-request page that allows you to submit the request as an attachment on a bug in one-click:</p>
<p><img src="4qtB.png" alt="" title="Screenshout"></p>
<p>To make it work, just title your pull request starting with &quot;bug ######&quot;, replacing # with the bug id from Bugzilla. The add-on logs into Bugzilla with the stored credentials found in the Firefox password manager.</p>
<p><a href="http://j.mp/dYtZbs" title="Install">Install</a>.</p>
<p><a href="http://j.mp/g2LLee" title="Source code.">Source code</a>.</p>
]]></description><link>/2011/03/github-bugzilla-an-addon-for-firefox-4/index.html</link><guid isPermaLink="true">/2011/03/github-bugzilla-an-addon-for-firefox-4/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[Githug]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 19 Mar 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Github + Bugzilla (an Addon for Firefox 4)]]></title><description><![CDATA[<p>We use Github for the source code of the <a href="https://jetpack.mozillalabs.com/" title="Add-on SDK">Firefox Add-on SDK (aka Jetpack)</a>. We use Bugzilla to track bugs and feature development. These two systems do not play nicely together.</p>
<p>One especially annoying aspect of the workflow we use for the Add-on SDK is that it&#39;s a pain to submit a change in a way that satisfies both the Github and Bugzilla workflows. On Github you need to create a branch for your change, push it to Github, then go the page for the branch and submit a &quot;pull request&quot;, informing the forkees that you have changes you&#39;d like merged into the main repository. On Bugzilla, the typical process is to attach a diff of your changes to a bug, and request review from a specific person.</p>
<p>Atul Varma improved things with a great idea: Submit an HTML file as a bug attachment, which points to the pull-request page on Github. He added a feature to <a href="https://github.com/toolness/pybugzilla" title="Pybugzilla">Pybugzilla</a> that, given a pull-request URL and bug id, would generate the HTML file and submit it as an attachment to the bug. We now had something that was attached to a bug, that a reviewer could r+ or r-, making it easy for anyone following along to know where things were at, while allowing the code review itself to be done inline on Github.</p>
<p>However, using the tool isn&#39;t easy. You have to do your development work, then go to the Github page to make the pull request, then go back to the command line to construct the correct invocation of the command, then back to the Bugzilla page to request review from someone.</p>
<p>So I wrote an add-on to reduce the number of steps. With the Github Bugzilla Tweaks add-on, there&#39;s now a button the Github pull-request page that allows you to submit the request as an attachment on a bug in one-click:</p>
<p><img src="4qtB.png" alt="" title="Screenshout"></p>
<p>To make it work, just title your pull request starting with &quot;bug ######&quot;, replacing # with the bug id from Bugzilla. The add-on logs into Bugzilla with the stored credentials found in the Firefox password manager.</p>
<p><a href="http://j.mp/dYtZbs" title="Install">Install</a>.</p>
<p><a href="http://j.mp/g2LLee" title="Source code.">Source code</a>.</p>
]]></description><link>/2011/03/github-bugzilla-an-addon-for-firefox-4/index.html</link><guid isPermaLink="true">/2011/03/github-bugzilla-an-addon-for-firefox-4/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[Githug]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 19 Mar 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[cmd: Quick Command Execution for Firefox 4]]></title><description><![CDATA[<p>Cmd allows you to quickly execute Firefox&#39;s built-in commands via a  small keyboard-activated panel. While many of the browser commands might have  keyboard shortcuts, I often do not remember them. Now I don&#39;t have to.  This add-on allows me to just type the first few characters and hit  enter. This add-on does not require a browser restart.</p>
<p><a href="http://people.mozilla.com/~dietrich/cmd.xpi" title="Install cmd">Install</a>.</p>
<p><a href="https://github.com/autonome/cmd" title="Source code">Source code</a>.</p>
<p>Usage and features:</p>
<ul>
<li>Launch cmd with control+shift+;. In the next release this will be configurable via a preference.</li>
<li>Start typing to see matching commands.</li>
<li>Hit  the tab key to cycle through multiple matches (shift+tab to cycle  backwards). Example: type &quot;pre&quot; and hit tab a bunch of times.</li>
<li>Hit enter to select the current match.</li>
<li>Hit escape to hide cmd without selecting a command.</li>
<li>The last executed command is shown by default.
The  available commands are based on all existing menu items and registered  keyboard shortcuts that reference <command> elements in the  browser.</li>
</ul>
<p>What I use it for:</p>
<ul>
<li>Executing commands without having to know their keyboard shortcut.</li>
<li>Bookmarking without having to click the star, while having it default to Unsorted Bookmarks.</li>
<li>Quickly getting to the About page, to check for nightly updates.
Some commands don&#39;t work, like &quot;Subscribe to page&quot;. I would really like this command to work. Perhaps in the future I&#39;ll add an API for creating new commands. This tool will never compare to the extreme power of visual command tools like Ubiquity. However it&#39;s a very lightweight way to access built-in commands without needing to remember their shortcuts, or using the mouse.</li>
</ul>
]]></description><link>/2011/03/cmd-quick-command-execution-for-firefox-4/index.html</link><guid isPermaLink="true">/2011/03/cmd-quick-command-execution-for-firefox-4/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Fri, 18 Mar 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[cmd: Quick Command Execution for Firefox 4]]></title><description><![CDATA[<p>Cmd allows you to quickly execute Firefox&#39;s built-in commands via a  small keyboard-activated panel. While many of the browser commands might have  keyboard shortcuts, I often do not remember them. Now I don&#39;t have to.  This add-on allows me to just type the first few characters and hit  enter. This add-on does not require a browser restart.</p>
<p><a href="http://people.mozilla.com/~dietrich/cmd.xpi" title="Install cmd">Install</a>.</p>
<p><a href="https://github.com/autonome/cmd" title="Source code">Source code</a>.</p>
<p>Usage and features:</p>
<ul>
<li>Launch cmd with control+shift+;. In the next release this will be configurable via a preference.</li>
<li>Start typing to see matching commands.</li>
<li>Hit  the tab key to cycle through multiple matches (shift+tab to cycle  backwards). Example: type &quot;pre&quot; and hit tab a bunch of times.</li>
<li>Hit enter to select the current match.</li>
<li>Hit escape to hide cmd without selecting a command.</li>
<li>The last executed command is shown by default.
The  available commands are based on all existing menu items and registered  keyboard shortcuts that reference <command> elements in the  browser.</li>
</ul>
<p>What I use it for:</p>
<ul>
<li>Executing commands without having to know their keyboard shortcut.</li>
<li>Bookmarking without having to click the star, while having it default to Unsorted Bookmarks.</li>
<li>Quickly getting to the About page, to check for nightly updates.
Some commands don&#39;t work, like &quot;Subscribe to page&quot;. I would really like this command to work. Perhaps in the future I&#39;ll add an API for creating new commands. This tool will never compare to the extreme power of visual command tools like Ubiquity. However it&#39;s a very lightweight way to access built-in commands without needing to remember their shortcuts, or using the mouse.</li>
</ul>
]]></description><link>/2011/03/cmd-quick-command-execution-for-firefox-4/index.html</link><guid isPermaLink="true">/2011/03/cmd-quick-command-execution-for-firefox-4/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Fri, 18 Mar 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Tracking Firefox UI Response Time]]></title><description><![CDATA[<p>I wrote an add-on for Firefox 4 that tracks how long various parts of the browser&#39;s user-interface take to load. It does not require a restart of the browser.</p>
<p><a href="http://people.mozilla.com/~dietrich/aboutresponse.xpi">Click here to install.</a></p>
<ul>
<li>It measures the duration between &#39;popupshowing&#39; and &#39;popupshown&#39; events. This covers menus, menu-like things, and those floating panels you&#39;re starting to see everywhere.</li>
<li>You can see your results at <a href="response">about:response</a>. There won&#39;t be anything there if you just installed the add-on. Browse around for a few days and then check it out.</li>
<li>It doesn&#39;t track popups without an id yet. It could also be nicer by showing the containing menu name if available.</li>
<li>I&#39;d like to add window load times. What else in the front-end could we be measuring? I was thinking about <command> execution, but there&#39;s not a way to do that without modifying the core, afaict.</li>
<li>Perhaps we could add a button for users to submit their anonymized data somewhere.
Try it out, let me know if you have any problems. The <a href="https://github.com/autonome/about-response">source code</a> is available on Github.</li>
</ul>
<p><a href="about-response-screenshot.png"><img src="http://autonome.files.wordpress.com/2011/02/about-response-screenshot.png" alt="about-response-screenshot" title="about-response-screenshot"></a></p>
]]></description><link>/2011/02/tracking-firefox-ui-response-time/index.html</link><guid isPermaLink="true">/2011/02/tracking-firefox-ui-response-time/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Tue, 22 Feb 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Tracking Firefox UI Response Time]]></title><description><![CDATA[<p>I wrote an add-on for Firefox 4 that tracks how long various parts of the browser&#39;s user-interface take to load. It does not require a restart of the browser.</p>
<p><a href="http://people.mozilla.com/~dietrich/aboutresponse.xpi">Click here to install.</a></p>
<ul>
<li>It measures the duration between &#39;popupshowing&#39; and &#39;popupshown&#39; events. This covers menus, menu-like things, and those floating panels you&#39;re starting to see everywhere.</li>
<li>You can see your results at <a href="response">about:response</a>. There won&#39;t be anything there if you just installed the add-on. Browse around for a few days and then check it out.</li>
<li>It doesn&#39;t track popups without an id yet. It could also be nicer by showing the containing menu name if available.</li>
<li>I&#39;d like to add window load times. What else in the front-end could we be measuring? I was thinking about <command> execution, but there&#39;s not a way to do that without modifying the core, afaict.</li>
<li>Perhaps we could add a button for users to submit their anonymized data somewhere.
Try it out, let me know if you have any problems. The <a href="https://github.com/autonome/about-response">source code</a> is available on Github.</li>
</ul>
<p><a href="about-response-screenshot.png"><img src="http://autonome.files.wordpress.com/2011/02/about-response-screenshot.png" alt="about-response-screenshot" title="about-response-screenshot"></a></p>
]]></description><link>/2011/02/tracking-firefox-ui-response-time/index.html</link><guid isPermaLink="true">/2011/02/tracking-firefox-ui-response-time/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Tue, 22 Feb 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building Add-ons with Jetpack, Flightdeck and... Vim.]]></title><description><![CDATA[<p>AddonEditor is an add-on for Firefox that allows you to use an external editor when building add-ons with the Add-ons Builder (aka Flightdeck). Yeah, say that 10 times fast.</p>
<p>While Skywriter (aka Bespin) is nice, it&#39;s just not [insert your favorite editor here]. So I stole the code from the <a href="http://bit.ly/gZQIiP">Ubiquity project for loading an external app as editor</a>, and converted it to a CommonJS module for Jetpack (which I&#39;ve listed on the <a href="http://mzl.la/aDar20">Jetpack Modules page</a>). I built an add-on using Jetpack&#39;s page-mod module to add buttons to the Add-on Builder for loading a file in an external editor:</p>
<p><a href="addon-editor.png"><img src="http://autonome.files.wordpress.com/2010/12/addon-editor.png" alt="" title="addon-editor"></a></p>
<p>When you click the button the first time, you&#39;re prompted with a file-open dialog. Select the editor application of your choice, and the file will open in it. From then on, your chosen editor will automatically load files when you click the button. To clear your choice, choose the other button.</p>
<p><a href="http://bit.ly/eDVYEo">Install AddonEditor</a>. Requires Firefox 4 Beta 7 or newer.</p>
<p><a href="http://bit.ly/idHrqa">Clone and make your own, based on AddonEditor.</a> I built it using  Jetpack 0.10, which isn&#39;t released yet. However, I don&#39;t think it takes advantage of anything new, so it might be test-able from the Builder. But the Builder is giving errors when I hit the &quot;test&quot; button (which I&#39;ve reported to Zalun), so I can&#39;t tell for sure yet.</p>
<p>BEWARE:</p>
<ul>
<li>I&#39;ve only tested on Linux. Let me know in the comments if it works or doesn&#39;t for you.</li>
<li>Terminal apps not liked, apparently: /usr/bin/vim hangs Firefox completely. /usr/bin/gvim works fine.</li>
<li>The UI augmentation to Flightdeck probably made Zalun puke. It should probably just be an option in the context menu or something. Except that you&#39;d never find it. Ideas?</li>
</ul>
]]></description><link>/2010/12/building-add-ons-with-jetpack-flightdeck-and-vim/index.html</link><guid isPermaLink="true">/2010/12/building-add-ons-with-jetpack-flightdeck-and-vim/index.html</guid><category><![CDATA[Add-on]]></category><category><![CDATA[Development]]></category><category><![CDATA[Add-ons]]></category><category><![CDATA[extensions]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Mon, 06 Dec 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Upcoming changes to the Jetpack Widget API]]></title><description><![CDATA[<p>Between <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=612169">bug 612169</a> and <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=569479">bug 569479</a>, the widget API has undergone a major transformation in the upcoming <a href="https://wiki.mozilla.org/Labs/Jetpack/SDK/0.10">0.10 SDK release</a>.</p>
<p>Both sets of changes have made the API more compact, reducing the amount of code required to build widgets. The Electrolysis (e10s) changes are in preparation for moving Jetpack code out of the main Firefox process. They also make the widget API significantly more powerful, combining the current widget functionality with content scripts.</p>
<p>The e10s changes have affected the API to a significant degree; your widgets will certainly require more than just cosmetic changes.  I was worried at first that the e10s changes would complicate things, causing more verbose code patterns, and tricky message sequences to wire things together. However, the opposite was true: The documentation examples and the automated test code were both <em>more compact</em> and <em>simpler</em> after I&#39;d rewritten them to use the new API.</p>
<p>Here&#39;s an example widget that shows the Facebook profile pic of the most recent friend in your news feed:</p>
<p><pre>require(&quot;widget&quot;).Widget({
  label: &quot;Latest Friend&quot;,
  contentURL: &quot;<a href="https://www.facebook.com/home.php">https://www.facebook.com/home.php</a>&quot;,
  contentScript: &quot;document.location = document.querySelector(&#39;.profilePic&#39;).src;&quot;,
  contentScriptWhen: &quot;ready&quot;,
  onClick: function() require(&quot;tabs&quot;).tabs.active.location = this.contentURL
});</pre>
Hmmm, with the page-worker module, querySelectorAll and some hot timer action, you could have a Rockmelt-y bar...</p>
<p>A summary of the API changes:</p>
<ul>
<li>You no longer need to explicitly add and remove widgets.</li>
<li>Constructing a widget immediately adds it to the add-on bar. To remove a widget, call its destroy() method.</li>
<li>The image property has been removed. Instead use the contentURL property, which can be used with image URLs, or local or remote content URLs. The content property is still present, used for HTML fragments or plain text.</li>
<li>The API now exposes the page-mod API set - meaning that you can attach a content script either inline via contentScript, or a separate file via contentScriptURL, and specify whether it runs at load or when the DOM is ready via contentScriptWhen.</li>
<li>The onLoad and onReady event listeners have been removed in favor of content scripts, where you can listen for those events, and post messages back to your Jetpack code. The examples in the docs show how easy this is.
For more details, check out the <a href="https://github.com/mozilla/addon-sdk/blob/master/packages/addon-kit/docs/widget.md">updated widget API documentation</a>.</li>
</ul>
]]></description><link>/2010/11/upcoming-changes-to-the-jetpack-widget-api/index.html</link><guid isPermaLink="true">/2010/11/upcoming-changes-to-the-jetpack-widget-api/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[JavaScript]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Tue, 23 Nov 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Upcoming changes to the Jetpack Widget API]]></title><description><![CDATA[<p>Between <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=612169">bug 612169</a> and <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=569479">bug 569479</a>, the widget API has undergone a major transformation in the upcoming <a href="https://wiki.mozilla.org/Labs/Jetpack/SDK/0.10">0.10 SDK release</a>.</p>
<p>Both sets of changes have made the API more compact, reducing the amount of code required to build widgets. The Electrolysis (e10s) changes are in preparation for moving Jetpack code out of the main Firefox process. They also make the widget API significantly more powerful, combining the current widget functionality with content scripts.</p>
<p>The e10s changes have affected the API to a significant degree; your widgets will certainly require more than just cosmetic changes.  I was worried at first that the e10s changes would complicate things, causing more verbose code patterns, and tricky message sequences to wire things together. However, the opposite was true: The documentation examples and the automated test code were both <em>more compact</em> and <em>simpler</em> after I&#39;d rewritten them to use the new API.</p>
<p>Here&#39;s an example widget that shows the Facebook profile pic of the most recent friend in your news feed:</p>
<p><pre>require(&quot;widget&quot;).Widget({
  label: &quot;Latest Friend&quot;,
  contentURL: &quot;<a href="https://www.facebook.com/home.php">https://www.facebook.com/home.php</a>&quot;,
  contentScript: &quot;document.location = document.querySelector(&#39;.profilePic&#39;).src;&quot;,
  contentScriptWhen: &quot;ready&quot;,
  onClick: function() require(&quot;tabs&quot;).tabs.active.location = this.contentURL
});</pre>
Hmmm, with the page-worker module, querySelectorAll and some hot timer action, you could have a Rockmelt-y bar...</p>
<p>A summary of the API changes:</p>
<ul>
<li>You no longer need to explicitly add and remove widgets.</li>
<li>Constructing a widget immediately adds it to the add-on bar. To remove a widget, call its destroy() method.</li>
<li>The image property has been removed. Instead use the contentURL property, which can be used with image URLs, or local or remote content URLs. The content property is still present, used for HTML fragments or plain text.</li>
<li>The API now exposes the page-mod API set - meaning that you can attach a content script either inline via contentScript, or a separate file via contentScriptURL, and specify whether it runs at load or when the DOM is ready via contentScriptWhen.</li>
<li>The onLoad and onReady event listeners have been removed in favor of content scripts, where you can listen for those events, and post messages back to your Jetpack code. The examples in the docs show how easy this is.
For more details, check out the <a href="https://github.com/mozilla/addon-sdk/blob/master/packages/addon-kit/docs/widget.md">updated widget API documentation</a>.</li>
</ul>
]]></description><link>/2010/11/upcoming-changes-to-the-jetpack-widget-api/index.html</link><guid isPermaLink="true">/2010/11/upcoming-changes-to-the-jetpack-widget-api/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[JavaScript]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Tue, 23 Nov 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Jetpacking: The 0.3 SDK and a peek at what's coming next.]]></title><description><![CDATA[<p>I&#39;ve been working on the Jetpack project for about a month now - implementing features, fixing bugs, and generally helping move things forward as we build out the wide set of capabilities needed to enable an <em>awesome</em> future for Firefox add-on development.</p>
<p>The Jetpack team <a href="http://mozillalabs.com/jetpack/2010/04/29/announcing-jetpack-sdk-0-3/">released the 0.3 version of the SDK</a> yesterday, which has a bunch of platform improvements, and also the <a href="https://jetpack.mozillalabs.com/sdk/0.3/docs/#module/jetpack-core/context-menu">context menu API</a> - the first UI feature to ship in the SDK. The <a href="https://jetpack.mozillalabs.com/sdk/0.3/docs/#guide/programs">SDK documentation has an example</a> of using this feature that shows 1) how easy it is to build UI features with Jetpack, but also 2) shows how add-on development process has <em>changed</em> with the SDK. For example, all of the manual packaging steps are <em>gone</em>. That&#39;s right. No more crazy directory structures, no more RDF files, no more GUIDs. All of that stuff is gone, replaced with a couple of simple commands. It&#39;s not perfect yet, but expect it to get even easier to both package and deploy add-ons as we build out the SDK further.</p>
<p>So what&#39;s next? The 0.4 release is where the feature set of the SDK really starts to blow up:</p>
<ul>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/103">Panels</a>: Floating rich content, tooltips, contextual UI.</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/116">Private Browsing</a>: Making it easy for add-ons to respect your privacy.</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/111">Selection</a>: Remember how awesome it was having an intuitive selection API in Ubiquity?</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/113">Localization</a>: Simple access and distribution of locale data.</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/108">Page Worker</a>: Like a <a href="https://developer.mozilla.org/En/Using_web_workers">Web Worker</a>, but with more privileges and a DOM.</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/104">Simple Storage</a>: Persistent object store - like DOMStorage for add-ons.</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/114">Places</a>: Improved bookmarks and history searching and browsing.</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/102">Widgets</a>: A preview of the ideas <a href="http://mozillalabs.com/jetpack/2010/04/08/the-single-ui-element/">Daniel</a> and <a href="http://jboriss.wordpress.com/2010/04/29/removing-firefoxs-status-bar-and-rehousing-add-on-icons-part-1-of-2/">Boriss</a> have recently blogged about.</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/109">Request</a>: Even easier AJAX (Please don&#39;t make that into an acronym. Please.)</li>
<li>Installable without needing to restart Firefox (trunk builds only).</li>
<li>Documentation: More and better!
And it&#39;s not just about the feature set: The diligent focus of the Jetpack core team on developer ergonomics, and the experience gained from the Jetpack prototype and projects like Ubiquity, is resulting in a set of APIs that are far more intuitive and easy to use than the current XPCOM-riddled minefield that add-on developers have to deal with today.</li>
</ul>
<p>If you have questions or suggestions, let me know in the comments, or join us on <a href="http://groups.google.com/group/mozilla-labs-jetpack">Jetpack developer forum</a>.</p>
]]></description><link>/2010/05/jetpacking-the-0-3-sdk-and-a-peek-at-whats-coming-next/index.html</link><guid isPermaLink="true">/2010/05/jetpacking-the-0-3-sdk-and-a-peek-at-whats-coming-next/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 01 May 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Jetpacking: The 0.3 SDK and a peek at what's coming next.]]></title><description><![CDATA[<p>I&#39;ve been working on the Jetpack project for about a month now - implementing features, fixing bugs, and generally helping move things forward as we build out the wide set of capabilities needed to enable an <em>awesome</em> future for Firefox add-on development.</p>
<p>The Jetpack team <a href="http://mozillalabs.com/jetpack/2010/04/29/announcing-jetpack-sdk-0-3/">released the 0.3 version of the SDK</a> yesterday, which has a bunch of platform improvements, and also the <a href="https://jetpack.mozillalabs.com/sdk/0.3/docs/#module/jetpack-core/context-menu">context menu API</a> - the first UI feature to ship in the SDK. The <a href="https://jetpack.mozillalabs.com/sdk/0.3/docs/#guide/programs">SDK documentation has an example</a> of using this feature that shows 1) how easy it is to build UI features with Jetpack, but also 2) shows how add-on development process has <em>changed</em> with the SDK. For example, all of the manual packaging steps are <em>gone</em>. That&#39;s right. No more crazy directory structures, no more RDF files, no more GUIDs. All of that stuff is gone, replaced with a couple of simple commands. It&#39;s not perfect yet, but expect it to get even easier to both package and deploy add-ons as we build out the SDK further.</p>
<p>So what&#39;s next? The 0.4 release is where the feature set of the SDK really starts to blow up:</p>
<ul>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/103">Panels</a>: Floating rich content, tooltips, contextual UI.</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/116">Private Browsing</a>: Making it easy for add-ons to respect your privacy.</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/111">Selection</a>: Remember how awesome it was having an intuitive selection API in Ubiquity?</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/113">Localization</a>: Simple access and distribution of locale data.</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/108">Page Worker</a>: Like a <a href="https://developer.mozilla.org/En/Using_web_workers">Web Worker</a>, but with more privileges and a DOM.</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/104">Simple Storage</a>: Persistent object store - like DOMStorage for add-ons.</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/114">Places</a>: Improved bookmarks and history searching and browsing.</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/102">Widgets</a>: A preview of the ideas <a href="http://mozillalabs.com/jetpack/2010/04/08/the-single-ui-element/">Daniel</a> and <a href="http://jboriss.wordpress.com/2010/04/29/removing-firefoxs-status-bar-and-rehousing-add-on-icons-part-1-of-2/">Boriss</a> have recently blogged about.</li>
<li><a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/109">Request</a>: Even easier AJAX (Please don&#39;t make that into an acronym. Please.)</li>
<li>Installable without needing to restart Firefox (trunk builds only).</li>
<li>Documentation: More and better!
And it&#39;s not just about the feature set: The diligent focus of the Jetpack core team on developer ergonomics, and the experience gained from the Jetpack prototype and projects like Ubiquity, is resulting in a set of APIs that are far more intuitive and easy to use than the current XPCOM-riddled minefield that add-on developers have to deal with today.</li>
</ul>
<p>If you have questions or suggestions, let me know in the comments, or join us on <a href="http://groups.google.com/group/mozilla-labs-jetpack">Jetpack developer forum</a>.</p>
]]></description><link>/2010/05/jetpacking-the-0-3-sdk-and-a-peek-at-whats-coming-next/index.html</link><guid isPermaLink="true">/2010/05/jetpacking-the-0-3-sdk-and-a-peek-at-whats-coming-next/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 01 May 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Performance Update]]></title><description><![CDATA[<p>I&#39;ve been focusing more on <a href="https://wiki.mozilla.org/Labs/Jetpack">Jetpack</a> development this quarter, but will still be posting performance round-ups regularly here. In fact, here&#39;s one now:</p>
<ul>
<li>Taras Glek continues to blog his progress on improving the binaries we ship, talking about <a href="http://blog.mozilla.com/tglek/2010/04/05/linux-how-to-make-startup-suck-less-and-reduce-memory-usage/">how reordering binaries improves memory use as well as load time</a>, <a href="http://blog.mozilla.com/tglek/2010/04/12/squeezing-every-last-bit-of-performance-out-of-the-linux-toolchain/">leveraging GCC&#39;s PGO for fast startup</a>, and finally about <a href="http://blog.mozilla.com/tglek/2010/04/07/icegrind-valgrind-plugin-for-optimizing-cold-startup/">Icegrind, his Valgrind plugin</a> that generates a log of the order of access to mmap&#39;d files.</li>
<li>Are we fast yet?! The answer to that question, at least in regards to JavaScript performance test suites, can be found at <a href="http://arewefastyet.com/">AreWeFastYet.com</a>, where you&#39;ll see graphs that show Firefox trunk&#39;s performance relative to Google&#39;s V8 and Apple&#39;s Nitro on the Sunspider and V8Bench tests. I won&#39;t spoil the answer for you, you&#39;ll have to go check it out for yourself.</li>
<li>I <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=557552">finished and checked-in</a> my changes to the <a href="http://tests.themasta.com/tinderboxpushlog/?tree=Firefox">Tinderbox Pushlog</a>, adding a new feature that provides at-a-glance comparison in performance test results between any two pushes on the page (<a href="https://bug557552.bugzilla.mozilla.org/attachment.cgi?id=437335">screenshot</a>). It will go live next time Marcus pushes changes out to his server. <span style="text-decoration:line-through;">But he&#39;s not online at the moment, so I don&#39;t know when this feature will go live.</span> Heh, it went live moments after I published this post.</li>
<li>Heather Arthur and Clint Talbert are working on a project to add performance data to Addons.mozilla.org for extensions. They&#39;re starting with the effect of a given extension on Firefox startup time. Follow along on the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=559929">bug</a>, or <a href="http://github.com/harthur/dirtyharry">watch project Dirty Harry on Github</a>.</li>
<li>Improving the AMO extension validator: AMO scans uploaded extensions and reports problems to the authors. For performance best-practices, we should at least warn the authors if possible if their add-on is doing something that&#39;ll make Firefox slow. This bug is for <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=551714">warning about add-ons that don&#39;t have their content in a JAR file</a>. If you see any thing in the <a href="https://wiki.mozilla.org/Performance/Addons/BestPractices">best practices guide</a> that can be statically detected, please file a bug for it <a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=addons.mozilla.org&amp;component=Admin%2fEditor%20Tools">here</a>.
If you have any other performance-related bugs, blog posts, anecdotes or other tomfoolery, post it in the comments!</li>
</ul>
]]></description><link>/2010/04/firefox-performance-update-2/index.html</link><guid isPermaLink="true">/2010/04/firefox-performance-update-2/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 17 Apr 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Performance Update]]></title><description><![CDATA[<p>I&#39;ve been focusing more on <a href="https://wiki.mozilla.org/Labs/Jetpack">Jetpack</a> development this quarter, but will still be posting performance round-ups regularly here. In fact, here&#39;s one now:</p>
<ul>
<li>Taras Glek continues to blog his progress on improving the binaries we ship, talking about <a href="http://blog.mozilla.com/tglek/2010/04/05/linux-how-to-make-startup-suck-less-and-reduce-memory-usage/">how reordering binaries improves memory use as well as load time</a>, <a href="http://blog.mozilla.com/tglek/2010/04/12/squeezing-every-last-bit-of-performance-out-of-the-linux-toolchain/">leveraging GCC&#39;s PGO for fast startup</a>, and finally about <a href="http://blog.mozilla.com/tglek/2010/04/07/icegrind-valgrind-plugin-for-optimizing-cold-startup/">Icegrind, his Valgrind plugin</a> that generates a log of the order of access to mmap&#39;d files.</li>
<li>Are we fast yet?! The answer to that question, at least in regards to JavaScript performance test suites, can be found at <a href="http://arewefastyet.com/">AreWeFastYet.com</a>, where you&#39;ll see graphs that show Firefox trunk&#39;s performance relative to Google&#39;s V8 and Apple&#39;s Nitro on the Sunspider and V8Bench tests. I won&#39;t spoil the answer for you, you&#39;ll have to go check it out for yourself.</li>
<li>I <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=557552">finished and checked-in</a> my changes to the <a href="http://tests.themasta.com/tinderboxpushlog/?tree=Firefox">Tinderbox Pushlog</a>, adding a new feature that provides at-a-glance comparison in performance test results between any two pushes on the page (<a href="https://bug557552.bugzilla.mozilla.org/attachment.cgi?id=437335">screenshot</a>). It will go live next time Marcus pushes changes out to his server. <span style="text-decoration:line-through;">But he&#39;s not online at the moment, so I don&#39;t know when this feature will go live.</span> Heh, it went live moments after I published this post.</li>
<li>Heather Arthur and Clint Talbert are working on a project to add performance data to Addons.mozilla.org for extensions. They&#39;re starting with the effect of a given extension on Firefox startup time. Follow along on the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=559929">bug</a>, or <a href="http://github.com/harthur/dirtyharry">watch project Dirty Harry on Github</a>.</li>
<li>Improving the AMO extension validator: AMO scans uploaded extensions and reports problems to the authors. For performance best-practices, we should at least warn the authors if possible if their add-on is doing something that&#39;ll make Firefox slow. This bug is for <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=551714">warning about add-ons that don&#39;t have their content in a JAR file</a>. If you see any thing in the <a href="https://wiki.mozilla.org/Performance/Addons/BestPractices">best practices guide</a> that can be statically detected, please file a bug for it <a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=addons.mozilla.org&amp;component=Admin%2fEditor%20Tools">here</a>.
If you have any other performance-related bugs, blog posts, anecdotes or other tomfoolery, post it in the comments!</li>
</ul>
]]></description><link>/2010/04/firefox-performance-update-2/index.html</link><guid isPermaLink="true">/2010/04/firefox-performance-update-2/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 17 Apr 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Performance Update]]></title><description><![CDATA[<p>As I mentioned in <a href="http://autonome.wordpress.com/2010/03/19/firefox-performance-update-startup-and-otherwise-march-19-2010/">my previous update</a>, the scope of these updates has expanded beyond start-up time. That said, I can&#39;t keep track of everything! So if you have an update, <a href="mailto:dietrich@mozilla.com">email it to me</a> if you want it in the post, or just add it in the comments.</p>
<ul>
<li>First, I just have to say that Marco&#39;s fix for <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=542943">bug 542943</a> has changed the way I think about browser restarts, removing the fear entirely. It turns out that, for me anyway, the majority of the slowness involved in restarting was waiting for the process to exit. After Marco&#39;s landing, it&#39;s nearly instantaneous.</li>
<li>While I was away, Taras blogged nearly daily about his findings while working on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=549749">Linux code locality</a>. He first posted <a href="http://blog.mozilla.com/tglek/2010/03/23/when-in-trouble-draw-a-picture/">a graph of I/O from library loading</a>, then a long post about <a href="http://blog.mozilla.com/tglek/2010/03/24/linux-why-loading-binaries-from-disk-sucks/">why library loading sucks on Linux</a>, followed by some findings regarding <a href="http://blog.mozilla.com/tglek/2010/03/25/madvise-prelink-update/">madvise and prelink</a>, finally posting about <a href="http://blog.mozilla.com/tglek/2010/03/29/linux-startup-inefficiency/">linker inefficiencies and SuSE&#39;s workaround</a>.</li>
<li>Mike Wu and others are moving forward on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=552121">the &quot;omnijar&quot; project</a>, which moves most of the core application files into a single JAR file. Taras described it as &quot;extreme filesystem makeover&quot;, and found ~10% start-up improvement with this approach on the desktop.</li>
<li>Clint Talbert and Heather Arthur are beginning work on a project that measures add-on performance, that will hook into AMO to show developers how their add-ons perform.</li>
<li>Drew Willcoxon got r+ on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=536893">bug 536893</a> to allow asynchronous opening of Places query results. Once we start using the feature, expect bookmark and history UI to get snappier!</li>
<li>Taras got review on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=516085">bug 516085</a>, which consolidates access to core services that currently accessed hundreds of thousands of times during a browsing session.</li>
<li>A bunch of people have added tips to the <a href="https://wiki.mozilla.org/Performance/Addons/BestPractices">add-on performance &quot;best practices&quot; document</a>. I&#39;ll be cleaning it up and moving it to <a href="https://developer.mozilla.org">MDC</a> soon.</li>
<li><p>While the tinderbox pushlog is fantastic for viewing per-checkin results, and a broader view of tree activity, it doesn&#39;t provide any facility for comparing the results of performance tests between landings. So I spent some time this week writing an addition that allows you to select any two pushes, and view a comparison table showing the difference in performance across all tests on all operating systems for those revisions. I&#39;ll clean it up, and try to get it deployed, but regardless will make it available as a Jetpack or Greasemonkey script sometime next week.
For more info:</p>
</li>
<li><p>Startup performance activity is tracked <a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements">here</a>.</p>
</li>
<li>Add-on performance efforts are being tracked on <a href="https://wiki.mozilla.org/Performance/Addons">this page</a>.</li>
<li>Weekly performance results for all measurements are available on the <a href="http://graphs.mozilla.org/dashboard/snapshot/">snapshot</a>, and trends available on the <a href="http://graphs.mozilla.org/dashboard/">dashboard</a>.</li>
</ul>
]]></description><link>/2010/04/firefox-performance-update/index.html</link><guid isPermaLink="true">/2010/04/firefox-performance-update/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 03 Apr 2010 00:00:00 GMT</pubDate></item></channel></rss>