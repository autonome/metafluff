<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[undefined - Dietrich Ayala]]></title><description><![CDATA[Internet freedom, the web and Mozilla.]]></description><link>/</link><generator>Ghost</generator><lastBuildDate>Wed, 12 Jul 2017 05:35:22 GMT</lastBuildDate><atom:link href="/tag/undefined/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[The awesomebar for command-line filesystem traversal... for Windows]]></title><description><![CDATA[<p>Autojump is a command-line utility that &quot;learns&quot; from your filesystem navigation via the &quot;cd&quot; command, and allows you to jump quickly to oft-travelled-to directories. Source, installation and usage information are at <a href="http://github.com/joelthelion/autojump">Github</a>. After seeing <a href="http://twitter.com/dalmaer/statuses/4685018591">this tweet from Dion</a>, I went to install it, only to remember that I&#39;m on Windows 7 now. Bah. So, I tweaked it a bit to run inside the <a href="https://developer.mozilla.org/En/Windows_Build_Prerequisites#MozillaBuild">MozillaBuild</a> environment. Assuming you&#39;ve cloned/downloaded Autojump, here are the steps to get it working:</p>
<ol>
<li>Open Mingw, navigate to the autojump source directory</li>
<li>Remove all instances of &quot;sudo&quot; from the install.sh file</li>
<li>Get your Python path: $ which python</li>
<li>Replace /usr/bin/python with your Python path in the autojump file</li>
<li>Run install.sh</li>
</ol>
]]></description><link>/2009/10/the-awesomebar-for-command-line-filesystem-traversal-for-windows/index.html</link><guid isPermaLink="true">/2009/10/the-awesomebar-for-command-line-filesystem-traversal-for-windows/index.html</guid><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Wed, 07 Oct 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Summary]]></title><description><![CDATA[<p>This week brought a big win on Mac, and a slew of changes that are about to land.</p>
<p>Recent activity:</p>
<ul>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=517045">Bug 517045</a> is fixed and brings another win on Mac. Found by Joel Reymont and fixed by John Daggett, it improves cold startup by ~20% and warm startup by ~4%. It gets better: Jonathan Kew filed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=519445">bug 519445</a> with a WIP patch for yet further reductions in Mac startup time spent in font system initialization.</li>
<li>Taras Glek&#39;s <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=507288">work on combining the     different preference files</a> into a single one is ready to land.</li>
<li>We now have unit-tested optimized builds, thanks to Release Engineering&#39;s work on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">bug 486783</a>. This means we can now turn on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=419893">PGO for Places, mozStorage and SQLite</a>, which I&#39;ll land presently.</li>
<li>B<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=504858">ug    504858</a> pushes back the population of the bookmarks toolbar until after   the  browser window comes up. The patch has review, is ready to land.</li>
<li>Alfred Kayser&#39;s patch on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510844">bug    510844</a> which should increase throughput of JAR file reading, is   ready to land.</li>
<li>Ben Hsieh got review on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510991">bug 510991</a>, which removes some stats() from the startup path.</li>
<li>I&#39;m no longer able to reproduce the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=517741">cold startup regression from 3.5 to 3.6</a>. I turned of SuperFetch, which resulted in more stable numbers, but there was no visible regression, even in builds going back a couple of months. Juan is going to test on Windows XP.</li>
<li>Ben Hsieh has a patch up for review on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=511761">bug   511761</a>, which removes needless stat()s of component files, and improves and clarifies current cache invalidation behavior.</li>
<li>Service caching work in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=516085">bug   516085</a>, made no progress. Next week I&#39;ll try pushing this  to the Places branch to get a better idea of the total performance  impact of the change.</li>
<li><p>Zack is working on major CSS parser changes in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">bug    513149</a>.
Projects in a holding pattern:</p>
</li>
<li><p>Cold Startup Testing: Drew and Alice made a bunch of progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">bug    510587</a>,  to create a new Ts that measures cold startup. Alice is    working on mobile Talos though, so this is sidelined for a bit. The only    issue left is reliable Windows measurement, but we&#39;re not going to    block on it, can live with Mac and Linux to start off.</p>
</li>
<li>JARification: David abandoned <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">moving JS     modules into a JAR file</a>, since those files are fastloaded.    However, since we want things like post-extension-install restarts to be    fast, and those cause fastload cache invalidation, we might want to  do   things like this anyways. I filed a bug for the same treatment for    components. These are lower priority, since they&#39;re not the normal    startup case. Follow along with all JAR-ification via<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513027"> the    tracker  bug</a>.</li>
<li>Startup Timeline: No updates, still not landed. Add [ft] in the   whiteboard of your bug w/ the function names you want timed and David   will generate it and update the bug.</li>
<li>Static Analysis: No progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">bug   506128</a>.  David needs to file a bug with the final log of   named-yet-uncalled  functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file   bugs  for each, generate Talos config patches and profile data, and then   move  it into Rel-Eng territory. Also, need to get a separate  Tinderbox  tree,  since it&#39;s going to cause a bazillion new columns.</li>
<li><a href="http://wagerlabs.com/">Joel   Reymont</a> noted in<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug   513076</a> that there are serious drawbacks to getting our libraries in   the dyld  shared cache on Mac, so has deprioritized that work.</li>
</ul>
]]></description><link>/2009/10/firefox-startup-performance-weekly-summary-4/index.html</link><guid isPermaLink="true">/2009/10/firefox-startup-performance-weekly-summary-4/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 03 Oct 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Summary]]></title><description><![CDATA[<p>This week brought a big win on Mac, and a slew of changes that are about to land.</p>
<p>Recent activity:</p>
<ul>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=517045">Bug 517045</a> is fixed and brings another win on Mac. Found by Joel Reymont and fixed by John Daggett, it improves cold startup by ~20% and warm startup by ~4%. It gets better: Jonathan Kew filed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=519445">bug 519445</a> with a WIP patch for yet further reductions in Mac startup time spent in font system initialization.</li>
<li>Taras Glek&#39;s <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=507288">work on combining the     different preference files</a> into a single one is ready to land.</li>
<li>We now have unit-tested optimized builds, thanks to Release Engineering&#39;s work on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">bug 486783</a>. This means we can now turn on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=419893">PGO for Places, mozStorage and SQLite</a>, which I&#39;ll land presently.</li>
<li>B<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=504858">ug    504858</a> pushes back the population of the bookmarks toolbar until after   the  browser window comes up. The patch has review, is ready to land.</li>
<li>Alfred Kayser&#39;s patch on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510844">bug    510844</a> which should increase throughput of JAR file reading, is   ready to land.</li>
<li>Ben Hsieh got review on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510991">bug 510991</a>, which removes some stats() from the startup path.</li>
<li>I&#39;m no longer able to reproduce the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=517741">cold startup regression from 3.5 to 3.6</a>. I turned of SuperFetch, which resulted in more stable numbers, but there was no visible regression, even in builds going back a couple of months. Juan is going to test on Windows XP.</li>
<li>Ben Hsieh has a patch up for review on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=511761">bug   511761</a>, which removes needless stat()s of component files, and improves and clarifies current cache invalidation behavior.</li>
<li>Service caching work in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=516085">bug   516085</a>, made no progress. Next week I&#39;ll try pushing this  to the Places branch to get a better idea of the total performance  impact of the change.</li>
<li><p>Zack is working on major CSS parser changes in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">bug    513149</a>.
Projects in a holding pattern:</p>
</li>
<li><p>Cold Startup Testing: Drew and Alice made a bunch of progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">bug    510587</a>,  to create a new Ts that measures cold startup. Alice is    working on mobile Talos though, so this is sidelined for a bit. The only    issue left is reliable Windows measurement, but we&#39;re not going to    block on it, can live with Mac and Linux to start off.</p>
</li>
<li>JARification: David abandoned <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">moving JS     modules into a JAR file</a>, since those files are fastloaded.    However, since we want things like post-extension-install restarts to be    fast, and those cause fastload cache invalidation, we might want to  do   things like this anyways. I filed a bug for the same treatment for    components. These are lower priority, since they&#39;re not the normal    startup case. Follow along with all JAR-ification via<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513027"> the    tracker  bug</a>.</li>
<li>Startup Timeline: No updates, still not landed. Add [ft] in the   whiteboard of your bug w/ the function names you want timed and David   will generate it and update the bug.</li>
<li>Static Analysis: No progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">bug   506128</a>.  David needs to file a bug with the final log of   named-yet-uncalled  functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file   bugs  for each, generate Talos config patches and profile data, and then   move  it into Rel-Eng territory. Also, need to get a separate  Tinderbox  tree,  since it&#39;s going to cause a bazillion new columns.</li>
<li><a href="http://wagerlabs.com/">Joel   Reymont</a> noted in<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug   513076</a> that there are serious drawbacks to getting our libraries in   the dyld  shared cache on Mac, so has deprioritized that work.</li>
</ul>
]]></description><link>/2009/10/firefox-startup-performance-weekly-summary-4/index.html</link><guid isPermaLink="true">/2009/10/firefox-startup-performance-weekly-summary-4/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 03 Oct 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Summary]]></title><description><![CDATA[<p>Recent activity:</p>
<ul>
<li>An improvement in startup time on Mac Leopard of around ~16% (aka: Very Large) was found by Joel Reymont and fixed by Masayuki Nakano in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=517549">bug 517549</a>. Mac users rejoice!</li>
<li>The Windows cold startup regression from 3.5 to 3.6 being tracked in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=517741">bug  517741</a>. Help finding the window for this would be awesome.</li>
<li>JAR Performance: Alfred Kayser has a new patch on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510844">bug  510844</a> which should increase throughput of JAR file reading, about ready to land.</li>
<li>Ben Hsieh is making progress removing the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=512827">needless  stats of already-fastloaded components</a> and other stat removals in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=511761">bug  511761</a>.</li>
<li>Service caching work is still in progress in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=516085">bug  516085</a>. Drew&#39;s tests showed no significant win on Tp, but the patch did reduce IO service retrievals by 58%. It might be worth pushing this to the Places branch to get a better idea of the total performance impact of the change.</li>
<li>Ryan Flint landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=499123">bug 499123</a>, combining a bunch of about: pages into a single component, on 1.9.2 branch for Firefox 3.6.</li>
<li>Bookmarks toolbar: I put a patch on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=504858">bug 504858</a> that pushes back the population of the toolbar until after the browser window comes up. Checking into the Places branch showed a 1.5% improvement to warm startup on Windows. Just waiting on review.</li>
<li><p>CSS Parsing Time: Zack is working on major CSS parser changes in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">bug   513149</a>.
Projects in a holding pattern:</p>
</li>
<li><p>Preference Files: Taras Glek has been working on combining the   different preference files into a single one at build time, in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=507288">bug   507288</a>. The patch is there, and is just trying to find a way to land   cleanly.</p>
</li>
<li>Cold Startup Testing: Drew and Alice made a bunch of progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">bug   510587</a>,  to create a new Ts that measures cold startup. Alice is   working on mobile Talos though, so this is sidelined for a bit. The only   issue left is reliable Windows measurement, but we&#39;re not going to   block on it, can live with Mac and Linux to start off.</li>
<li>JARification: David abandoned <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">moving JS    modules into a JAR file</a>, since those files are fastloaded.   However, since we want things like post-extension-install restarts to be   fast, and those cause fastload cache invalidation, we might want to do   things like this anyways. I filed a bug for the same treatment for   components. These are lower priority, since they&#39;re not the normal   startup case. Follow along with all JAR-ification via<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513027"> the   tracker  bug</a>.</li>
<li>Startup Timeline: No updates, still not landed. Add [ft] in the  whiteboard of your bug w/ the function names you want timed and David  will generate it and update the bug.</li>
<li>PGO for Places, mozStorage and SQLite: Still blocking on Rel-Eng  fixing <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">bug  486783</a>, which now has patches!</li>
<li>Static Analysis: No progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">bug  506128</a>.  David needs to file a bug with the final log of  named-yet-uncalled  functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file  bugs  for each, generate Talos config patches and profile data, and then  move  it into Rel-Eng territory. Also, need to get a separate Tinderbox  tree,  since it&#39;s going to cause a bazillion new columns.</li>
<li><a href="http://wagerlabs.com/">Joel  Reymont</a> noted in<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug  513076</a> that there are serious drawbacks to getting our libraries in  the dyld  shared cache on Mac, so has deprioritized that work.</li>
</ul>
]]></description><link>/2009/09/firefox-startup-performance-weekly-summary-3/index.html</link><guid isPermaLink="true">/2009/09/firefox-startup-performance-weekly-summary-3/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 26 Sep 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Summary]]></title><description><![CDATA[<p>Recent activity:</p>
<ul>
<li>An improvement in startup time on Mac Leopard of around ~16% (aka: Very Large) was found by Joel Reymont and fixed by Masayuki Nakano in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=517549">bug 517549</a>. Mac users rejoice!</li>
<li>The Windows cold startup regression from 3.5 to 3.6 being tracked in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=517741">bug  517741</a>. Help finding the window for this would be awesome.</li>
<li>JAR Performance: Alfred Kayser has a new patch on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510844">bug  510844</a> which should increase throughput of JAR file reading, about ready to land.</li>
<li>Ben Hsieh is making progress removing the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=512827">needless  stats of already-fastloaded components</a> and other stat removals in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=511761">bug  511761</a>.</li>
<li>Service caching work is still in progress in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=516085">bug  516085</a>. Drew&#39;s tests showed no significant win on Tp, but the patch did reduce IO service retrievals by 58%. It might be worth pushing this to the Places branch to get a better idea of the total performance impact of the change.</li>
<li>Ryan Flint landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=499123">bug 499123</a>, combining a bunch of about: pages into a single component, on 1.9.2 branch for Firefox 3.6.</li>
<li>Bookmarks toolbar: I put a patch on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=504858">bug 504858</a> that pushes back the population of the toolbar until after the browser window comes up. Checking into the Places branch showed a 1.5% improvement to warm startup on Windows. Just waiting on review.</li>
<li><p>CSS Parsing Time: Zack is working on major CSS parser changes in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">bug   513149</a>.
Projects in a holding pattern:</p>
</li>
<li><p>Preference Files: Taras Glek has been working on combining the   different preference files into a single one at build time, in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=507288">bug   507288</a>. The patch is there, and is just trying to find a way to land   cleanly.</p>
</li>
<li>Cold Startup Testing: Drew and Alice made a bunch of progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">bug   510587</a>,  to create a new Ts that measures cold startup. Alice is   working on mobile Talos though, so this is sidelined for a bit. The only   issue left is reliable Windows measurement, but we&#39;re not going to   block on it, can live with Mac and Linux to start off.</li>
<li>JARification: David abandoned <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">moving JS    modules into a JAR file</a>, since those files are fastloaded.   However, since we want things like post-extension-install restarts to be   fast, and those cause fastload cache invalidation, we might want to do   things like this anyways. I filed a bug for the same treatment for   components. These are lower priority, since they&#39;re not the normal   startup case. Follow along with all JAR-ification via<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513027"> the   tracker  bug</a>.</li>
<li>Startup Timeline: No updates, still not landed. Add [ft] in the  whiteboard of your bug w/ the function names you want timed and David  will generate it and update the bug.</li>
<li>PGO for Places, mozStorage and SQLite: Still blocking on Rel-Eng  fixing <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">bug  486783</a>, which now has patches!</li>
<li>Static Analysis: No progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">bug  506128</a>.  David needs to file a bug with the final log of  named-yet-uncalled  functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file  bugs  for each, generate Talos config patches and profile data, and then  move  it into Rel-Eng territory. Also, need to get a separate Tinderbox  tree,  since it&#39;s going to cause a bazillion new columns.</li>
<li><a href="http://wagerlabs.com/">Joel  Reymont</a> noted in<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug  513076</a> that there are serious drawbacks to getting our libraries in  the dyld  shared cache on Mac, so has deprioritized that work.</li>
</ul>
]]></description><link>/2009/09/firefox-startup-performance-weekly-summary-3/index.html</link><guid isPermaLink="true">/2009/09/firefox-startup-performance-weekly-summary-3/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 26 Sep 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Summary]]></title><description><![CDATA[<p>Apologies for not posting last week, but <a href="http://dietrich.tumblr.com/post/189638511/atp-was-so-much-damn-fun">I was on vacation</a>. Recent activity:</p>
<ul>
<li>I&#39;ve updated the project wiki page with <a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements#Overview">a table of summarized numbers</a> for at-a-glance tracking of progress. I need to disable superfetch and try again on Windows.</li>
<li>Our measurements of cold startup showed a huge regression on Windows from 3.5 to 3.6. Tracking this in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=517741">bug 517741</a>.</li>
<li>JARification: David abandoned <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">moving JS  modules into a JAR file</a>, since those files are fastloaded. However, since we want things like post-extension-install restarts to be fast, and those cause fastload cache invalidation, we might want to do things like this anyways. I filed a bug for the same treatment for components. These are lower priority, since they&#39;re not the normal startup case. Follow along with all JAR-ification via<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513027"> the tracker  bug</a>.</li>
<li>JAR Performance: I&#39;m going to test-land <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510844">bug 510844</a> on the Places branch to figure out what&#39;s going wrong on the tinderbox. It should increase throughput of JAR file reading, possibly affecting Ts and Tp.</li>
<li>Removing the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=512827">needless stats of already-fastloaded components</a> is being looked at more broadly in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=511761">bug 511761</a> by Ben Hsieh with help from Taras and others. There are a bunch of dirty ways to trigger component re-registration and fastload cache invalidation, so I filed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=517515">bug 517515</a> to consolidate these in an explicit manner.</li>
<li>Cold Startup Testing: Drew and Alice made a bunch of progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">bug 510587</a>,  to create a new Ts that measures cold startup. Alice is working on mobile Talos though, so this is sidelined for a bit. The only issue left is reliable Windows measurement, but we&#39;re not going to block on it, can live with Mac and Linux to start off.</li>
<li>Preference Files: Taras Glek has been working on combining the different preference files into a single one at build time, in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=507288">bug 507288</a>. The patch is there, and is just trying to find a way to land cleanly.</li>
<li><p>Service Caching: Vlad, Drew and Taras are working on caching some services globally for C++ code. For example, 50% of the GetService calls for the IO service originate from NS_NewURI usage. This work is in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=516085">bug 516085</a>.
Projects in a holding pattern:</p>
</li>
<li><p>Startup Timeline: No updates, still not landed. Add [ft] in the whiteboard of your bug w/ the function names you want timed and David will generate it and update the bug.</p>
</li>
<li>PGO for Places, mozStorage and SQLite: Still blocking on Rel-Eng fixing <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">bug 486783</a>, which now has patches!</li>
<li>Static Analysis: No progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">bug 506128</a>.  David needs to file a bug with the final log of named-yet-uncalled  functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file bugs  for each, generate Talos config patches and profile data, and then move  it into Rel-Eng territory. Also, need to get a separate Tinderbox tree,  since it&#39;s going to cause a bazillion new columns.</li>
<li><a href="http://wagerlabs.com/">Joel Reymont</a> noted in<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug 513076</a> that there are serious drawbacks to getting our libraries in the dyld  shared cache on Mac, so has deprioritized that work.</li>
<li><a href="http://screwedbydesign.com/blog/2009/09/this-week-in-perf-sep04.php">Ryan  Flint blogged about</a> various front-end improvements he&#39;s working on  that affect startup time.</li>
<li>CSS Parsing Time: Zack says his work in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">bug 513149</a> might improve CSS parsing time by 50%, and it&#39;s next on his list.</li>
</ul>
]]></description><link>/2009/09/firefox-startup-performance-weekly-summary-2/index.html</link><guid isPermaLink="true">/2009/09/firefox-startup-performance-weekly-summary-2/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 19 Sep 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Summary]]></title><description><![CDATA[<p>Apologies for not posting last week, but <a href="http://dietrich.tumblr.com/post/189638511/atp-was-so-much-damn-fun">I was on vacation</a>. Recent activity:</p>
<ul>
<li>I&#39;ve updated the project wiki page with <a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements#Overview">a table of summarized numbers</a> for at-a-glance tracking of progress. I need to disable superfetch and try again on Windows.</li>
<li>Our measurements of cold startup showed a huge regression on Windows from 3.5 to 3.6. Tracking this in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=517741">bug 517741</a>.</li>
<li>JARification: David abandoned <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">moving JS  modules into a JAR file</a>, since those files are fastloaded. However, since we want things like post-extension-install restarts to be fast, and those cause fastload cache invalidation, we might want to do things like this anyways. I filed a bug for the same treatment for components. These are lower priority, since they&#39;re not the normal startup case. Follow along with all JAR-ification via<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513027"> the tracker  bug</a>.</li>
<li>JAR Performance: I&#39;m going to test-land <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510844">bug 510844</a> on the Places branch to figure out what&#39;s going wrong on the tinderbox. It should increase throughput of JAR file reading, possibly affecting Ts and Tp.</li>
<li>Removing the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=512827">needless stats of already-fastloaded components</a> is being looked at more broadly in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=511761">bug 511761</a> by Ben Hsieh with help from Taras and others. There are a bunch of dirty ways to trigger component re-registration and fastload cache invalidation, so I filed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=517515">bug 517515</a> to consolidate these in an explicit manner.</li>
<li>Cold Startup Testing: Drew and Alice made a bunch of progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">bug 510587</a>,  to create a new Ts that measures cold startup. Alice is working on mobile Talos though, so this is sidelined for a bit. The only issue left is reliable Windows measurement, but we&#39;re not going to block on it, can live with Mac and Linux to start off.</li>
<li>Preference Files: Taras Glek has been working on combining the different preference files into a single one at build time, in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=507288">bug 507288</a>. The patch is there, and is just trying to find a way to land cleanly.</li>
<li><p>Service Caching: Vlad, Drew and Taras are working on caching some services globally for C++ code. For example, 50% of the GetService calls for the IO service originate from NS_NewURI usage. This work is in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=516085">bug 516085</a>.
Projects in a holding pattern:</p>
</li>
<li><p>Startup Timeline: No updates, still not landed. Add [ft] in the whiteboard of your bug w/ the function names you want timed and David will generate it and update the bug.</p>
</li>
<li>PGO for Places, mozStorage and SQLite: Still blocking on Rel-Eng fixing <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">bug 486783</a>, which now has patches!</li>
<li>Static Analysis: No progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">bug 506128</a>.  David needs to file a bug with the final log of named-yet-uncalled  functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file bugs  for each, generate Talos config patches and profile data, and then move  it into Rel-Eng territory. Also, need to get a separate Tinderbox tree,  since it&#39;s going to cause a bazillion new columns.</li>
<li><a href="http://wagerlabs.com/">Joel Reymont</a> noted in<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug 513076</a> that there are serious drawbacks to getting our libraries in the dyld  shared cache on Mac, so has deprioritized that work.</li>
<li><a href="http://screwedbydesign.com/blog/2009/09/this-week-in-perf-sep04.php">Ryan  Flint blogged about</a> various front-end improvements he&#39;s working on  that affect startup time.</li>
<li>CSS Parsing Time: Zack says his work in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">bug 513149</a> might improve CSS parsing time by 50%, and it&#39;s next on his list.</li>
</ul>
]]></description><link>/2009/09/firefox-startup-performance-weekly-summary-2/index.html</link><guid isPermaLink="true">/2009/09/firefox-startup-performance-weekly-summary-2/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 19 Sep 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Summary]]></title><description><![CDATA[<p>Let&#39;s start with the numbers. Vlad spent some time measuring warm startup on the Mac, and it looks very nice: Firefox 3.6 starts up about 10% faster than 3.5, and 3.7 starts up about 20% faster than 3.5. I measured both cold and warm startup on Windows 7, and the picture is not so rosy there. Warm startup is basically flat across 3.5, 3.6 and 3.7, in my tests. Cold startup is... well, weird. Allow me to explain...</p>
<p>My cold startup methodology is simple: On a basically clean install of Windows 7, I&#39;d create a new profile, start the browser up, close it and then reboot. Then I&#39;d measure Firefox startup time after the OS settled. Then I&#39;d do that reboot-and-measure step a bunch more times. Yes, so much fun. I measured Firefox startup time using the method Vlad posted to his blog. This doesn&#39;t do anything to avoid OS optimizations that might persist across reboots, which is a potential flaw, as you&#39;ll see below.</p>
<p>Firefox 3, 3.6 and 3.7 all had consistent numbers across their runs. However, Firefox 3.5 displayed a unique behavior: The first two cold starts were appropriately slow, similar to the cold startup times of the other versions. The subsequent runs were <em>very</em> fast for a cold start! I rebooted a few times, and started other versions a few times, then tried a series of 3.5 runs again... and saw the same thing: the first two runs were in the ballpark of other Firefox versions, but subsequent runs were crazy fast. Vlad was talking earlier in the week about a predictive optimization feature that Windows has, learning from an application&#39;s behavior to optimize it&#39;s performance. Possibly that feature works fantastically with Firefox 3.5, and for whatever reason does not work nearly as well with previous or subsequent versions of the app? I&#39;ve clearly crossed into the realm of fantasy here, so alternate theories are welcome. Perhaps I should round-robin through all versions instead of doing serial runs of the same version.</p>
<p>Firefox 3.5 aside, when measuring cold startup I also see the regression that <a href="http://blog.mozilla.com/adw/2009/09/04/cold-ts/">Drew blogged about</a>. We&#39;ll get a bug filed and help from QA to get a regression range for this.</p>
<p>Status updates:</p>
<ul>
<li>Startup Timeline: Still not landed, and David found that the timeline instrumentation if put in certain places causes major stability issues. As before, he can provide timeline info for you, just point him at the code by putting [ft] in the whiteboard of your bug.</li>
<li>PGO for Places, mozStorage and SQLite: Still blocking on Rel-Eng fixing <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">bug 486783</a>. I still need to connect with John O&#39;Duinn and see if we can move this up in the schedule.</li>
<li>JARification: David started working on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">moving JS modules into a JAR file</a>. Follow along with all JAR-ification via<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513027"> the tracker bug</a>. Alfred Kayser is working on getting <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510844">bug 510844</a> landed, which should increase throughput of JAR file reading.</li>
<li>JS Component Combining: Further effort is probably not worth it, since these components are fastloaded. Removing the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=512827">needless file stats when these are first instantiated</a> is what we need to do. I need to talk to Damon and find a XPConnect/Component-loader person for this.</li>
<li>Static Analysis: No progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">Bug 506128</a>. David needs to file a bug with the final log of named-yet-uncalled functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file bugs for each, generate Talos config patches and profile data, and then move it into Rel-Eng territory. Also, need to get a separate Tinderbox tree, since it&#39;s going to cause a bazillion new columns.</li>
<li>Cold Startup Testing: Drew and Alice made a bunch of progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">bug 510587</a>, to create a new Ts that measures cold startup. They&#39;re starting with Mac and Linux, and will tackle Windows later. Drew <a href="http://blog.mozilla.com/adw/2009/09/04/cold-ts/">blogged about their work</a> on this.</li>
<li><a href="http://wagerlabs.com/">Joel Reymont</a> noted in<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug 513076</a> that there are serious drawbacks to getting our libraries in the dyld shared cache on Mac, so is deprioritizing that work for now.</li>
<li><a href="http://screwedbydesign.com/blog/2009/09/this-week-in-perf-sep04.php">Ryan Flint blogged about</a> various front-end improvements he&#39;s working on that affect startup time.</li>
<li>CSS Parsing Time: Zack says his work in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">bug 513149</a> might improve CSS parsing time by 50%, and it&#39;s next on his list.</li>
</ul>
]]></description><link>/2009/09/firefox-startup-performance-weekly-summary/index.html</link><guid isPermaLink="true">/2009/09/firefox-startup-performance-weekly-summary/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sun, 06 Sep 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Summary]]></title><description><![CDATA[<p>Let&#39;s start with the numbers. Vlad spent some time measuring warm startup on the Mac, and it looks very nice: Firefox 3.6 starts up about 10% faster than 3.5, and 3.7 starts up about 20% faster than 3.5. I measured both cold and warm startup on Windows 7, and the picture is not so rosy there. Warm startup is basically flat across 3.5, 3.6 and 3.7, in my tests. Cold startup is... well, weird. Allow me to explain...</p>
<p>My cold startup methodology is simple: On a basically clean install of Windows 7, I&#39;d create a new profile, start the browser up, close it and then reboot. Then I&#39;d measure Firefox startup time after the OS settled. Then I&#39;d do that reboot-and-measure step a bunch more times. Yes, so much fun. I measured Firefox startup time using the method Vlad posted to his blog. This doesn&#39;t do anything to avoid OS optimizations that might persist across reboots, which is a potential flaw, as you&#39;ll see below.</p>
<p>Firefox 3, 3.6 and 3.7 all had consistent numbers across their runs. However, Firefox 3.5 displayed a unique behavior: The first two cold starts were appropriately slow, similar to the cold startup times of the other versions. The subsequent runs were <em>very</em> fast for a cold start! I rebooted a few times, and started other versions a few times, then tried a series of 3.5 runs again... and saw the same thing: the first two runs were in the ballpark of other Firefox versions, but subsequent runs were crazy fast. Vlad was talking earlier in the week about a predictive optimization feature that Windows has, learning from an application&#39;s behavior to optimize it&#39;s performance. Possibly that feature works fantastically with Firefox 3.5, and for whatever reason does not work nearly as well with previous or subsequent versions of the app? I&#39;ve clearly crossed into the realm of fantasy here, so alternate theories are welcome. Perhaps I should round-robin through all versions instead of doing serial runs of the same version.</p>
<p>Firefox 3.5 aside, when measuring cold startup I also see the regression that <a href="http://blog.mozilla.com/adw/2009/09/04/cold-ts/">Drew blogged about</a>. We&#39;ll get a bug filed and help from QA to get a regression range for this.</p>
<p>Status updates:</p>
<ul>
<li>Startup Timeline: Still not landed, and David found that the timeline instrumentation if put in certain places causes major stability issues. As before, he can provide timeline info for you, just point him at the code by putting [ft] in the whiteboard of your bug.</li>
<li>PGO for Places, mozStorage and SQLite: Still blocking on Rel-Eng fixing <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">bug 486783</a>. I still need to connect with John O&#39;Duinn and see if we can move this up in the schedule.</li>
<li>JARification: David started working on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">moving JS modules into a JAR file</a>. Follow along with all JAR-ification via<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513027"> the tracker bug</a>. Alfred Kayser is working on getting <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510844">bug 510844</a> landed, which should increase throughput of JAR file reading.</li>
<li>JS Component Combining: Further effort is probably not worth it, since these components are fastloaded. Removing the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=512827">needless file stats when these are first instantiated</a> is what we need to do. I need to talk to Damon and find a XPConnect/Component-loader person for this.</li>
<li>Static Analysis: No progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">Bug 506128</a>. David needs to file a bug with the final log of named-yet-uncalled functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file bugs for each, generate Talos config patches and profile data, and then move it into Rel-Eng territory. Also, need to get a separate Tinderbox tree, since it&#39;s going to cause a bazillion new columns.</li>
<li>Cold Startup Testing: Drew and Alice made a bunch of progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">bug 510587</a>, to create a new Ts that measures cold startup. They&#39;re starting with Mac and Linux, and will tackle Windows later. Drew <a href="http://blog.mozilla.com/adw/2009/09/04/cold-ts/">blogged about their work</a> on this.</li>
<li><a href="http://wagerlabs.com/">Joel Reymont</a> noted in<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug 513076</a> that there are serious drawbacks to getting our libraries in the dyld shared cache on Mac, so is deprioritizing that work for now.</li>
<li><a href="http://screwedbydesign.com/blog/2009/09/this-week-in-perf-sep04.php">Ryan Flint blogged about</a> various front-end improvements he&#39;s working on that affect startup time.</li>
<li>CSS Parsing Time: Zack says his work in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">bug 513149</a> might improve CSS parsing time by 50%, and it&#39;s next on his list.</li>
</ul>
]]></description><link>/2009/09/firefox-startup-performance-weekly-summary/index.html</link><guid isPermaLink="true">/2009/09/firefox-startup-performance-weekly-summary/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sun, 06 Sep 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Roundup]]></title><description><![CDATA[<p>The Firefox and Platform teams were both onsite at the Mountain View office this week, getting some face-to-face time. There was a lot of great conversation and productive interaction between groups. The team of people focusing on application startup time went over all <a href="https://bugzilla.mozilla.org/buglist.cgi?quicksearch=sw:[ts]">the bugs marked [ts]</a>, discussing and prioritizing.</p>
<ul>
<li>Startup Timeline: While the timeline hasn&#39;t landed yet, you can still take advantage of it: David Dahl has an instrumented build, and will provide timeline info for you if you have an area you want to know about. More details on <a href="http://daviddahl.blogspot.com/2009/08/functiontimertimeline-update.html">his post</a>.</li>
<li>PGO for Places, mozStorage and SQLite: Still blocking on Rel-Eng fixing <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">bug 486783</a>. I need to connect with John O&#39;Duinn and see if we can move this up in the schedule.</li>
<li>JAR Transition: Taras landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=508421">bug 508421</a> which allows anything in jar:toolkit.jar!/res/* to be loaded via resource://gre-resources/. This makes it very easy to move individual files into a jar, and access them in a fairly transparent way from code. This helps cold startup, as well as page-load time. He <a href="http://blog.mozilla.com/tglek/2009/08/27/moving-files-into-jars/">posted a HOWTO</a> for taking advantage of this.</li>
<li>JS Component Combining: No progress this week.</li>
<li>Static Analysis: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">Bug 506128</a> is wrapping up. David need to file a bug with the final log of named-yet-uncalled functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file bugs for each, generate Talos config patches and profile data, and then move it into Rel-Eng territory. Also, need to get a separate Tinderbox tree, since it&#39;s going to cause a bazillion new columns.</li>
<li>Cold Startup Testing: Drew Willcoxon is working on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">bug 510587</a>, to create a new Ts that measures cold startup. He&#39;s got patches up for adding head/tail file support to Talos. A new issue that cropped up this week is that the simulated cold-startup methods on Windows don&#39;t appear to work very well, so he&#39;s looking for advice there, as well as looking into reboot support in Talos.</li>
<li><a href="http://wagerlabs.com/">Joel Reymont</a> noticed that Safari&#39;s libs are loaded from the OS&#39;s warm cache, and ours are not! In<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug 513076</a> he&#39;s investigating whether or not we can get our dynamic libraries in there as well.</li>
<li>Ryan Flint started looking into taking NSS and spellcheck initialization out of the startup path, and found that Shark says they&#39;re not in it on a regular startup! However, I found a <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=511515">recent bug from Vlad</a> talking about crazy stuff NSS does at startup (aside from the temp file dir skullduggery), so need to figure out how he&#39;s seeing that, and why Shark isn&#39;t.</li>
<li>CSS Parsing Time: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=91242">Bug 91242</a> says CSS parsing is 5.5% of startup time... in 2001. Taras has mentioned several times that it&#39;s still significant, so asked him for numbers for contemporary builds. <a href="http://zwol.livejournal.com/">Zack Weinberg</a> is working on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">speeding up parsing using a machine generated lexer</a>, need to get numbers from him on what kind of a difference it makes in parse time.
And if you haven&#39;t yet, read through<a href="http://blog.mozilla.com/tglek/2009/08/20/cleaning-up-startup-disk-io/"> Taras&#39; annotated log of files opened at startup</a>. If you see anything that can be delayed, or want to dig into why a certain file is loaded, let me know! Or just file a bug and put &quot;[ts]&quot; in the bug&#39;s status whiteboard.</li>
</ul>
]]></description><link>/2009/08/firefox-startup-performance-weekly-roundup/index.html</link><guid isPermaLink="true">/2009/08/firefox-startup-performance-weekly-roundup/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[fx-team]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sun, 30 Aug 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Roundup]]></title><description><![CDATA[<p>The Firefox and Platform teams were both onsite at the Mountain View office this week, getting some face-to-face time. There was a lot of great conversation and productive interaction between groups. The team of people focusing on application startup time went over all <a href="https://bugzilla.mozilla.org/buglist.cgi?quicksearch=sw:[ts]">the bugs marked [ts]</a>, discussing and prioritizing.</p>
<ul>
<li>Startup Timeline: While the timeline hasn&#39;t landed yet, you can still take advantage of it: David Dahl has an instrumented build, and will provide timeline info for you if you have an area you want to know about. More details on <a href="http://daviddahl.blogspot.com/2009/08/functiontimertimeline-update.html">his post</a>.</li>
<li>PGO for Places, mozStorage and SQLite: Still blocking on Rel-Eng fixing <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">bug 486783</a>. I need to connect with John O&#39;Duinn and see if we can move this up in the schedule.</li>
<li>JAR Transition: Taras landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=508421">bug 508421</a> which allows anything in jar:toolkit.jar!/res/* to be loaded via resource://gre-resources/. This makes it very easy to move individual files into a jar, and access them in a fairly transparent way from code. This helps cold startup, as well as page-load time. He <a href="http://blog.mozilla.com/tglek/2009/08/27/moving-files-into-jars/">posted a HOWTO</a> for taking advantage of this.</li>
<li>JS Component Combining: No progress this week.</li>
<li>Static Analysis: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">Bug 506128</a> is wrapping up. David need to file a bug with the final log of named-yet-uncalled functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file bugs for each, generate Talos config patches and profile data, and then move it into Rel-Eng territory. Also, need to get a separate Tinderbox tree, since it&#39;s going to cause a bazillion new columns.</li>
<li>Cold Startup Testing: Drew Willcoxon is working on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">bug 510587</a>, to create a new Ts that measures cold startup. He&#39;s got patches up for adding head/tail file support to Talos. A new issue that cropped up this week is that the simulated cold-startup methods on Windows don&#39;t appear to work very well, so he&#39;s looking for advice there, as well as looking into reboot support in Talos.</li>
<li><a href="http://wagerlabs.com/">Joel Reymont</a> noticed that Safari&#39;s libs are loaded from the OS&#39;s warm cache, and ours are not! In<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug 513076</a> he&#39;s investigating whether or not we can get our dynamic libraries in there as well.</li>
<li>Ryan Flint started looking into taking NSS and spellcheck initialization out of the startup path, and found that Shark says they&#39;re not in it on a regular startup! However, I found a <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=511515">recent bug from Vlad</a> talking about crazy stuff NSS does at startup (aside from the temp file dir skullduggery), so need to figure out how he&#39;s seeing that, and why Shark isn&#39;t.</li>
<li>CSS Parsing Time: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=91242">Bug 91242</a> says CSS parsing is 5.5% of startup time... in 2001. Taras has mentioned several times that it&#39;s still significant, so asked him for numbers for contemporary builds. <a href="http://zwol.livejournal.com/">Zack Weinberg</a> is working on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">speeding up parsing using a machine generated lexer</a>, need to get numbers from him on what kind of a difference it makes in parse time.
And if you haven&#39;t yet, read through<a href="http://blog.mozilla.com/tglek/2009/08/20/cleaning-up-startup-disk-io/"> Taras&#39; annotated log of files opened at startup</a>. If you see anything that can be delayed, or want to dig into why a certain file is loaded, let me know! Or just file a bug and put &quot;[ts]&quot; in the bug&#39;s status whiteboard.</li>
</ul>
]]></description><link>/2009/08/firefox-startup-performance-weekly-roundup/index.html</link><guid isPermaLink="true">/2009/08/firefox-startup-performance-weekly-roundup/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[fx-team]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sun, 30 Aug 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Weekly Firefox Startup Performance Roundup]]></title><description><![CDATA[<h2 id="progress">Progress</h2>
<ul>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=419893">Enabling PGO for SQLite, mozStorage and Places</a>: Found that the trunk unit test boxes have PGO disabled. I&#39;m leery of checking this in without it being properly tested because these components handle so much user data. Next steps: <a href="http://backinblakk.blogspot.com/">Lukas Blakk</a> is working on the infrastructure <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">to enable unit-testing of PGO builds</a>.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=507038">JS Component  Combining</a>: The combined 60,000 line JS file (!!!) has a problem somewhere  in there, causing component registration to fail about 2/3 of the way through. Next steps: Get all the components registering, get numbers on  a few platforms to gauge the effect.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=480735">Startup Timeline</a>: No progress. Vlad said it was land-able, earlier in the week. Next steps: Figure out what needs to happen here to finalize and land. David needs to un-rot the instrumentation patch once the timeline lands (rots quickly).</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510309">XPT Linking</a>: Landed! However, really only helps cold startup, which we don&#39;t currently measure. Next steps: Once cold startup testing is available, disable and re-enable to get actual numbers on the effect.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">Static  Analysis</a>: No progress, David was out part of the week, and was  working on unblocking the dirty profile tests (details below). Next  steps: Reduce false positives in the dead-code finder, and run against  the full browser context.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=414660">Dirty Profile Testing</a>: Due to a ton of hard work from Alice, dirty profiling of Ts was enabled on mozilla-central! They are the boxes suffixed &quot;dirty&quot; on the tree, currently testing Ts and Ts-shutdown for profiles with small and medium places.sqlite files on all platforms. Data is available for these tests on the graph server - you can see the effect of Vlad&#39;s landing of <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506470">bug 506470</a> on startup for a profile with a medium-sized places.sqlite file on <a href="http://graphs.mozilla.org/#tests=[{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22170%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22171%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22172%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22173%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22174%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22175%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22176%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22177%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22178%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22179%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22181%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22182%22}]">this graph</a>. Next steps: get various other dirty profile scenarios detailed, file bugs and get in the pipe. Figure out tree pollution issues.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">Cold-startup Testing</a>: Ts throws out the max value of it&#39;s ten runs, so we don&#39;t have a measurement of how long browser takes to initially startup. Drew, with help from Alice, has started working on the Talos changes necessary to get this measurement up and running. We&#39;ve got <a href="https://wiki.mozilla.org/Firefox/Sprints/Startup_Time_Improvements#Tips.2C_Tools">methods for simulated cold startup</a> from Vlad, Rob Arnold and others<a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements_Notes#Rob_Arnold_notes_on_simulated_cold_startup_on_Windows"></a>. Next steps: Implement support for head/tail scripts for Talos tests, write those scripts for cold startup for all platforms, hand off to rel-eng for deployment.</li>
<li><a href="http://wagerlabs.com/">Joel  Reymont</a> started working on Firefox performance on Mac, and posted <a href="http://wagerlabs.com/post/168237170/faster-mac-firefox">a  comparison of dynamic linking time for Firefox and Safari</a>, and started <a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements/joelr_notes">posting notes on his methodology on the wiki</a>.</li>
<li><a href="http://blog.vlad1.com/">Vlad</a> landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506470">bug 506470</a>, which delays the initialization of Growl on Mac, winning 7.5% on Ts. As seen above, it&#39;s a win on dirty profiles without Growl as well as regular Ts (empty profile).</li>
<li><a href="http://blog.mozilla.com/tglek/2009/08/20/cleaning-up-startup-disk-io/#more-173">Taras Glek posted</a> a summary of ways to spend less time in disk IO at startup, the performance characteristics of IO on restricted devices, and a log of files opened at startup.</li>
</ul>
<h2 id="further-reading">Further Reading</h2>
<ul>
<li><a href="https://wiki.mozilla.org/Firefox/Sprints/Startup_Time_Improvements">Startup Project wiki</a></li>
<li><a href="http://blog.mozilla.com/adw/2009/08/21/firefox-startup-2/">Drew&#39;s post for this week</a></li>
<li>Taras&#39; post <a href="http://blog.mozilla.com/tglek/2009/08/20/cleaning-up-startup-disk-io/#more-173">listing files opened on startup</a>
[UPDATE: Added Taras&#39; post, and a link to Joel&#39;s notes.]</li>
</ul>
]]></description><link>/2009/08/weekly-firefox-startup-performance-roundup-2/index.html</link><guid isPermaLink="true">/2009/08/weekly-firefox-startup-performance-roundup-2/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 22 Aug 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Weekly Firefox Startup Performance Roundup]]></title><description><![CDATA[<h2 id="progress">Progress</h2>
<ul>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=419893">Enabling PGO for SQLite, mozStorage and Places</a>: Found that the trunk unit test boxes have PGO disabled. I&#39;m leery of checking this in without it being properly tested because these components handle so much user data. Next steps: <a href="http://backinblakk.blogspot.com/">Lukas Blakk</a> is working on the infrastructure <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">to enable unit-testing of PGO builds</a>.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=507038">JS Component  Combining</a>: The combined 60,000 line JS file (!!!) has a problem somewhere  in there, causing component registration to fail about 2/3 of the way through. Next steps: Get all the components registering, get numbers on  a few platforms to gauge the effect.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=480735">Startup Timeline</a>: No progress. Vlad said it was land-able, earlier in the week. Next steps: Figure out what needs to happen here to finalize and land. David needs to un-rot the instrumentation patch once the timeline lands (rots quickly).</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510309">XPT Linking</a>: Landed! However, really only helps cold startup, which we don&#39;t currently measure. Next steps: Once cold startup testing is available, disable and re-enable to get actual numbers on the effect.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">Static  Analysis</a>: No progress, David was out part of the week, and was  working on unblocking the dirty profile tests (details below). Next  steps: Reduce false positives in the dead-code finder, and run against  the full browser context.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=414660">Dirty Profile Testing</a>: Due to a ton of hard work from Alice, dirty profiling of Ts was enabled on mozilla-central! They are the boxes suffixed &quot;dirty&quot; on the tree, currently testing Ts and Ts-shutdown for profiles with small and medium places.sqlite files on all platforms. Data is available for these tests on the graph server - you can see the effect of Vlad&#39;s landing of <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506470">bug 506470</a> on startup for a profile with a medium-sized places.sqlite file on <a href="http://graphs.mozilla.org/#tests=[{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22170%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22171%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22172%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22173%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22174%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22175%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22176%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22177%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22178%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22179%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22181%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22182%22}]">this graph</a>. Next steps: get various other dirty profile scenarios detailed, file bugs and get in the pipe. Figure out tree pollution issues.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">Cold-startup Testing</a>: Ts throws out the max value of it&#39;s ten runs, so we don&#39;t have a measurement of how long browser takes to initially startup. Drew, with help from Alice, has started working on the Talos changes necessary to get this measurement up and running. We&#39;ve got <a href="https://wiki.mozilla.org/Firefox/Sprints/Startup_Time_Improvements#Tips.2C_Tools">methods for simulated cold startup</a> from Vlad, Rob Arnold and others<a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements_Notes#Rob_Arnold_notes_on_simulated_cold_startup_on_Windows"></a>. Next steps: Implement support for head/tail scripts for Talos tests, write those scripts for cold startup for all platforms, hand off to rel-eng for deployment.</li>
<li><a href="http://wagerlabs.com/">Joel  Reymont</a> started working on Firefox performance on Mac, and posted <a href="http://wagerlabs.com/post/168237170/faster-mac-firefox">a  comparison of dynamic linking time for Firefox and Safari</a>, and started <a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements/joelr_notes">posting notes on his methodology on the wiki</a>.</li>
<li><a href="http://blog.vlad1.com/">Vlad</a> landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506470">bug 506470</a>, which delays the initialization of Growl on Mac, winning 7.5% on Ts. As seen above, it&#39;s a win on dirty profiles without Growl as well as regular Ts (empty profile).</li>
<li><a href="http://blog.mozilla.com/tglek/2009/08/20/cleaning-up-startup-disk-io/#more-173">Taras Glek posted</a> a summary of ways to spend less time in disk IO at startup, the performance characteristics of IO on restricted devices, and a log of files opened at startup.</li>
</ul>
<h2 id="further-reading">Further Reading</h2>
<ul>
<li><a href="https://wiki.mozilla.org/Firefox/Sprints/Startup_Time_Improvements">Startup Project wiki</a></li>
<li><a href="http://blog.mozilla.com/adw/2009/08/21/firefox-startup-2/">Drew&#39;s post for this week</a></li>
<li>Taras&#39; post <a href="http://blog.mozilla.com/tglek/2009/08/20/cleaning-up-startup-disk-io/#more-173">listing files opened on startup</a>
[UPDATE: Added Taras&#39; post, and a link to Joel&#39;s notes.]</li>
</ul>
]]></description><link>/2009/08/weekly-firefox-startup-performance-roundup-2/index.html</link><guid isPermaLink="true">/2009/08/weekly-firefox-startup-performance-roundup-2/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 22 Aug 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Performance: The "don't touch the damn disk" edition.]]></title><description><![CDATA[<p>I mentioned in previous blog posts that the clearest message that has come out of the Firefox startup performance research is that most of the time starting the application is spent loading and reading files from disk. On some platforms, file IO is far more expensive than others - this hurts startup time especially bad on Mac, and on mobile devices. This post highlights some work that <a href="http://blog.mozilla.com/tglek/" title="Blog">Taras Glek</a> has done to reduce file IO in Firefox (and other Mozilla applications) by improving the way we package collections of files and directories into JAR files.</p>
<p>First, he resurrected an <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=201224">older idea</a>, modifying our JAR file reader to <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=504864">map the contents of JAR files into memory</a> using <a href="http://en.wikipedia.org/wiki/Mmap">mmap</a>. He then <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=468011">combined a bunch of smaller JAR files</a> into two bigger files: browser.jar and toolkit.jar. These changes provide a few benefits:</p>
<ul>
<li>Our reader was stat&#39;ing the JAR file each time that it read something from inside. The mmap change reduces the system calls necessary to read all the smaller files from inside our JAR files.</li>
<li>Fewer JAR files means files are fewer places on disk, and the initial JAR finding, opening and reading system calls happen fewer times.</li>
<li>By combining files inside a large JAR, they&#39;re placed contiguously on disk, allowing the smaller files inside of the JARs to be found and read much quicker.
The effects of these changes were significant. The landing of the JAR-combining change resulted in some fabulous graphs, shown below, along with comments to highlight the good bits.</li>
</ul>
<p>[caption id=&quot;attachment_387&quot; align=&quot;aligncenter&quot; width=&quot;540&quot; caption=&quot;Tp3 Graphs&quot;]<a href="taras_tp3.png"><img src="http://autonome.files.wordpress.com/2009/08/taras_tp3.png" alt="Tp3 Graphs" title="Tp3 Graphs"></a>[/caption]</p>
<p>Tp3 is a page loading test - it cycles through 400 pages from the Alexa Top 500 list from 2006, measuring how long it takes to open each page. As you can see on the graph, the time it took to complete the test went down by about 6.5% on Leopard, 9% on Linux, 2.5% on Tiger, 11% on Windows XP, and a clear downward trend on Vista, where the noise level is a bit too high to get a number.</p>
<p>[caption id=&quot;attachment_388&quot; align=&quot;aligncenter&quot; width=&quot;540&quot; caption=&quot;Tp4 Graphs&quot;]<a href="taras_tp4.png"><img src="http://autonome.files.wordpress.com/2009/08/taras_tp4.png" alt="Tp4 Graphs" title="Tp4 Graphs"></a>[/caption]</p>
<p>Tp4 is the successor to Tp3, and cycles through 100 of the Alexa Top 500, from 2009. The time to run the test improved by 3.5% on Leopard, 7.8% on Linux, 2.5% on Tiger, 6% on Windows XP, and again Vista clearly improved, but the noise level is too high to easily figure out by how much.</p>
<p>[caption id=&quot;attachment_389&quot; align=&quot;aligncenter&quot; width=&quot;540&quot; caption=&quot;Ts Graphs&quot;]<a href="taras_ts.png"><img src="http://autonome.files.wordpress.com/2009/08/taras_ts.png" alt="Ts Graphs" title="Ts Graphs"></a>[/caption]</p>
<p>Ts is a basic browser startup test - it measures the average time to start the browser up. There&#39;s no clear startup win visible here, except perhaps on Vista. There&#39;s maybe even a slight loss on Mac. However, if you look closer, you&#39;ll notice that the graphs for Linux and Vista and Windows XP are all much less <em>noisy</em>! The absolute wall clock time did not decrease, but the variation in startup time decreased significantly on those platforms. An upside to this is that true performance improvements and regressions on those platforms will be easier to spot.</p>
<p>[caption id=&quot;attachment_390&quot; align=&quot;aligncenter&quot; width=&quot;540&quot; caption=&quot;Txul Graphs&quot;]<a href="taras_txul.png"><img src="http://autonome.files.wordpress.com/2009/08/taras_txul.png" alt="Txul Graphs" title="Txul Graphs"></a>[/caption]</p>
<p>The same effect is seen in the tests measuring how long it takes to open a new XUL window. There&#39;s maybe a slight improvement on Windows, and a regression on Tiger, but the level of noise on every platform has decreased, some down near zero variation between runs.</p>
<p>The improvement in page-load time from Taras&#39; changes is quite clear. There&#39;s work in progress to <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510611">make the JAR IO even more efficient</a>, as well as putting <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">additional</a> <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=508421">directories</a> of small files into the JAR files. You can follow progress and get even more details on <a href="http://blog.mozilla.com/tglek/">Taras&#39; blog</a>.</p>
]]></description><link>/2009/08/firefox-performance-the-dont-touch-the-damn-disk-edition/index.html</link><guid isPermaLink="true">/2009/08/firefox-performance-the-dont-touch-the-damn-disk-edition/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Tue, 18 Aug 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Performance: The "don't touch the damn disk" edition.]]></title><description><![CDATA[<p>I mentioned in previous blog posts that the clearest message that has come out of the Firefox startup performance research is that most of the time starting the application is spent loading and reading files from disk. On some platforms, file IO is far more expensive than others - this hurts startup time especially bad on Mac, and on mobile devices. This post highlights some work that <a href="http://blog.mozilla.com/tglek/" title="Blog">Taras Glek</a> has done to reduce file IO in Firefox (and other Mozilla applications) by improving the way we package collections of files and directories into JAR files.</p>
<p>First, he resurrected an <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=201224">older idea</a>, modifying our JAR file reader to <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=504864">map the contents of JAR files into memory</a> using <a href="http://en.wikipedia.org/wiki/Mmap">mmap</a>. He then <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=468011">combined a bunch of smaller JAR files</a> into two bigger files: browser.jar and toolkit.jar. These changes provide a few benefits:</p>
<ul>
<li>Our reader was stat&#39;ing the JAR file each time that it read something from inside. The mmap change reduces the system calls necessary to read all the smaller files from inside our JAR files.</li>
<li>Fewer JAR files means files are fewer places on disk, and the initial JAR finding, opening and reading system calls happen fewer times.</li>
<li>By combining files inside a large JAR, they&#39;re placed contiguously on disk, allowing the smaller files inside of the JARs to be found and read much quicker.
The effects of these changes were significant. The landing of the JAR-combining change resulted in some fabulous graphs, shown below, along with comments to highlight the good bits.</li>
</ul>
<p>[caption id=&quot;attachment_387&quot; align=&quot;aligncenter&quot; width=&quot;540&quot; caption=&quot;Tp3 Graphs&quot;]<a href="taras_tp3.png"><img src="http://autonome.files.wordpress.com/2009/08/taras_tp3.png" alt="Tp3 Graphs" title="Tp3 Graphs"></a>[/caption]</p>
<p>Tp3 is a page loading test - it cycles through 400 pages from the Alexa Top 500 list from 2006, measuring how long it takes to open each page. As you can see on the graph, the time it took to complete the test went down by about 6.5% on Leopard, 9% on Linux, 2.5% on Tiger, 11% on Windows XP, and a clear downward trend on Vista, where the noise level is a bit too high to get a number.</p>
<p>[caption id=&quot;attachment_388&quot; align=&quot;aligncenter&quot; width=&quot;540&quot; caption=&quot;Tp4 Graphs&quot;]<a href="taras_tp4.png"><img src="http://autonome.files.wordpress.com/2009/08/taras_tp4.png" alt="Tp4 Graphs" title="Tp4 Graphs"></a>[/caption]</p>
<p>Tp4 is the successor to Tp3, and cycles through 100 of the Alexa Top 500, from 2009. The time to run the test improved by 3.5% on Leopard, 7.8% on Linux, 2.5% on Tiger, 6% on Windows XP, and again Vista clearly improved, but the noise level is too high to easily figure out by how much.</p>
<p>[caption id=&quot;attachment_389&quot; align=&quot;aligncenter&quot; width=&quot;540&quot; caption=&quot;Ts Graphs&quot;]<a href="taras_ts.png"><img src="http://autonome.files.wordpress.com/2009/08/taras_ts.png" alt="Ts Graphs" title="Ts Graphs"></a>[/caption]</p>
<p>Ts is a basic browser startup test - it measures the average time to start the browser up. There&#39;s no clear startup win visible here, except perhaps on Vista. There&#39;s maybe even a slight loss on Mac. However, if you look closer, you&#39;ll notice that the graphs for Linux and Vista and Windows XP are all much less <em>noisy</em>! The absolute wall clock time did not decrease, but the variation in startup time decreased significantly on those platforms. An upside to this is that true performance improvements and regressions on those platforms will be easier to spot.</p>
<p>[caption id=&quot;attachment_390&quot; align=&quot;aligncenter&quot; width=&quot;540&quot; caption=&quot;Txul Graphs&quot;]<a href="taras_txul.png"><img src="http://autonome.files.wordpress.com/2009/08/taras_txul.png" alt="Txul Graphs" title="Txul Graphs"></a>[/caption]</p>
<p>The same effect is seen in the tests measuring how long it takes to open a new XUL window. There&#39;s maybe a slight improvement on Windows, and a regression on Tiger, but the level of noise on every platform has decreased, some down near zero variation between runs.</p>
<p>The improvement in page-load time from Taras&#39; changes is quite clear. There&#39;s work in progress to <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510611">make the JAR IO even more efficient</a>, as well as putting <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">additional</a> <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=508421">directories</a> of small files into the JAR files. You can follow progress and get even more details on <a href="http://blog.mozilla.com/tglek/">Taras&#39; blog</a>.</p>
]]></description><link>/2009/08/firefox-performance-the-dont-touch-the-damn-disk-edition/index.html</link><guid isPermaLink="true">/2009/08/firefox-performance-the-dont-touch-the-damn-disk-edition/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Tue, 18 Aug 2009 00:00:00 GMT</pubDate></item></channel></rss>