<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[undefined - Dietrich Ayala]]></title><description><![CDATA[Internet freedom, the web and Mozilla.]]></description><link>/</link><generator>Ghost</generator><lastBuildDate>Thu, 20 Jul 2017 12:11:33 GMT</lastBuildDate><atom:link href="/tag/undefined/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[The New Firefox and Really Large Numbers of Tabs]]></title><description><![CDATA[<p>I&#39;ve got a Firefox profile with 1691 tabs.</p>
<p>I started trying to write down why, but quit. It&#39;s not very useful. I&#39;m an outlier, and that&#39;s fine.</p>
<p>If you are thinking to yourself &quot;that&#39;s stupid, why would anyone do that!&quot;, you should probably stop reading. Find something nice to read that validates your assumptions about how all people should be, and enjoy your morning coffee.</p>
<p>All users are different, and each &quot;misuse&quot; of a software program is the reverberating echo of people trying to get things done. This is a story about using software how <em>I</em> think it <em>should</em> work.</p>
<p>In this case the software is Firefox, and it handled my behavio(u)r quite poorly for a long time. I got used to multi-minute startup time, waiting 15-30 seconds for tabs from external apps to show up, and all kinds of non-responsive behavio(u)r.</p>
<p>And then everything changed.</p>
<h2 id="quantum-flow">Quantum Flow</h2>
<p>Right now, more effort is being put into making Firefox fast than I&#39;ve seen since... well, since I&#39;ve been working on Firefox. And I&#39;ve been at Mozilla for more than a decade.</p>
<p>Part of this effort is a project called Quantum Flow - a bunch of engineers making changes that directly impact Firefox responsiveness.
To learn more and follow along, check out the <a href="">collection of bugs</a>, and also read <a href="https://ehsanakhgari.org/tag/quantumflow">Ehsan Akhgari&#39;s weekly newsletter posts</a>.</p>
<p>A lot of the improvement in this particular scenario is from Kevin Jones&#39; work on bringing the overall cost of unloaded tabs as close to zero as possible.
While the major work has landed, the work continues in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=906076">Bug 906076</a>.
Huge amounts of thanks for the recent wins for us pathological tab hoarders go to Kevin, DÃ£o Gottwald, Mike de Boer, Tim Taubert, David Teller, Mike Conley, and Gijs Kruitbosch.</p>
<h2 id="test-scenario">Test Scenario</h2>
<p>I took my 1691 tab browser profile, and did a wall-clock measurement of start-up time and memory use for Firefox versions 20, 30, 40, and 50 through 56.</p>
<p>These are my personal results. You might not get the same results. If you test 1691 (or even 1692) tabs and find something totally different, I&#39;d love to hear about it.</p>
<p>Notes:</p>
<ul>
<li><p>I shut down most things on my Macbook (yeah the little one that&#39;s more like a glorified iPad).</p>
</li>
<li><p>I turned off wifi. This is a measurement of <em>Firefox</em>, not the network.</p>
</li>
<li><p>I measured by eyeball, using &quot;time cat&quot; on the command line. I&#39;m totally ok with how coarse the numbers are. I&#39;m measuring <em>minutes</em>, so microsecond precision is not required.</p>
</li>
<li><p>I measured startup time five times, dropping highs and lows. Even that wasn&#39;t really necessary - the times were <em>startingly consistent</em>. With almost 1700 tabs and &gt;5 minute startup, the standard deviation was negligible.</p>
</li>
<li><p>For startup, I measured up until the &quot;server not found&quot; page showed up in the active tab. After lots of testing, I found this to be the point at which the application became responsive and usable.</p>
</li>
<li><p>For memory, I waited until one minute after the startup measurement point and then grabbed the total value from the bottom of about:memory. I waited one minute, because I observed a consistent spike in memory after startup which went away within the first minute and then stabilized for a long period after. It&#39;s all kinds of initialization that doesn&#39;t need to block the app from starting, but needs to happen once you get to browsing.</p>
</li>
<li><p>I tested Firefox versions 20, 30, 40, and 50 through 56. I tried testing Firefox 10 but it permahung while loading the profile.</p>
</li>
</ul>
<h2 id="start-up-time">Start-up Time</h2>
<p>Here&#39;s a graph of startup time across Firefox versions:</p>
<p><img src="startup.png" style="height: 15rem;"></p>
<p>Interesting to note:</p>
<ul>
<li>We consistently got <em>worse</em> over time until Firefox 51. It&#39;d be interesting to do this test with varying numbers of tabs and find out at what point the regressions become noticeable.</li>
</ul>
<h2 id="memory-usage">Memory Usage</h2>
<p><img src="memory.png" style="height: 15rem;"></p>
<h2 id="why-this-is-important">Why This is Important</h2>
<p>Browser vendors use telemetry, user research and a number of other ways of determining &quot;acceptable use&quot; of their products. Anything outside of that idea of acceptable use is generally unsupported.</p>
<p>For example, Mozilla found some years ago that the ceiling of the number of tabs for most users of Firefox was 15. Most people had far fewer tabs than that. While I interpret that as a failure of tabs as a functional metaphor for managing web pages in a single application, it&#39;s generally been used a functionality scope for what the browser should support and be performant for.</p>
<ul>
<li>power user long tail</li>
<li>tab groups, alternate models</li>
</ul>
]]></description><link>/2017/06/15/firefoxtimecat/index.html</link><guid isPermaLink="true">/2017/06/15/firefoxtimecat/index.html</guid><category><![CDATA[Firefox]]></category><category><![CDATA[Performance]]></category><category><![CDATA[Time Cats]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Thu, 29 Jun 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox 11 is Smaller and Faster]]></title><description><![CDATA[<p>We quietly shipped Firefox 11 with a bunch of performance fixes that both reduce the amount of memory that Firefox uses, and improve the responsiveness of it&#39;s user interface.</p>
<p>These types of changes are not easy to talk about. Often they&#39;re very technical, and meaningless to anyone but the developers involved, which is probably why we usually don&#39;t enumerate them in the the <a href="http://www.mozilla.org/en-US/firefox/11.0/releasenotes/">release notes</a> or other public announcements. &quot;Firefox is 74% faster when you open menu X, and twice as fast in some garbage collection scenarios!&quot; Yeah, not an eye-popping headline. We could do a lot better in communicating these improvements in broadly meaningful ways though - nice graphs or some competitive site like <a href="http://arewefastyet.com/">arewefastyet</a> would help a lot. But until then, here&#39;s a short summary of the improvements in Firefox 11. And if you know of other performance fixes that don&#39;t fall into the categories below, please add them in the comments!</p>
<h3 id="memory-use-aka-memshrink-">Memory Use (aka &quot;memshrink&quot;)</h3>
<p>The <a href="https://wiki.mozilla.org/Performance/MemShrink">Memshrink project</a> has been going for quite a while now, led by Nicholas Nethercote. He blogs <a href="http://blog.mozilla.com/nnethercote/category/memshrink/">weekly updates on the project&#39;s activity</a>. According to Bugzilla, there were <a href="http://j.mp/A9pVz4">29 memshrink bugs marked fixed</a> during the Firefox 11 development cycle - four of which were P1, or very high priority. Some of the fixes were related to tools and detection methods, but many are actual reductions in memory use. The changes that made it into Firefox 11 include fixes for detected leaks, removing of zombie compartments, lazy-loading data, reducing the size of some caches, reducing memory used while scrolling, and many more.</p>
<h3 id="ui-responsiveness-aka-snappy-">UI Responsiveness (aka &quot;snappy&quot;)</h3>
<p>The <a href="https://wiki.mozilla.org/Performance/Snappy">Snappy project</a> started last December, and is run by <a href="https://twitter.com/#!/tarasglek">Taras Glek</a>. Its aim is to improve the responsiveness of the Firefox UI. Taras has been posting <a href="http://blog.mozilla.com/tglek/category/snappy/">weekly updates on Snappy activity</a> on his blog. Bugzilla shows <a href="http://j.mp/ypxFzj">15 snappy bugs marked fixed</a> during the Firefox 11 development cycle. The project had just started, but there are still some significant wins in this release! Firefox 11 includes reductions in queries in the bookmarks system, reduced preference lookups, faster data collection for session restore, and various improvements in the DOM code.</p>
<h3 id="add-on-compatibility">Add-on Compatibility</h3>
<p>While it&#39;s not related to performance, I do want to call attention to something that many people don&#39;t seem to know: In Firefox 10 (yes, the previous release) we stopped marking most add-ons incompatible when you upgrade. That means that a LOT more of your add-ons will continue to work when you upgrade Firefox from here on out. The only add-ons that still require compatibility bumps are those that have binary components, since they need to be recompiled against the current version.</p>
<p><a href="http://www.mozilla.org/en-US/firefox/new/">Download Firefox 11</a>.</p>
]]></description><link>/2012/03/firefox-11-is-smaller-and-faster/index.html</link><guid isPermaLink="true">/2012/03/firefox-11-is-smaller-and-faster/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[memshrink]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[snappy]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Wed, 14 Mar 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Performance Work-week & FOSDEM]]></title><description><![CDATA[<p>The Performance team and some of the Firefox team are spending the week in Brussels, laying waste to some of the performance issues in the browser.</p>
<p><a href="http://www.flickr.com/photos/autonome/6788478845/" title="Performance work-week, Brussels 2012 by autonome, on Flickr"><img src="6788478845_05187d07a1.jpg" alt="Performance work-week, Brussels 2012"></a></p>
<p>Much thanks to our excellent hosts <a href="https://hackerspace.be/Main_Page">HSBXL, a hackerspace in central Brussels</a>. We&#39;re equipped with fast internet, lemon soda, <a href="http://en.wikipedia.org/wiki/Mate_%28beverage%29">mate</a>, techno music, and of course beer.</p>
<p>[youtube <a href="http://www.youtube.com/watch?v=AjHKGdzfe2s?rel=0">http://www.youtube.com/watch?v=AjHKGdzfe2s?rel=0</a>]</p>
<p>Following the work week is FOSDEM, Europe&#39;s biggest open source conference. If you&#39;re in town for FOSDEM and want to come hack with us, <a href="https://twitter.com/#!/dietrich">ping me on twitter</a> or join us in <a href="irc://irc.mozilla.org/?channel=perf">#perf on IRC</a>.</p>
<p>I&#39;ll be uploading pics to <a href="http://www.flickr.com/search/?q=perfworkweek2012&amp;m=tags">flickr with the tag &#39;perfworkweek2012&#39;</a>.</p>
]]></description><link>/2012/01/firefox-performance-work-week-fosdem/index.html</link><guid isPermaLink="true">/2012/01/firefox-performance-work-week-fosdem/index.html</guid><category><![CDATA[belgium]]></category><category><![CDATA[brussels]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[hackerspace]]></category><category><![CDATA[hackerspaces]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Mon, 30 Jan 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Visualizing web page memory use in Firefox]]></title><description><![CDATA[<p>I remixed about:memory using <a href="http://mbostock.github.com/d3/">D3</a> to make a treemap visualization of how loaded URLs are using memory in Firefox.</p>
<p>Load it by clicking the widget on the add-on bar, or Cmd/Ctrl+Shift+Y</p>
<p>This visualization focuses on which web pages are using large amounts of memory - this is not a complete accounting of all memory being used. This doesn&#39;t yet show how much is being used by some of the Firefox internals.</p>
<p>Add-on installation does not require a restart. Only tested on Nightly builds.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/aboutmemory-treemap-visuali/">Install</a></p>
<p><a href="https://github.com/autonome/Memtreemap">Source code</a></p>
<p><a href="memtreemap.png"><img src="http://autonome.files.wordpress.com/2011/09/memtreemap.png" alt="" title="memtreemap.png"></a></p>
]]></description><link>/2011/09/visualizing-web-page-memory-use-in-firefox/index.html</link><guid isPermaLink="true">/2011/09/visualizing-web-page-memory-use-in-firefox/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 10 Sep 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Dormancy: Freeing up memory from unused tabs]]></title><description><![CDATA[<p>Dormancy &#39;retires&#39; tabs that have gone unused for a while, freeing up that memory. It then restores the tabs to life when accessed.</p>
<p>While Firefox 9 adds restore-on-demand for users that restore their session by default, many users will never benefit from it. This add-on targets users who don&#39;t restore session, but do have long-running instances of Firefox and many tabs. This might land as a core feature in Firefox 9 (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=675539">https://bugzilla.mozilla.org/show_bug.cgi?id=675539</a>).</p>
<p>NOTE: This is highly experimental, has only been tested on the Nightly builds, and probably will destroy your session. You&#39;ve been warned.</p>
<p>Tabs are considered inactive when they haven&#39;t been selected in longer than 5 minutes. To change that, set this pref to a value in milliseconds:</p>
<ul>
<li>extensions.dormancy.TabDormancyAgeMs</li>
</ul>
<p>Tabs are checked for inactivity every 5 minutes. To change this, set this pref to a value in milliseconds:</p>
<ul>
<li>extensions.dormancy.TabCheckIntervalMs</li>
</ul>
<p>Known bugs:</p>
<ul>
<li>Awesomebar entry for dormant tabs shows data URI</li>
<li>Sometimes dormant tabs have no title and no favicon
EXPERIMENTAL. MAY EAT YOUR SESSION OR DO OTHER BAD THINGS.</li>
</ul>
<p><a href="http://j.mp/oW3xQN">INSTALL</a></p>
<p><a href="http://j.mp/n82njh">Source code</a></p>
]]></description><link>/2011/09/dormancy-freeing-up-memory-from-unused-tabs/index.html</link><guid isPermaLink="true">/2011/09/dormancy-freeing-up-memory-from-unused-tabs/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[Memory]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 03 Sep 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Tracking Firefox UI Response Time]]></title><description><![CDATA[<p>I wrote an add-on for Firefox 4 that tracks how long various parts of the browser&#39;s user-interface take to load. It does not require a restart of the browser.</p>
<p><a href="http://people.mozilla.com/~dietrich/aboutresponse.xpi">Click here to install.</a></p>
<ul>
<li>It measures the duration between &#39;popupshowing&#39; and &#39;popupshown&#39; events. This covers menus, menu-like things, and those floating panels you&#39;re starting to see everywhere.</li>
<li>You can see your results at <a href="response">about:response</a>. There won&#39;t be anything there if you just installed the add-on. Browse around for a few days and then check it out.</li>
<li>It doesn&#39;t track popups without an id yet. It could also be nicer by showing the containing menu name if available.</li>
<li>I&#39;d like to add window load times. What else in the front-end could we be measuring? I was thinking about <command> execution, but there&#39;s not a way to do that without modifying the core, afaict.</li>
<li>Perhaps we could add a button for users to submit their anonymized data somewhere.
Try it out, let me know if you have any problems. The <a href="https://github.com/autonome/about-response">source code</a> is available on Github.</li>
</ul>
<p><a href="about-response-screenshot.png"><img src="http://autonome.files.wordpress.com/2011/02/about-response-screenshot.png" alt="about-response-screenshot" title="about-response-screenshot"></a></p>
]]></description><link>/2011/02/tracking-firefox-ui-response-time/index.html</link><guid isPermaLink="true">/2011/02/tracking-firefox-ui-response-time/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Tue, 22 Feb 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Performance Update]]></title><description><![CDATA[<p>I&#39;ve been focusing more on <a href="https://wiki.mozilla.org/Labs/Jetpack">Jetpack</a> development this quarter, but will still be posting performance round-ups regularly here. In fact, here&#39;s one now:</p>
<ul>
<li>Taras Glek continues to blog his progress on improving the binaries we ship, talking about <a href="http://blog.mozilla.com/tglek/2010/04/05/linux-how-to-make-startup-suck-less-and-reduce-memory-usage/">how reordering binaries improves memory use as well as load time</a>, <a href="http://blog.mozilla.com/tglek/2010/04/12/squeezing-every-last-bit-of-performance-out-of-the-linux-toolchain/">leveraging GCC&#39;s PGO for fast startup</a>, and finally about <a href="http://blog.mozilla.com/tglek/2010/04/07/icegrind-valgrind-plugin-for-optimizing-cold-startup/">Icegrind, his Valgrind plugin</a> that generates a log of the order of access to mmap&#39;d files.</li>
<li>Are we fast yet?! The answer to that question, at least in regards to JavaScript performance test suites, can be found at <a href="http://arewefastyet.com/">AreWeFastYet.com</a>, where you&#39;ll see graphs that show Firefox trunk&#39;s performance relative to Google&#39;s V8 and Apple&#39;s Nitro on the Sunspider and V8Bench tests. I won&#39;t spoil the answer for you, you&#39;ll have to go check it out for yourself.</li>
<li>I <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=557552">finished and checked-in</a> my changes to the <a href="http://tests.themasta.com/tinderboxpushlog/?tree=Firefox">Tinderbox Pushlog</a>, adding a new feature that provides at-a-glance comparison in performance test results between any two pushes on the page (<a href="https://bug557552.bugzilla.mozilla.org/attachment.cgi?id=437335">screenshot</a>). It will go live next time Marcus pushes changes out to his server. <span style="text-decoration:line-through;">But he&#39;s not online at the moment, so I don&#39;t know when this feature will go live.</span> Heh, it went live moments after I published this post.</li>
<li>Heather Arthur and Clint Talbert are working on a project to add performance data to Addons.mozilla.org for extensions. They&#39;re starting with the effect of a given extension on Firefox startup time. Follow along on the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=559929">bug</a>, or <a href="http://github.com/harthur/dirtyharry">watch project Dirty Harry on Github</a>.</li>
<li>Improving the AMO extension validator: AMO scans uploaded extensions and reports problems to the authors. For performance best-practices, we should at least warn the authors if possible if their add-on is doing something that&#39;ll make Firefox slow. This bug is for <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=551714">warning about add-ons that don&#39;t have their content in a JAR file</a>. If you see any thing in the <a href="https://wiki.mozilla.org/Performance/Addons/BestPractices">best practices guide</a> that can be statically detected, please file a bug for it <a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=addons.mozilla.org&amp;component=Admin%2fEditor%20Tools">here</a>.
If you have any other performance-related bugs, blog posts, anecdotes or other tomfoolery, post it in the comments!</li>
</ul>
]]></description><link>/2010/04/firefox-performance-update-2/index.html</link><guid isPermaLink="true">/2010/04/firefox-performance-update-2/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 17 Apr 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Performance Update]]></title><description><![CDATA[<p>As I mentioned in <a href="http://autonome.wordpress.com/2010/03/19/firefox-performance-update-startup-and-otherwise-march-19-2010/">my previous update</a>, the scope of these updates has expanded beyond start-up time. That said, I can&#39;t keep track of everything! So if you have an update, <a href="mailto:dietrich@mozilla.com">email it to me</a> if you want it in the post, or just add it in the comments.</p>
<ul>
<li>First, I just have to say that Marco&#39;s fix for <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=542943">bug 542943</a> has changed the way I think about browser restarts, removing the fear entirely. It turns out that, for me anyway, the majority of the slowness involved in restarting was waiting for the process to exit. After Marco&#39;s landing, it&#39;s nearly instantaneous.</li>
<li>While I was away, Taras blogged nearly daily about his findings while working on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=549749">Linux code locality</a>. He first posted <a href="http://blog.mozilla.com/tglek/2010/03/23/when-in-trouble-draw-a-picture/">a graph of I/O from library loading</a>, then a long post about <a href="http://blog.mozilla.com/tglek/2010/03/24/linux-why-loading-binaries-from-disk-sucks/">why library loading sucks on Linux</a>, followed by some findings regarding <a href="http://blog.mozilla.com/tglek/2010/03/25/madvise-prelink-update/">madvise and prelink</a>, finally posting about <a href="http://blog.mozilla.com/tglek/2010/03/29/linux-startup-inefficiency/">linker inefficiencies and SuSE&#39;s workaround</a>.</li>
<li>Mike Wu and others are moving forward on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=552121">the &quot;omnijar&quot; project</a>, which moves most of the core application files into a single JAR file. Taras described it as &quot;extreme filesystem makeover&quot;, and found ~10% start-up improvement with this approach on the desktop.</li>
<li>Clint Talbert and Heather Arthur are beginning work on a project that measures add-on performance, that will hook into AMO to show developers how their add-ons perform.</li>
<li>Drew Willcoxon got r+ on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=536893">bug 536893</a> to allow asynchronous opening of Places query results. Once we start using the feature, expect bookmark and history UI to get snappier!</li>
<li>Taras got review on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=516085">bug 516085</a>, which consolidates access to core services that currently accessed hundreds of thousands of times during a browsing session.</li>
<li>A bunch of people have added tips to the <a href="https://wiki.mozilla.org/Performance/Addons/BestPractices">add-on performance &quot;best practices&quot; document</a>. I&#39;ll be cleaning it up and moving it to <a href="https://developer.mozilla.org">MDC</a> soon.</li>
<li><p>While the tinderbox pushlog is fantastic for viewing per-checkin results, and a broader view of tree activity, it doesn&#39;t provide any facility for comparing the results of performance tests between landings. So I spent some time this week writing an addition that allows you to select any two pushes, and view a comparison table showing the difference in performance across all tests on all operating systems for those revisions. I&#39;ll clean it up, and try to get it deployed, but regardless will make it available as a Jetpack or Greasemonkey script sometime next week.
For more info:</p>
</li>
<li><p>Startup performance activity is tracked <a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements">here</a>.</p>
</li>
<li>Add-on performance efforts are being tracked on <a href="https://wiki.mozilla.org/Performance/Addons">this page</a>.</li>
<li>Weekly performance results for all measurements are available on the <a href="http://graphs.mozilla.org/dashboard/snapshot/">snapshot</a>, and trends available on the <a href="http://graphs.mozilla.org/dashboard/">dashboard</a>.</li>
</ul>
]]></description><link>/2010/04/firefox-performance-update/index.html</link><guid isPermaLink="true">/2010/04/firefox-performance-update/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 03 Apr 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Performance Report, Startup and Otherwise - March 19, 2010]]></title><description><![CDATA[<p>A couple of notices: First, I&#39;m going to start including various performance-related items in these  posts that aren&#39;t purely about startup time. There&#39;s a whole bunch of activity happening that isn&#39;t really rolled up anywhere, so it might as well be here. Second, I&#39;ll be out on vacation in Florida next week, so there will not be a status update.</p>
<ul>
<li>Last week I forgot to add that Marco Bonardo landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=542943">bug 542943</a>, which removed a hash of all bookmarks that stayed resident for the lifetime of the application. This resulted in a 97% improvement in shutdown time for our test of a very large bookmarks+history collection.</li>
<li>Ted&#39;s taken over the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=525013">static build project</a>, and has new patches up.</li>
<li>Taras is working on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=531406">Linux code locality</a> via a <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=549749">Valgrind plugin he&#39;s writing</a>, with help from those folks.</li>
<li>At the platform work week Taras talked to Ehsan, who it turns out had a bunch of ideas for improving startup there. I&#39;ve filed bugs from Ehsan&#39;s notes for better <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=553721">Windows code locality</a>, <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=553723">binding DLL function addresses to the executable</a>, <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=553725">DLL rebasing</a>, and <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=553727">DLL lazy-loading</a>.</li>
<li>The <a href="https://wiki.mozilla.org/Performance/Addons/BestPractices">add-on performance &quot;best practices&quot; document</a> is getting bigger and better. If you have ideas for improving add-on performance, please add them to the doc!</li>
<li>All of our add-on performance efforts are being tracked centrally on <a href="https://wiki.mozilla.org/Performance/Addons">this page</a>. If you want to get involved, hop on one of those bugs. If you want to stay updated, &quot;watch&quot; that page and you&#39;ll get emails whenever it&#39;s updated.</li>
<li>I&#39;ve updated the main <a href="https://wiki.mozilla.org/Performance">Performance wiki page</a>. The top sections are now up to date. Next I&#39;ll be updating the testing and reference sections, and breaking out the task-specific content and moving it to an updated table of performance activities, like we currently have for startup, addons, etc. When the page is more manageable, I&#39;ll remove the TOC that&#39;s pushing everything below the fold.</li>
<li>As usual, the table of active startup performance activity is <a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements">here</a>.</li>
</ul>
]]></description><link>/2010/03/firefox-performance-update-startup-and-otherwise-march-19-2010/index.html</link><guid isPermaLink="true">/2010/03/firefox-performance-update-startup-and-otherwise-march-19-2010/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 20 Mar 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance March 12, 2010]]></title><description><![CDATA[<p>No update on the ongoing code projects this week. However, we investigated the extension performance work I mentioned <a href="http://autonome.wordpress.com/2010/03/05/firefox-startup-performance-march-5-2010/">last week</a>, and got a conversation going, with posts by <a href="http://blog.mozilla.com/tglek/2010/03/11/extensions-startup/">Taras</a>, <a href="http://weblogs.mozillazine.org/asa/archives/2010/03/startup_penalty_repo.html">Asa</a> and <a href="http://autonome.wordpress.com/2010/03/10/firefox-extensions-and-performance/">myself</a>. I&#39;ve listed the various ideas and approaches that came out of those posts and comments <a href="https://wiki.mozilla.org/Performance/Addons">here</a>.</p>
]]></description><link>/2010/03/firefox-startup-performance-march-12-2010/index.html</link><guid isPermaLink="true">/2010/03/firefox-startup-performance-march-12-2010/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 13 Mar 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox, Extensions and Performance]]></title><description><![CDATA[<p>Extensibility is a double-edged sword. It&#39;s a keystone feature in Firefox - differentiating even now that just about every other browser has some vector for augmentation. However, along with the freedom and power of Firefox extensions comes the ability to slow the browser down. And worse, users and developers have little or no visibility into the causes of poor extension performance.</p>
<p>Not all extensions slow Firefox down. But they can. To prevent that, we need to do three things:</p>
<ol>
<li>Make it <em>easy</em> for extension developers to keep their extensions fast.</li>
<li>Allow users to see the performance effect of their extensions.</li>
<li>Mitigate the effects of badly-behaving extensions in Firefox itself.</li>
</ol>
<h3 id="for-extension-developers">For Extension Developers</h3>
<p>First, we need to loudly and clearly educate extension developers, and provide them tools. Some ideas:</p>
<ul>
<li>Write an extension performance &quot;best practices&quot; guide on MDC.</li>
<li>Build warnings into Firefox, that highlight code that might perform poorly (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=550242">bug 550242</a>).</li>
<li>Provide a <a href="https://wiki.mozilla.org/Build:TryServer">try-server</a> that allows extensions to be uploaded and installed into the test profile.</li>
<li>Perform automated performance testing of extensions upload to AMO (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=458990">bug 458990</a>, maybe?)</li>
<li>Ensure that Jetpack generates extensions that are models for good behavior.</li>
</ul>
<h3 id="for-users">For Users</h3>
<p>Users should be able to make informed choices about the extensions they install, and be able to monitor the effect of extensions on their browsing sessions. We could:</p>
<ul>
<li>Provide performance information for extensions on their pages on AMO.</li>
<li>Build a performance dashboard similar to <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=515354">about:memory</a>, but tracking startup time, page-load time, and browser UI behavior such as menu responsiveness. Given a visualization of these things over time, users can see the effects of installing different extensions.</li>
</ul>
<h3 id="in-the-core">In the Core</h3>
<p>There are also things we can do to mitigate poor performance in core Firefox code. This is being discussed in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=533038">bug 533038</a>.</p>
<p>We&#39;re already working on some of the ideas listed above. Ping me in <a href="irc://irc.mozilla.org/#startup">#startup on irc.mozilla.org</a> if you want to help out. If you have ideas for other ways to improve extension performance, or to communicate back to users and developers, let me know in the comments.</p>
]]></description><link>/2010/03/firefox-extensions-and-performance/index.html</link><guid isPermaLink="true">/2010/03/firefox-extensions-and-performance/index.html</guid><category><![CDATA[extensions]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Thu, 11 Mar 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance - March 5, 2010]]></title><description><![CDATA[<p>I spent the week on-site at Mozilla HQ in Mountain View, which was great.</p>
<ul>
<li>Talked with Bob Moss and others about expanding our startup tests to cover a <a href="https://wiki.mozilla.org/Firefox/Projects/StartupPerformance/TestMatrix">variety of startup scenarios</a>.</li>
<li>Spent some time tracing file IO with the top 10 extensions on AMO installed, comparing it to an empty profile (<a href="http://people.mozilla.com/~dietrich/open.empty.txt">empty</a>, <a href="http://people.mozilla.com/~dietrich/open.extensions.txt">with extensions</a>) for <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=533038">a bug Taras filed</a> about extension-caused file IO.</li>
<li>I also traced shell calls in the startup path, and found <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=550310">some weirdness</a>, and yeah there are a bunch more calls with the top 10 extensions installed (<a href="http://people.mozilla.com/~dietrich/exec.txt">empty</a>, <a href="http://people.mozilla.com/~dietrich/exec.extensions.txt">with extensions</a>). Things like this should be &quot;advertised&quot; on extensions&#39; pages on AMO. I&#39;m pretty sure there&#39;s already some movement towards Talos testing extensions and posting results on AMO. I&#39;ll file a bug for getting things like this watched as well.</li>
<li>Taras has been making progress using <a href="http://valgrind.org/">Valgrind</a> to get the function and data ordering sequence for <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=531406">improving code locality in our binaries</a>.</li>
<li>Ryan patched and landed a change to <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=549788">increase the buffer size used when reading in JSON files</a> (something the search service does during startup).</li>
</ul>
]]></description><link>/2010/03/firefox-startup-performance-march-5-2010/index.html</link><guid isPermaLink="true">/2010/03/firefox-startup-performance-march-5-2010/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 06 Mar 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Graph Server Improvements]]></title><description><![CDATA[<p>The <a href="http://graphs.mozilla.org/">graph server</a> is a powerful tool for visualizing the results of our performance tests over time. However, it has a few major problems that make using it in it&#39;s current form difficult. It also lacks a few features that would make it far more useful for tasks such as regression-finding. I and a few other people are looking into improving the graph server. Before starting though, we need to know how you use the graph server, and your ideas for how the interface could be improved, so please let me know your thoughts in the comments!</p>
<p><img src="graphserver1.png" alt="graph server" title="graph server"></p>
]]></description><link>/2010/02/graph-server-improvements/index.html</link><guid isPermaLink="true">/2010/02/graph-server-improvements/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[graph]]></category><category><![CDATA[server]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sun, 28 Feb 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance - Stardate 2.27.2010]]></title><description><![CDATA[<p>Instead of copying around the table of high-priority startup projects, it&#39;s now centrally located and updated on the <a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements#Active_Projects">Startup wiki page</a>. A couple of front-end optimizations landed this week:</p>
<ul>
<li>Neil landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=354048">bug 354048</a> to not rebuild toolbars at startup.</li>
<li>Ryan landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=522842">bug 522842</a> for the search service to not send notifications until all engines are loaded.
I&#39;ll be in Mountain View all next week for the Firefox work-week.</li>
</ul>
]]></description><link>/2010/02/firefox-startup-performance-stardate-2-27-2010/index.html</link><guid isPermaLink="true">/2010/02/firefox-startup-performance-stardate-2-27-2010/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sun, 28 Feb 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance - Feb 19, 2010]]></title><description><![CDATA[<p>Taras <a href="http://blog.mozilla.com/tglek/2010/02/19/teaching-ld-to-optimize-binaries-for-startup/">blogged  about the function ordering work</a> he did while on vacation in Fiji  (?!). Looks like the potential for a minimum 10% win there, very exciting. Follow along in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=531406">bug 531406</a>.</p>
<p>Other than that, no major updates:</p>
<ul>
<li>Zack found surprisingly large performance wins just from deCOMtamination  patches in his CSS work. If you want to help out, <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=105431" title="https://bugzilla.mozilla.org/show_bug.cgi?id=105431">bug 105431</a> is the deCOM tracker bug, and <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=545052" title="https://bugzilla.mozilla.org/show_bug.cgi?id=545052">bug 545052</a> is about building tools for automating deCOMtamination.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=525013">Static  build</a>: Still in reviews, need to figure out approach to binary tests  on the tinderbox.</li>
<li>Ben&#39;s <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=520309">fastload cache replacement</a> is still waiting on first-review from Ben Smedberg.</li>
<li>B<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=354048">ug 354048</a> to not rebuild toolbars at startup, still cycling through reviews.</li>
</ul>
]]></description><link>/2010/02/firefox-startup-performance-feb-19-2010/index.html</link><guid isPermaLink="true">/2010/02/firefox-startup-performance-feb-19-2010/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 20 Feb 2010 00:00:00 GMT</pubDate></item></channel></rss>