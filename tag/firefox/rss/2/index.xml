<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[undefined - Dietrich Ayala]]></title><description><![CDATA[Internet freedom, the web and Mozilla.]]></description><link>/</link><generator>Ghost</generator><lastBuildDate>Wed, 12 Jul 2017 05:35:22 GMT</lastBuildDate><atom:link href="/tag/undefined/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Building Firefox in the Post-Browser Age]]></title><description><![CDATA[<p>Ok, so maybe we aren&#39;t in the post-browser age <em>yet</em>. But we&#39;re getting there, and quickly. Most of the &quot;apps&quot; I use on my phone are useless without an always-on data connection, and they communicate with their respective motherships via HTTP. We&#39;re staring down a near-future with multiple Web-stack operating systems for both desktop and portable devices. We have server-side application platforms that look startlingly like pieces of a traditional Web client.</p>
<p>All of those places are the Web, so that&#39;s where Mozilla has got to be, when and if it&#39;s possible to do so. And between desktop Firefox, mobile Firefox, Chromeless, B2G, Pancake, Open Web Apps and the various Firefox features developed by the Labs and the Services groups, we&#39;ve got a lot of application logic that needs to exist in various forms across those disparate environments.</p>
<p>Up until recently, even including most of the mobile efforts to date, we&#39;ve had a pretty narrow idea of what constitutes Firefox: Mozilla&#39;s browser application with a front-end built in XUL, and rendering content using Gecko, stored entirely in a single source repository.</p>
<p>This narrow view is insufficient given the needs of internet users and the plans we have to serve those needs in the immediate future. This has been starkly illustrated by the recent move to a native UI for mobile Firefox, projects like Pancake, and the expansion of the development of Firefox features by groups outside of the core team.</p>
<p>A few months ago I dumped a couple of thoughts into <a href="https://groups.google.com/forum/#!msg/mozilla.dev.planning/K1fr4VqtQTA/h_orDOFqQKMJ">a thread on the mozilla.dev.planning newsgroup</a> about these things. More than anything, that thread showed me that the broad spectrum of activity in Mozilla today makes our narrow view of Firefox a huge barrier to future success. Some people didn&#39;t agree that there was a problem at all. Some people railed against Jetpack or Github, while admitting they&#39;d never used either. Some people agreed that developing Firefox is slow and fragile, and pointed at the relative historical success of that approach. Disturbingly, I got a bunch of private emails thanking me for starting the conversation... what does <em>that</em> mean?! Overall though, there was a lot of agreement on this point: We need more people to be able to work on Firefox faster, and in a more heterogeneous environment.</p>
<p>There&#39;s a bunch of work towards that end going on right now, both in Firefox team itself and in Mozilla generally, around lowering the barriers to contribution. Specific to Firefox core development though, one experiment in alternate approaches is the attempt to ship the BrowserID feature as a Jetpack-based add-on that is developed on Github and bundled with Firefox. There are a lot of moving parts, but the exercise is helping us figure out the up- and downsides to building features as add-ons, as well as providing performance data about the Add-on SDK. Maybe it&#39;ll work, maybe we&#39;ll have to re-route and patch it against the core. Maybe we&#39;ll land somewhere in-between.</p>
<p>Regardless of that experiment&#39;s outcome, I think we need to be experimenting hard with how we develop Firefox, and asking questions about the longer-term development landscape:</p>
<ul>
<li>Code changes currently have non-deterministic effects in the Firefox ecosystem. We have a jumble of services that stagger into existence at startup, and then race for the exit at shutdown, beating up the file-system at both ends of the application lifecycle. &quot;Async&quot; is a pattern, not a system - without a system, making a bunch of things asynchronous means that the application&#39;s behavior as a whole is generally less predictable. Is there a more systematic way that we can manage the loading and unloading of core browser services?</li>
<li>Calcification: Check out the <a href="https://wiki.mozilla.org/Firefox/Cleanup">&quot;cleanup page&quot;</a>. There are long-despised-and-untouched pieces of our core infrastructure, such as URL classifier, importers, autocomplete, and parts of Places. Why is it so hard to change these? What are the barriers to making them better?</li>
<li>Modularity: Cu.import is great in that it provides some of the benefits that we used XPCOM JS services for, but without the XPCOM. But are we using it enough? Jetpack development puts much more emphasis on modularity via a core built on CommonJS, and I&#39;ve found it to make browser features written in Jetpack far easier to follow, debug, and contribute to. Maybe we should be putting code into modules where we&#39;d normally add it to browser.js, or XBL widgets moreso than we are now? This could reduce our dependence on the XUL window mega-scope that we get in browser.js, which I&#39;d argue leads to code that is easier to developer, debug, test and maintain.</li>
<li>Abstracting the application logic away from XUL/XPCOM where possible, allowing for more portable code. This doesn&#39;t make sense in a lot of places in the front-end, but in others such as sync or expiration policies or tab grouping algorithms or frecency generation, it might. These are things which could be useful across a number of different application contexts.
So where from here? There&#39;s general agreement that the Add-on SDK needs to ship in the browser. This might help address some of the questions above. However, it won&#39;t immediately help us share code with other Firefoxes or Mozilla projects, or make core development inherently less-fragile or our application behavior any more deterministic. And there are tools like Cu.import, which we have now, and Harmony modules, which we might have soon (can we use those in chrome?!) that could help with the modularity part.</li>
</ul>
<p>But only some of this is about the technology - other parts are social. As I said above, some people do not agree that developing Firefox is slow and fraught with peril. Is that plain ol&#39; resistance to change, or just the lack of a clear alternative? And maybe we code reviewers should be more forward-looking, demanding larger refactorings instead of non-invasive surgeries. But that&#39;s challenging when you&#39;re constrained for time, or the regression cost of refactoring is so high that you become risk averse.</p>
<p>I&#39;d love to hear your thoughts on the future of Firefox application development - especially the core Firefox team, and the people working on Firefox features in other groups or via add-ons. Myk Melez has been corralling a group to talk about feature development with the Add-on SDK specifically, but it quickly spreads into these broader issues. He&#39;s starting a list for it, but until then there are regular meetings, <a href="http://j.mp/uVeOiT">details available in his dev.planning post</a>.</p>
]]></description><link>/2011/10/building-firefox-in-the-post-browser-age/index.html</link><guid isPermaLink="true">/2011/10/building-firefox-in-the-post-browser-age/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Wed, 26 Oct 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building Firefox in the Post-Browser Age]]></title><description><![CDATA[<p>Ok, so maybe we aren&#39;t in the post-browser age <em>yet</em>. But we&#39;re getting there, and quickly. Most of the &quot;apps&quot; I use on my phone are useless without an always-on data connection, and they communicate with their respective motherships via HTTP. We&#39;re staring down a near-future with multiple Web-stack operating systems for both desktop and portable devices. We have server-side application platforms that look startlingly like pieces of a traditional Web client.</p>
<p>All of those places are the Web, so that&#39;s where Mozilla has got to be, when and if it&#39;s possible to do so. And between desktop Firefox, mobile Firefox, Chromeless, B2G, Pancake, Open Web Apps and the various Firefox features developed by the Labs and the Services groups, we&#39;ve got a lot of application logic that needs to exist in various forms across those disparate environments.</p>
<p>Up until recently, even including most of the mobile efforts to date, we&#39;ve had a pretty narrow idea of what constitutes Firefox: Mozilla&#39;s browser application with a front-end built in XUL, and rendering content using Gecko, stored entirely in a single source repository.</p>
<p>This narrow view is insufficient given the needs of internet users and the plans we have to serve those needs in the immediate future. This has been starkly illustrated by the recent move to a native UI for mobile Firefox, projects like Pancake, and the expansion of the development of Firefox features by groups outside of the core team.</p>
<p>A few months ago I dumped a couple of thoughts into <a href="https://groups.google.com/forum/#!msg/mozilla.dev.planning/K1fr4VqtQTA/h_orDOFqQKMJ">a thread on the mozilla.dev.planning newsgroup</a> about these things. More than anything, that thread showed me that the broad spectrum of activity in Mozilla today makes our narrow view of Firefox a huge barrier to future success. Some people didn&#39;t agree that there was a problem at all. Some people railed against Jetpack or Github, while admitting they&#39;d never used either. Some people agreed that developing Firefox is slow and fragile, and pointed at the relative historical success of that approach. Disturbingly, I got a bunch of private emails thanking me for starting the conversation... what does <em>that</em> mean?! Overall though, there was a lot of agreement on this point: We need more people to be able to work on Firefox faster, and in a more heterogeneous environment.</p>
<p>There&#39;s a bunch of work towards that end going on right now, both in Firefox team itself and in Mozilla generally, around lowering the barriers to contribution. Specific to Firefox core development though, one experiment in alternate approaches is the attempt to ship the BrowserID feature as a Jetpack-based add-on that is developed on Github and bundled with Firefox. There are a lot of moving parts, but the exercise is helping us figure out the up- and downsides to building features as add-ons, as well as providing performance data about the Add-on SDK. Maybe it&#39;ll work, maybe we&#39;ll have to re-route and patch it against the core. Maybe we&#39;ll land somewhere in-between.</p>
<p>Regardless of that experiment&#39;s outcome, I think we need to be experimenting hard with how we develop Firefox, and asking questions about the longer-term development landscape:</p>
<ul>
<li>Code changes currently have non-deterministic effects in the Firefox ecosystem. We have a jumble of services that stagger into existence at startup, and then race for the exit at shutdown, beating up the file-system at both ends of the application lifecycle. &quot;Async&quot; is a pattern, not a system - without a system, making a bunch of things asynchronous means that the application&#39;s behavior as a whole is generally less predictable. Is there a more systematic way that we can manage the loading and unloading of core browser services?</li>
<li>Calcification: Check out the <a href="https://wiki.mozilla.org/Firefox/Cleanup">&quot;cleanup page&quot;</a>. There are long-despised-and-untouched pieces of our core infrastructure, such as URL classifier, importers, autocomplete, and parts of Places. Why is it so hard to change these? What are the barriers to making them better?</li>
<li>Modularity: Cu.import is great in that it provides some of the benefits that we used XPCOM JS services for, but without the XPCOM. But are we using it enough? Jetpack development puts much more emphasis on modularity via a core built on CommonJS, and I&#39;ve found it to make browser features written in Jetpack far easier to follow, debug, and contribute to. Maybe we should be putting code into modules where we&#39;d normally add it to browser.js, or XBL widgets moreso than we are now? This could reduce our dependence on the XUL window mega-scope that we get in browser.js, which I&#39;d argue leads to code that is easier to developer, debug, test and maintain.</li>
<li>Abstracting the application logic away from XUL/XPCOM where possible, allowing for more portable code. This doesn&#39;t make sense in a lot of places in the front-end, but in others such as sync or expiration policies or tab grouping algorithms or frecency generation, it might. These are things which could be useful across a number of different application contexts.
So where from here? There&#39;s general agreement that the Add-on SDK needs to ship in the browser. This might help address some of the questions above. However, it won&#39;t immediately help us share code with other Firefoxes or Mozilla projects, or make core development inherently less-fragile or our application behavior any more deterministic. And there are tools like Cu.import, which we have now, and Harmony modules, which we might have soon (can we use those in chrome?!) that could help with the modularity part.</li>
</ul>
<p>But only some of this is about the technology - other parts are social. As I said above, some people do not agree that developing Firefox is slow and fraught with peril. Is that plain ol&#39; resistance to change, or just the lack of a clear alternative? And maybe we code reviewers should be more forward-looking, demanding larger refactorings instead of non-invasive surgeries. But that&#39;s challenging when you&#39;re constrained for time, or the regression cost of refactoring is so high that you become risk averse.</p>
<p>I&#39;d love to hear your thoughts on the future of Firefox application development - especially the core Firefox team, and the people working on Firefox features in other groups or via add-ons. Myk Melez has been corralling a group to talk about feature development with the Add-on SDK specifically, but it quickly spreads into these broader issues. He&#39;s starting a list for it, but until then there are regular meetings, <a href="http://j.mp/uVeOiT">details available in his dev.planning post</a>.</p>
]]></description><link>/2011/10/building-firefox-in-the-post-browser-age/index.html</link><guid isPermaLink="true">/2011/10/building-firefox-in-the-post-browser-age/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Wed, 26 Oct 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[The Mozilla Open Data Project]]></title><description><![CDATA[<p>The Mozilla Open Data Project is an index of all of the open APIs and data-sources available in the Mozilla project.</p>
<p>It&#39;s also something that does not exist yet!</p>
<p>Or maybe it does, but I couldn&#39;t find it...</p>
<p>Anyways, we&#39;ve got massive amounts of data available throughout the project, from check-in logs to performance data to bugzilla APIs. However, there&#39;s no central location that lists all of the sources that currently exist. This also means that&#39;s it&#39;s not easy to scan and see what&#39;s not available that should be.</p>
<p>Maybe this is something we should list on a public index that already exists, like <a href="http://www.programmableweb.com/">Programmable Web</a>.</p>
<p>For now, I started a list here: <a href="https://wiki.mozilla.org/Modp">https://wiki.mozilla.org/Modp</a></p>
<p>Please add any sources of data or public APIs that you know of to that list, or here in the comments and I&#39;ll add them for you.</p>
<p>UPDATE: To clarify, this is different than the community metrics work being done by the Metrics team. But we&#39;re talking about having this information available in the metrics portal at some point in the future, likely driven off a publicly editable source.</p>
]]></description><link>/2011/10/the-mozilla-open-data-project/index.html</link><guid isPermaLink="true">/2011/10/the-mozilla-open-data-project/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Thu, 13 Oct 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[The Mozilla Open Data Project]]></title><description><![CDATA[<p>The Mozilla Open Data Project is an index of all of the open APIs and data-sources available in the Mozilla project.</p>
<p>It&#39;s also something that does not exist yet!</p>
<p>Or maybe it does, but I couldn&#39;t find it...</p>
<p>Anyways, we&#39;ve got massive amounts of data available throughout the project, from check-in logs to performance data to bugzilla APIs. However, there&#39;s no central location that lists all of the sources that currently exist. This also means that&#39;s it&#39;s not easy to scan and see what&#39;s not available that should be.</p>
<p>Maybe this is something we should list on a public index that already exists, like <a href="http://www.programmableweb.com/">Programmable Web</a>.</p>
<p>For now, I started a list here: <a href="https://wiki.mozilla.org/Modp">https://wiki.mozilla.org/Modp</a></p>
<p>Please add any sources of data or public APIs that you know of to that list, or here in the comments and I&#39;ll add them for you.</p>
<p>UPDATE: To clarify, this is different than the community metrics work being done by the Metrics team. But we&#39;re talking about having this information available in the metrics portal at some point in the future, likely driven off a publicly editable source.</p>
]]></description><link>/2011/10/the-mozilla-open-data-project/index.html</link><guid isPermaLink="true">/2011/10/the-mozilla-open-data-project/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Thu, 13 Oct 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Visualizing web page memory use in Firefox]]></title><description><![CDATA[<p>I remixed about:memory using <a href="http://mbostock.github.com/d3/">D3</a> to make a treemap visualization of how loaded URLs are using memory in Firefox.</p>
<p>Load it by clicking the widget on the add-on bar, or Cmd/Ctrl+Shift+Y</p>
<p>This visualization focuses on which web pages are using large amounts of memory - this is not a complete accounting of all memory being used. This doesn&#39;t yet show how much is being used by some of the Firefox internals.</p>
<p>Add-on installation does not require a restart. Only tested on Nightly builds.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/aboutmemory-treemap-visuali/">Install</a></p>
<p><a href="https://github.com/autonome/Memtreemap">Source code</a></p>
<p><a href="memtreemap.png"><img src="http://autonome.files.wordpress.com/2011/09/memtreemap.png" alt="" title="memtreemap.png"></a></p>
]]></description><link>/2011/09/visualizing-web-page-memory-use-in-firefox/index.html</link><guid isPermaLink="true">/2011/09/visualizing-web-page-memory-use-in-firefox/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 10 Sep 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Visualizing web page memory use in Firefox]]></title><description><![CDATA[<p>I remixed about:memory using <a href="http://mbostock.github.com/d3/">D3</a> to make a treemap visualization of how loaded URLs are using memory in Firefox.</p>
<p>Load it by clicking the widget on the add-on bar, or Cmd/Ctrl+Shift+Y</p>
<p>This visualization focuses on which web pages are using large amounts of memory - this is not a complete accounting of all memory being used. This doesn&#39;t yet show how much is being used by some of the Firefox internals.</p>
<p>Add-on installation does not require a restart. Only tested on Nightly builds.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/aboutmemory-treemap-visuali/">Install</a></p>
<p><a href="https://github.com/autonome/Memtreemap">Source code</a></p>
<p><a href="memtreemap.png"><img src="http://autonome.files.wordpress.com/2011/09/memtreemap.png" alt="" title="memtreemap.png"></a></p>
]]></description><link>/2011/09/visualizing-web-page-memory-use-in-firefox/index.html</link><guid isPermaLink="true">/2011/09/visualizing-web-page-memory-use-in-firefox/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 10 Sep 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Dormancy: Freeing up memory from unused tabs]]></title><description><![CDATA[<p>Dormancy &#39;retires&#39; tabs that have gone unused for a while, freeing up that memory. It then restores the tabs to life when accessed.</p>
<p>While Firefox 9 adds restore-on-demand for users that restore their session by default, many users will never benefit from it. This add-on targets users who don&#39;t restore session, but do have long-running instances of Firefox and many tabs. This might land as a core feature in Firefox 9 (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=675539">https://bugzilla.mozilla.org/show_bug.cgi?id=675539</a>).</p>
<p>NOTE: This is highly experimental, has only been tested on the Nightly builds, and probably will destroy your session. You&#39;ve been warned.</p>
<p>Tabs are considered inactive when they haven&#39;t been selected in longer than 5 minutes. To change that, set this pref to a value in milliseconds:</p>
<ul>
<li>extensions.dormancy.TabDormancyAgeMs</li>
</ul>
<p>Tabs are checked for inactivity every 5 minutes. To change this, set this pref to a value in milliseconds:</p>
<ul>
<li>extensions.dormancy.TabCheckIntervalMs</li>
</ul>
<p>Known bugs:</p>
<ul>
<li>Awesomebar entry for dormant tabs shows data URI</li>
<li>Sometimes dormant tabs have no title and no favicon
EXPERIMENTAL. MAY EAT YOUR SESSION OR DO OTHER BAD THINGS.</li>
</ul>
<p><a href="http://j.mp/oW3xQN">INSTALL</a></p>
<p><a href="http://j.mp/n82njh">Source code</a></p>
]]></description><link>/2011/09/dormancy-freeing-up-memory-from-unused-tabs/index.html</link><guid isPermaLink="true">/2011/09/dormancy-freeing-up-memory-from-unused-tabs/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[Memory]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 03 Sep 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Dormancy: Freeing up memory from unused tabs]]></title><description><![CDATA[<p>Dormancy &#39;retires&#39; tabs that have gone unused for a while, freeing up that memory. It then restores the tabs to life when accessed.</p>
<p>While Firefox 9 adds restore-on-demand for users that restore their session by default, many users will never benefit from it. This add-on targets users who don&#39;t restore session, but do have long-running instances of Firefox and many tabs. This might land as a core feature in Firefox 9 (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=675539">https://bugzilla.mozilla.org/show_bug.cgi?id=675539</a>).</p>
<p>NOTE: This is highly experimental, has only been tested on the Nightly builds, and probably will destroy your session. You&#39;ve been warned.</p>
<p>Tabs are considered inactive when they haven&#39;t been selected in longer than 5 minutes. To change that, set this pref to a value in milliseconds:</p>
<ul>
<li>extensions.dormancy.TabDormancyAgeMs</li>
</ul>
<p>Tabs are checked for inactivity every 5 minutes. To change this, set this pref to a value in milliseconds:</p>
<ul>
<li>extensions.dormancy.TabCheckIntervalMs</li>
</ul>
<p>Known bugs:</p>
<ul>
<li>Awesomebar entry for dormant tabs shows data URI</li>
<li>Sometimes dormant tabs have no title and no favicon
EXPERIMENTAL. MAY EAT YOUR SESSION OR DO OTHER BAD THINGS.</li>
</ul>
<p><a href="http://j.mp/oW3xQN">INSTALL</a></p>
<p><a href="http://j.mp/n82njh">Source code</a></p>
]]></description><link>/2011/09/dormancy-freeing-up-memory-from-unused-tabs/index.html</link><guid isPermaLink="true">/2011/09/dormancy-freeing-up-memory-from-unused-tabs/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[Memory]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 03 Sep 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Wallflower: Un-Socializing Your Web]]></title><description><![CDATA[<p>I was looking at about:memory and noticed entries for Facebook and Google+ URLs, even though I didn&#39;t have either open. I figured they were probably from the social buttonry that decorates the web these days. No big deal... except they were taking up a bunch of memory! The Facebook button was using over 20mb and the Google+ button was taking over 40mb!</p>
<p>I have never clicked either of these buttons.</p>
<p>So I wrote Wallflower, a simple Firefox add-on (restartless of course) that removes these buttons from any page your browse to, saving your precious memory, CPU and battery life for the content you actually want.</p>
<p><a href="http://j.mp/nLG8wX">Install Wallflower</a>.</p>
<p>View the <a href="https://github.com/autonome/Wallflower">source code on Github</a>.</p>
]]></description><link>/2011/08/wallflower-un-socializing-your-web/index.html</link><guid isPermaLink="true">/2011/08/wallflower-un-socializing-your-web/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Wed, 24 Aug 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Wallflower: Un-Socializing Your Web]]></title><description><![CDATA[<p>I was looking at about:memory and noticed entries for Facebook and Google+ URLs, even though I didn&#39;t have either open. I figured they were probably from the social buttonry that decorates the web these days. No big deal... except they were taking up a bunch of memory! The Facebook button was using over 20mb and the Google+ button was taking over 40mb!</p>
<p>I have never clicked either of these buttons.</p>
<p>So I wrote Wallflower, a simple Firefox add-on (restartless of course) that removes these buttons from any page your browse to, saving your precious memory, CPU and battery life for the content you actually want.</p>
<p><a href="http://j.mp/nLG8wX">Install Wallflower</a>.</p>
<p>View the <a href="https://github.com/autonome/Wallflower">source code on Github</a>.</p>
]]></description><link>/2011/08/wallflower-un-socializing-your-web/index.html</link><guid isPermaLink="true">/2011/08/wallflower-un-socializing-your-web/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Wed, 24 Aug 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Peek: Apps, App Tabs, and Context.]]></title><description><![CDATA[<p>The new app tab feature in Firefox is great. I use it a lot... which has starkly illustrated how apps and tabs have very different use-cases and usage patterns. Often I will check my Gmail app tab because I see the glowing notification that a new email has arrived, do something (or nothing), and then pop back to where I was browsing... in one of those 78 tabs I have open?!
The windowing model in operating systems allows me switch back and forth between contexts with ease. But app tabs do not:</p>
<ul>
<li>If I&#39;m using my Gmail app tab and I didn&#39;t open any links while there, I can still see the last tab I was at, and click on it. But I have to use the mouse if I want to get directly back there.</li>
<li>Out of sheer muscle memory and mouse-averseness, sometimes I can traverse tabs via the next/previous-tab keyboard shortcuts to get back to where I was. Sometimes it&#39;s a <em>lot</em> of tabs, so either I&#39;ll hold the arrow key down, speeding past the tab I wanted (and back and forth a few times), or I&#39;ll just hit the arrow key a bunch of times in quick succession. Both options are frustrating, slow and RSI-inducing.</li>
<li><p>Or I could expend mental energy to search in the awesomebar and switch to that tab, which often looks like this: &quot;hm, type &#39;bug&#39; and then try to remember some words in the bug summary, but those words match a bunch of other bugs, and i don&#39;t know the bug number, and also I&#39;m on an attachment page because I&#39;m reviewing a patch on the bug, so the summary won&#39;t be in the page title...&quot; and on and on. Now add the fact that switch-to-tab rarely even shows up in the awesomebar for me, and well, a generally high level of fail with this option.
Then there&#39;s link opening:</p>
</li>
<li><p>Links opened in app tabs are put at the beginning of your tabs, and the tab strip is animatedly scrolled there. Boom, instantly lost where I was before checking my email.</p>
</li>
<li>We tried an experiment where they open at the end of the set of open tabs. I found that to have serious &quot;out of sight, out of mind&quot; problems. That experiment was rolled back. And it doesn&#39;t necessarily solve the context problem anyway.</li>
<li>Both approaches cause excess amounts of whizzing animations, either when you want to &quot;go around the horn&quot; to get to the tabs you just opened from app tabs, or when you want to go to them and then get back to where you were.</li>
<li>There&#39;s no right answer! Sometimes I see a link to a recipe in my Seesmic app tab that I&#39;d like to open in that series of tabs related to food that I have open somewhere in the middle of my open tabs. The user is not in control of <em>where</em> these links are opened. I can&#39;t choose whether to open them at the beginning or end of the tab strip, or in a new tab group, or new window, etc. Part of me thinks that I actually might work best in a world where each app tab is bound to a single tab group, so that tab growth is bound to the source... but that&#39;s a vision for another day (and blog post and add-on).
So I&#39;ve made Peek, an add-on that&#39;s a hybrid solution: Instead of making you go to your app tabs, your app tabs will come to you. Peek allows you to open your app tabs in a floating panel that opens on top of wherever you are in your tabs. Links open to the right of whatever your current active tab is, and in the background, so that when you&#39;re finished peeking, you are exactly where you left off.</li>
</ul>
<p>To use Peek, first create some app tabs. Then you can peek at them using the keyboard shortcut ALT+SHIFT+1-9 where the number corresponds with the order your app tabs are in. To stop peeking, hit escape (or switch apps or anything else that takes focus away from the panel).</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/peek/">INSTALL</a>. Peek is a Jetpack add-on that does not require a restart of the browser. User beware: This is an experimental add-on - I&#39;ve been using it on Nightly builds, but haven&#39;t done much testing elsewhere.</p>
<p>Benefits:</p>
<ul>
<li>Interact with your apps, and when you&#39;re done, be exactly where you left off browsing.</li>
<li>Links are opened in the context of wherever you&#39;re peeking.
<a href="screen-shot-2011-08-19-at-1-46-45-pm.png"><img src="http://autonome.files.wordpress.com/2011/08/screen-shot-2011-08-19-at-1-46-45-pm.png" alt="" title="Screen shot 2011-08-19 at 1.46.45 PM"></a></li>
</ul>
]]></description><link>/2011/08/peek-apps-app-tabs-and-context/index.html</link><guid isPermaLink="true">/2011/08/peek-apps-app-tabs-and-context/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 20 Aug 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Peek: Apps, App Tabs, and Context.]]></title><description><![CDATA[<p>The new app tab feature in Firefox is great. I use it a lot... which has starkly illustrated how apps and tabs have very different use-cases and usage patterns. Often I will check my Gmail app tab because I see the glowing notification that a new email has arrived, do something (or nothing), and then pop back to where I was browsing... in one of those 78 tabs I have open?!
The windowing model in operating systems allows me switch back and forth between contexts with ease. But app tabs do not:</p>
<ul>
<li>If I&#39;m using my Gmail app tab and I didn&#39;t open any links while there, I can still see the last tab I was at, and click on it. But I have to use the mouse if I want to get directly back there.</li>
<li>Out of sheer muscle memory and mouse-averseness, sometimes I can traverse tabs via the next/previous-tab keyboard shortcuts to get back to where I was. Sometimes it&#39;s a <em>lot</em> of tabs, so either I&#39;ll hold the arrow key down, speeding past the tab I wanted (and back and forth a few times), or I&#39;ll just hit the arrow key a bunch of times in quick succession. Both options are frustrating, slow and RSI-inducing.</li>
<li><p>Or I could expend mental energy to search in the awesomebar and switch to that tab, which often looks like this: &quot;hm, type &#39;bug&#39; and then try to remember some words in the bug summary, but those words match a bunch of other bugs, and i don&#39;t know the bug number, and also I&#39;m on an attachment page because I&#39;m reviewing a patch on the bug, so the summary won&#39;t be in the page title...&quot; and on and on. Now add the fact that switch-to-tab rarely even shows up in the awesomebar for me, and well, a generally high level of fail with this option.
Then there&#39;s link opening:</p>
</li>
<li><p>Links opened in app tabs are put at the beginning of your tabs, and the tab strip is animatedly scrolled there. Boom, instantly lost where I was before checking my email.</p>
</li>
<li>We tried an experiment where they open at the end of the set of open tabs. I found that to have serious &quot;out of sight, out of mind&quot; problems. That experiment was rolled back. And it doesn&#39;t necessarily solve the context problem anyway.</li>
<li>Both approaches cause excess amounts of whizzing animations, either when you want to &quot;go around the horn&quot; to get to the tabs you just opened from app tabs, or when you want to go to them and then get back to where you were.</li>
<li>There&#39;s no right answer! Sometimes I see a link to a recipe in my Seesmic app tab that I&#39;d like to open in that series of tabs related to food that I have open somewhere in the middle of my open tabs. The user is not in control of <em>where</em> these links are opened. I can&#39;t choose whether to open them at the beginning or end of the tab strip, or in a new tab group, or new window, etc. Part of me thinks that I actually might work best in a world where each app tab is bound to a single tab group, so that tab growth is bound to the source... but that&#39;s a vision for another day (and blog post and add-on).
So I&#39;ve made Peek, an add-on that&#39;s a hybrid solution: Instead of making you go to your app tabs, your app tabs will come to you. Peek allows you to open your app tabs in a floating panel that opens on top of wherever you are in your tabs. Links open to the right of whatever your current active tab is, and in the background, so that when you&#39;re finished peeking, you are exactly where you left off.</li>
</ul>
<p>To use Peek, first create some app tabs. Then you can peek at them using the keyboard shortcut ALT+SHIFT+1-9 where the number corresponds with the order your app tabs are in. To stop peeking, hit escape (or switch apps or anything else that takes focus away from the panel).</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/peek/">INSTALL</a>. Peek is a Jetpack add-on that does not require a restart of the browser. User beware: This is an experimental add-on - I&#39;ve been using it on Nightly builds, but haven&#39;t done much testing elsewhere.</p>
<p>Benefits:</p>
<ul>
<li>Interact with your apps, and when you&#39;re done, be exactly where you left off browsing.</li>
<li>Links are opened in the context of wherever you&#39;re peeking.
<a href="screen-shot-2011-08-19-at-1-46-45-pm.png"><img src="http://autonome.files.wordpress.com/2011/08/screen-shot-2011-08-19-at-1-46-45-pm.png" alt="" title="Screen shot 2011-08-19 at 1.46.45 PM"></a></li>
</ul>
]]></description><link>/2011/08/peek-apps-app-tabs-and-context/index.html</link><guid isPermaLink="true">/2011/08/peek-apps-app-tabs-and-context/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 20 Aug 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox, Android and ARMing the World with the Open Web.]]></title><description><![CDATA[<p>I&#39;ve been meaning to blog about this for a while, and Singularity Hub&#39;s article about <a href="http://j.mp/oowRDz">the explosive sales of low-cost Android phones in Kenya</a> reminded me to actually do it.</p>
<p>I was lucky enough to attend a bunch of different tech events outside of the USA in the last year. I went to events in Thailand, Cambodia, Laos, Vietnam, Indonesia and Kenya. I also visited Malaysia and China, and briefly crossed the border into Burma.</p>
<p>Everywhere I went I found Android.</p>
<p>As the article mentioned, <a href="http://www.huaweidevice.com/resource/mini/201008174756/ideos/products_specifications.html">Huawei&#39;s IDEOS phones</a> are selling fast in Kenya at ~80USD. These were on sale in the airport in Nairobi, and in many of the mobile shops I went into. <a href="http://www.nexian.co.id/index.php/product.html">Nexian</a> is a manufacturer in Indonesia, with a bunch of Android phones aimed at the mid- to low-end market. In Thailand, HTC is the big Android purveyor (and always <em>one</em> Windows phone on offer!). Their low-budget phones in the US are the mid-range phones in Thailand, such as the Wildfire and Tattoo. There were a bunch of other brands and models, I really should&#39;ve taken pictures. The advertising was everywhere. Google was holding Android dev days in major cities. The presence was constant and sometimes unavoidable - like when I rode a tuk-tuk into Siem Reap from the airport and we drove under a Google/Android banner that crossed all 6 lanes of traffic.</p>
<p>Anyways, everywhere I went I was asked why Firefox wasn&#39;t in the Android Market, or if it was, people said that it wouldn&#39;t install, or crashed before starting up.</p>
<p>Well, the explanation is that not all Android devices are equal. The Android devices that are selling well in these countries are very low cost devices. They&#39;re selling in places where 40% of the population lives on less than 2USD per day (Kenya, according to that article), or where &gt;80% of the populace is not even online yet (less than 20% of Indonesia is online, according to Internetworldstats.com). The ARM CPUs that these Android phones have are not very powerful, and they usually have little memory. Often these devices are running 1.x versions of Android. Their screens are small and have the best resolution you could get in a phone in 2002.</p>
<p>But that&#39;s only part of the explanation. These phones all come with browsers! Why can&#39;t they install Firefox instead?</p>
<ul>
<li>Firefox on Android doesn&#39;t support the ARM CPUs commonly used in these phones.</li>
<li>Firefox is not realistically usable given the amount of memory many of these phones ship with.
There&#39;ve been bugs filed about supporting Android devices with weak CPUs, little memory and poor screen resolution, but no traction. The mobile team has explicitly not targeted these phones. Maybe this is because Firefox as it exists today is too far away from being able to run under these conditions. If that&#39;s the case, maybe we need to look at other options, like radically cutting down the feature set, even further than Fennec did.</li>
</ul>
<p>I don&#39;t think we can wait for decent hardware to become affordable in these markets. They are growing fast, and turning to the Android they can get, and taking the only Web they can get: The one they can afford. There&#39;s not much choice in that scenario, and choice is a key part of the Mozilla mission. When the other 80% of Indonesia comes online for the very first time, Mozilla and Firefox should be there, ready to provide that choice.</p>
]]></description><link>/2011/08/firefox-android-and-arming-the-world-with-the-open-web/index.html</link><guid isPermaLink="true">/2011/08/firefox-android-and-arming-the-world-with-the-open-web/index.html</guid><category><![CDATA[android]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Thu, 18 Aug 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox, Android and ARMing the World with the Open Web.]]></title><description><![CDATA[<p>I&#39;ve been meaning to blog about this for a while, and Singularity Hub&#39;s article about <a href="http://j.mp/oowRDz">the explosive sales of low-cost Android phones in Kenya</a> reminded me to actually do it.</p>
<p>I was lucky enough to attend a bunch of different tech events outside of the USA in the last year. I went to events in Thailand, Cambodia, Laos, Vietnam, Indonesia and Kenya. I also visited Malaysia and China, and briefly crossed the border into Burma.</p>
<p>Everywhere I went I found Android.</p>
<p>As the article mentioned, <a href="http://www.huaweidevice.com/resource/mini/201008174756/ideos/products_specifications.html">Huawei&#39;s IDEOS phones</a> are selling fast in Kenya at ~80USD. These were on sale in the airport in Nairobi, and in many of the mobile shops I went into. <a href="http://www.nexian.co.id/index.php/product.html">Nexian</a> is a manufacturer in Indonesia, with a bunch of Android phones aimed at the mid- to low-end market. In Thailand, HTC is the big Android purveyor (and always <em>one</em> Windows phone on offer!). Their low-budget phones in the US are the mid-range phones in Thailand, such as the Wildfire and Tattoo. There were a bunch of other brands and models, I really should&#39;ve taken pictures. The advertising was everywhere. Google was holding Android dev days in major cities. The presence was constant and sometimes unavoidable - like when I rode a tuk-tuk into Siem Reap from the airport and we drove under a Google/Android banner that crossed all 6 lanes of traffic.</p>
<p>Anyways, everywhere I went I was asked why Firefox wasn&#39;t in the Android Market, or if it was, people said that it wouldn&#39;t install, or crashed before starting up.</p>
<p>Well, the explanation is that not all Android devices are equal. The Android devices that are selling well in these countries are very low cost devices. They&#39;re selling in places where 40% of the population lives on less than 2USD per day (Kenya, according to that article), or where &gt;80% of the populace is not even online yet (less than 20% of Indonesia is online, according to Internetworldstats.com). The ARM CPUs that these Android phones have are not very powerful, and they usually have little memory. Often these devices are running 1.x versions of Android. Their screens are small and have the best resolution you could get in a phone in 2002.</p>
<p>But that&#39;s only part of the explanation. These phones all come with browsers! Why can&#39;t they install Firefox instead?</p>
<ul>
<li>Firefox on Android doesn&#39;t support the ARM CPUs commonly used in these phones.</li>
<li>Firefox is not realistically usable given the amount of memory many of these phones ship with.
There&#39;ve been bugs filed about supporting Android devices with weak CPUs, little memory and poor screen resolution, but no traction. The mobile team has explicitly not targeted these phones. Maybe this is because Firefox as it exists today is too far away from being able to run under these conditions. If that&#39;s the case, maybe we need to look at other options, like radically cutting down the feature set, even further than Fennec did.</li>
</ul>
<p>I don&#39;t think we can wait for decent hardware to become affordable in these markets. They are growing fast, and turning to the Android they can get, and taking the only Web they can get: The one they can afford. There&#39;s not much choice in that scenario, and choice is a key part of the Mozilla mission. When the other 80% of Indonesia comes online for the very first time, Mozilla and Firefox should be there, ready to provide that choice.</p>
]]></description><link>/2011/08/firefox-android-and-arming-the-world-with-the-open-web/index.html</link><guid isPermaLink="true">/2011/08/firefox-android-and-arming-the-world-with-the-open-web/index.html</guid><category><![CDATA[android]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Thu, 18 Aug 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Extensibly Awesome: A Jetpack API for the Firefox Location Bar]]></title><description><![CDATA[<p>I tweaked some of <a href="http://mozillalabs.com/prospector/2011/06/01/exploring-social-search-with-twitter-address-bar-search/">Mardak&#39;s code for the Twitter Add-on</a>, and created a Jetpack module that makes it terribly simple to write add-ons that extend the awesomebar with your own suggestions. As an example, here&#39;s an add-on that uses the Google Translate API to translate text into a specified language directly in the location bar. If you type in the keyword &#39;translate&#39;, followed by a language code and some text, it will show the translation in the awesomebar results:</p>
<p><a href="screen-shot-2011-06-09-at-3-36-53-am.png"><img src="http://autonome.files.wordpress.com/2011/06/screen-shot-2011-06-09-at-3-36-53-am.png" alt="Screenshot" title="Screenshot"></a></p>
<p>The code:</p>
<p><pre>require(&#39;awesomebar&#39;).add({
  keyword: &#39;translate&#39;,
  onSearch: function(query, suggest) {
    let lang = query.substring(0, query.indexOf(&#39; &#39;));
    let text = query.substring(query.indexOf(&#39; &#39;));
    if (lang.length == 2 &amp;&amp; text.length &gt; 2) {
      translate(lang, text, function(translatedText) {
        suggest({
          title: &#39;Translated text in &#39; + lang + &#39;: &#39; + translatedText,
          url: &#39;<a href="http://translate.google.com/?tl=">http://translate.google.com/?tl=</a>&#39; + lang +
               &#39;&amp;q=&#39; + encodeURIComponent(text),
        }, true);
      });
    }
  }
});</p>
<p>function translate(lang, text, callback) {
  require(&#39;request&#39;).Request({
    url: &#39;<a href="http://ajax.googleapis.com/ajax/services/language/translate">http://ajax.googleapis.com/ajax/services/language/translate</a>&#39;,
    content: {
      v: &#39;1.0&#39;,
      q: text,
      langpair: &#39;&#39;&#39; + lang
    },
    headers: {
      Referer: require(&#39;tabs&#39;).activeTab.location
    },
    onComplete: function() {
      callback(this.response.json.responseData.translatedText);
    }
  }).get();
}</pre>
The example needs niceties such as being able to write full language names, but you get the gist.</p>
<p>Here&#39;s the <a href="https://github.com/autonome/Jetpack-Modules/blob/master/awesomebar.js">awesomebar.js module</a>.</p>
<p>There&#39;s a bit of documentation in there. The code could use some cleanup, and could probably be much smaller if converted to use the internal Jetpack APIs for things like window-watching, etc.</p>
]]></description><link>/2011/06/extensibly-awesome/index.html</link><guid isPermaLink="true">/2011/06/extensibly-awesome/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Thu, 09 Jun 2011 00:00:00 GMT</pubDate></item></channel></rss>