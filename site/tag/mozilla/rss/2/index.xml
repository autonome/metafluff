<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[undefined - Dietrich Ayala]]></title><description><![CDATA[Internet freedom, the web and Mozilla.]]></description><link>/</link><generator>Ghost</generator><lastBuildDate>Wed, 12 Jul 2017 05:35:22 GMT</lastBuildDate><atom:link href="/tag/undefined/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Brussels: Warm Hospitality Amidst Inhuman Conditions]]></title><description><![CDATA[<p>We&#39;re at the end of our Performance work-week here in Brussels, and gearing up for a two-day orgy of European open-source culture at FOSDEM. I&#39;ve successfully acquired a cold (and hopefully not worse) due to the temperature being <a href="http://j.mp/xUY8FQ">consistently below freezing</a>.</p>
<p>However, the people here in Brussels have made up for their weather shortcomings by welcoming us wherever we go. Between the hackerspaces and co-working spaces, and the restaurants that happily take large groups with little or no notice, I&#39;m very impressed!</p>
<p><strong>HSBXL</strong></p>
<p><a href="http://www.flickr.com/photos/autonome/6800516745/" title="Performance work-week, Brussels 2012 by autonome, on Flickr"><img src="6800516745_02d5604af2.jpg" alt="Performance work-week, Brussels 2012"></a></p>
<p>The <a href="https://hackerspace.be/">hackerspace in Brussels</a> is located in Schaerbeek, a neighborhood to the north of the city center. The space used to be a vehicle repair garage for the city, but was given up for use by the geeks. They&#39;ve installed <a href="http://www.flickr.com/photos/autonome/6800517943/in/photostream" title="oscillosock!">serious hardware</a>, and have fully-equipped the place with <a href="http://www.flickr.com/photos/autonome/6800515533/in/photostream">everything needed for survival</a>. Thanks to Rafael and Patrick, for answering all our questions and helping us make <a href="http://en.wikipedia.org/wiki/Mate_%28beverage%29">mate</a> and to find food nearby. Lunch on the second day was described by Patrick as a &quot;little French place&quot;, but turned out to be a hall of worship dedicated to Tintin!</p>
<p><a href="http://www.flickr.com/photos/autonome/6800526749/" title="Performance work-week, Brussels 2012 by autonome, on Flickr"><img src="6800526749_c9d485f250.jpg" alt="Performance work-week, Brussels 2012"></a></p>
<p>Faubourg St Antoine is filled with Tintin toys, art and <a href="http://www.flickr.com/photos/autonome/6800526217/in/photostream/">knick-knacks</a>, including some <a href="http://www.flickr.com/photos/autonome/6800525605/in/photostream/">alternate</a> interpretations and even a clarification for <a href="http://www.flickr.com/photos/autonome/6800523647/in/photostream">something I&#39;d always wondered about</a>. Sadly, they&#39;ve been issued a legal notice from the current copyright (or EU equivalent) holders requiring them to remove all the Tintin materials from public display :(</p>
<p><strong>BetaGroup Coworking</strong></p>
<p><a href="http://www.flickr.com/photos/autonome/6800565749/" title="Performance work-week, Brussels 2012 by autonome, on Flickr"><img src="6800565749_99522d41d2.jpg" alt="Performance work-week, Brussels 2012"></a></p>
<p>Once the temperatures dropped far below freezing, we relocated to <a href="http://coworking.betagroup.be/">BetaGroup Coworking Brussels</a> in Etterbeek, to the southeast of the center. <a href="https://twitter.com/#!/ramonsuarez">Ramon Suarez</a>, the manager of the space was very accommodating, taking us on short notice. The wi-fi was blazing fast, the coffee was hot, and the ping-pong was a welcome break from heads-down hackery. The space itself was fantastic, with a great combination of quiet co-working areas, public spaces and private meeting offices. With tons of natural light, <a href="http://www.flickr.com/photos/autonome/6800566217/in/set-72157629096248615">steel bridges</a> and a meeting space on what looked like <a href="http://www.flickr.com/photos/autonome/6800567379/in/set-72157629096248615">a submarine conning tower</a>, it was truly impressive.</p>
<p>We had a wonderful lunch at a <a href="http://www.flickr.com/photos/autonome/6811646793/in/set-72157629096248615">very tidy restaurant</a> nearby.</p>
<p>Overall, it&#39;s been a fun and productive week, if a bit chilly. Like, really chilly. Ridiculously so. Why do people even inhabit places that get this cold? Honestly, wtf.</p>
]]></description><link>/2012/02/brussels-warm-hospitality-amidst-inhuman-conditions/index.html</link><guid isPermaLink="true">/2012/02/brussels-warm-hospitality-amidst-inhuman-conditions/index.html</guid><category><![CDATA[belgium]]></category><category><![CDATA[brussels]]></category><category><![CDATA[coworking]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[hackerspace]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Fri, 03 Feb 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Performance Work-week & FOSDEM]]></title><description><![CDATA[<p>The Performance team and some of the Firefox team are spending the week in Brussels, laying waste to some of the performance issues in the browser.</p>
<p><a href="http://www.flickr.com/photos/autonome/6788478845/" title="Performance work-week, Brussels 2012 by autonome, on Flickr"><img src="6788478845_05187d07a1.jpg" alt="Performance work-week, Brussels 2012"></a></p>
<p>Much thanks to our excellent hosts <a href="https://hackerspace.be/Main_Page">HSBXL, a hackerspace in central Brussels</a>. We&#39;re equipped with fast internet, lemon soda, <a href="http://en.wikipedia.org/wiki/Mate_%28beverage%29">mate</a>, techno music, and of course beer.</p>
<p>[youtube <a href="http://www.youtube.com/watch?v=AjHKGdzfe2s?rel=0">http://www.youtube.com/watch?v=AjHKGdzfe2s?rel=0</a>]</p>
<p>Following the work week is FOSDEM, Europe&#39;s biggest open source conference. If you&#39;re in town for FOSDEM and want to come hack with us, <a href="https://twitter.com/#!/dietrich">ping me on twitter</a> or join us in <a href="irc://irc.mozilla.org/?channel=perf">#perf on IRC</a>.</p>
<p>I&#39;ll be uploading pics to <a href="http://www.flickr.com/search/?q=perfworkweek2012&amp;m=tags">flickr with the tag &#39;perfworkweek2012&#39;</a>.</p>
]]></description><link>/2012/01/firefox-performance-work-week-fosdem/index.html</link><guid isPermaLink="true">/2012/01/firefox-performance-work-week-fosdem/index.html</guid><category><![CDATA[belgium]]></category><category><![CDATA[brussels]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[hackerspace]]></category><category><![CDATA[hackerspaces]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Mon, 30 Jan 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Performance Work-week & FOSDEM]]></title><description><![CDATA[<p>The Performance team and some of the Firefox team are spending the week in Brussels, laying waste to some of the performance issues in the browser.</p>
<p><a href="http://www.flickr.com/photos/autonome/6788478845/" title="Performance work-week, Brussels 2012 by autonome, on Flickr"><img src="6788478845_05187d07a1.jpg" alt="Performance work-week, Brussels 2012"></a></p>
<p>Much thanks to our excellent hosts <a href="https://hackerspace.be/Main_Page">HSBXL, a hackerspace in central Brussels</a>. We&#39;re equipped with fast internet, lemon soda, <a href="http://en.wikipedia.org/wiki/Mate_%28beverage%29">mate</a>, techno music, and of course beer.</p>
<p>[youtube <a href="http://www.youtube.com/watch?v=AjHKGdzfe2s?rel=0">http://www.youtube.com/watch?v=AjHKGdzfe2s?rel=0</a>]</p>
<p>Following the work week is FOSDEM, Europe&#39;s biggest open source conference. If you&#39;re in town for FOSDEM and want to come hack with us, <a href="https://twitter.com/#!/dietrich">ping me on twitter</a> or join us in <a href="irc://irc.mozilla.org/?channel=perf">#perf on IRC</a>.</p>
<p>I&#39;ll be uploading pics to <a href="http://www.flickr.com/search/?q=perfworkweek2012&amp;m=tags">flickr with the tag &#39;perfworkweek2012&#39;</a>.</p>
]]></description><link>/2012/01/firefox-performance-work-week-fosdem/index.html</link><guid isPermaLink="true">/2012/01/firefox-performance-work-week-fosdem/index.html</guid><category><![CDATA[belgium]]></category><category><![CDATA[brussels]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[hackerspace]]></category><category><![CDATA[hackerspaces]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Mon, 30 Jan 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Unbookmarking the Future of Browsing]]></title><description><![CDATA[<p>I am needy:</p>
<ul>
<li>I want to remember URLs. Bookmarking is too manual and akin to throwing URLs in the <a href="http://j.mp/wh2cXN">sarlacc pit</a>. The user-interface pieces around bookmarking have not changed in a decade. No, the awesomebar is not a good tool for this. I don&#39;t even come close to being able to recall what I want the awesomebar to recall. I need to be ambiently prompted in a way that is visual and has context.</li>
<li>I need to be able to focus on a given task, project or idea. A single sea of tabs doesn&#39;t help at all. I want blinders. I want an environment. Task immersion.</li>
<li>I need to be able to categorize URLs into groups, such that the whole group is easily accessible. Trees and menus can go to hell, along with the RSI, eye-strain and visual boredom they provide.</li>
<li>I need to be able to switch contexts quickly and easily. Eg: From bug triage to perf to dashboards to music, etc.</li>
<li><p>I don&#39;t want to leave the browser. Windows are super heavyweight feeling and come along with all kinds of operating system baggage: visual, interaction, performance, etc.
I realized recently that a pattern had emerged in my browser usage that meets a bunch of these needs:</p>
</li>
<li><p>I use Firefox&#39;s Panorama feature to manage groups of tabs. I have groups for a bunch of work areas, and for Food, Music, Design, JavaScript, Health, and many more. This provides task-specific browser contexts, as well as keyboard shortcuts for switching contexts with ease.</p>
</li>
<li>I set up Firefox to restore my session every time it starts. This way my groups persist, and all the URLs in each group are loaded with their cookies and other session data ready to go when I need them.</li>
<li>I have &quot;Don&#39;t load tabs until selected&quot; checked, so that Firefox does all this with as little memory as possible - the web pages in all the tabs in all the groups aren&#39;t loaded until I actually use them.</li>
<li><p>I restart the browser a couple of times per day to keep memory use slim, which in turn keeps the browser responsive. Restarting is super fast and responsive because I have &quot;Don&#39;t load tabs until selected&quot; (see previous point).
This is the happiest I&#39;ve been with any browser in years. However, there are still a bunch of pain points. I want SO much more.</p>
</li>
<li><p>I want to tag URLs without bookmarking them. The bookmark concept just gets in the way. It&#39;s an unnecessary unit of psychological weight. It&#39;s a vestigial metaphor of days gone by.</p>
</li>
<li>I want to open a tab group by typing the name of the group in the URL bar.</li>
<li>I want to add URLs to multiple groups easily, similar to tagging. I&#39;d like to do it via the keyboard.</li>
<li>I want to send the current tab to a different group (or groups) using only the keyboard.</li>
<li>I want app tabs that are specific to a given group, and some that are global.</li>
<li>I want to switch quickly from an app tab back to the last non-app tab I was at. Or be able to peek quickly at an app tab without losing my context in the current set of tabs.</li>
<li>I want to switch quickly back to the last tab I was at. (Eg: When I open a new tab, and get sent to the end of the current set of tabs). OR be able to have new tabs open immediately to the right of the current tab, with linked parentage.</li>
<li>I&#39;m tired of sites being browsers inside a browser. And I don&#39;t want &quot;site-specific&quot; browsers - I want a &quot;me-specific&quot; browser, for local or dynamic content.</li>
<li>Firefox creates the <tab> elements for hidden tabs when restoring the session. It would re/start even faster and use even less memory if the XUL elements for hidden tabs were not created until the group itself was opened.</li>
<li>As I work, memory use increases and responsiveness decreases, since I keep visiting more and more tabs. If I haven&#39;t visited a tab in a while, Firefox should unload it. If I haven&#39;t visited a group in a while, Firefox should completely unload the whole group, session content <em>and</em> XUL elements.</li>
<li>A downside of the &quot;Don&#39;t load tabs until selected&quot; option is that tab content is not ready and waiting when you select the tab. The web content has to load and the session data for the tab must be restored. Firefox should pre-load tabs that are adjacent to the active tab. This feature, combined with the dormant-izing of tabs described above would result in a decent balance of instant-gratification availability and responsiveness and resource frugality.
One idea I had was a merging of tagging and groups: The groups in Panorama would be comprised of the set of tags that exist. This would result in nice integration bits like search-by-tag in the awesomebar being equivalent to search-in-group. It also might mean that we&#39;ll need to make Panorama &quot;bigger&quot; - maybe allow it to be zoomed, or make it an infinite canvas.</li>
</ul>
<p>An idea for navigating dynamic content is to merge feeds and groups. Imagine you have a BBC group, which has the BBC feed as it&#39;s source. The set of &quot;tabs&quot; in that group are the items in the feed. If you open the group, all the URLs in the feed are loaded into tabs (but not <em>really</em> loaded if you restore-on-demand).</p>
<p>Anyways, it&#39;s interesting to think about how to prototype some of these ideas in an add-on or a collection of them. I&#39;m sure some of the items above already exist as add-ons.</p>
<p>I realize that I&#39;m not a &quot;typical user&quot;. However, after almost 6 years of browser-making, I&#39;m pretty damn sure that there is no such person. I do not believe that the one-size-fits-all browser is the future. When adding a feature or fixing a bug, we shouldn&#39;t have to choose between grandma and the geeks. In order to stay relevant in a highly-personalized future, we should strive to ensure that Firefox is pliable enough that we who make it are not restricted by it, and more importantly we must ensure that add-on developers are free to mash-up and remix and experiment the f*ck out of it.</p>
]]></description><link>/2012/01/unbookmarking-the-future-of-browsing/index.html</link><guid isPermaLink="true">/2012/01/unbookmarking-the-future-of-browsing/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[browsing]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[panorama]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Fri, 27 Jan 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Unbookmarking the Future of Browsing]]></title><description><![CDATA[<p>I am needy:</p>
<ul>
<li>I want to remember URLs. Bookmarking is too manual and akin to throwing URLs in the <a href="http://j.mp/wh2cXN">sarlacc pit</a>. The user-interface pieces around bookmarking have not changed in a decade. No, the awesomebar is not a good tool for this. I don&#39;t even come close to being able to recall what I want the awesomebar to recall. I need to be ambiently prompted in a way that is visual and has context.</li>
<li>I need to be able to focus on a given task, project or idea. A single sea of tabs doesn&#39;t help at all. I want blinders. I want an environment. Task immersion.</li>
<li>I need to be able to categorize URLs into groups, such that the whole group is easily accessible. Trees and menus can go to hell, along with the RSI, eye-strain and visual boredom they provide.</li>
<li>I need to be able to switch contexts quickly and easily. Eg: From bug triage to perf to dashboards to music, etc.</li>
<li><p>I don&#39;t want to leave the browser. Windows are super heavyweight feeling and come along with all kinds of operating system baggage: visual, interaction, performance, etc.
I realized recently that a pattern had emerged in my browser usage that meets a bunch of these needs:</p>
</li>
<li><p>I use Firefox&#39;s Panorama feature to manage groups of tabs. I have groups for a bunch of work areas, and for Food, Music, Design, JavaScript, Health, and many more. This provides task-specific browser contexts, as well as keyboard shortcuts for switching contexts with ease.</p>
</li>
<li>I set up Firefox to restore my session every time it starts. This way my groups persist, and all the URLs in each group are loaded with their cookies and other session data ready to go when I need them.</li>
<li>I have &quot;Don&#39;t load tabs until selected&quot; checked, so that Firefox does all this with as little memory as possible - the web pages in all the tabs in all the groups aren&#39;t loaded until I actually use them.</li>
<li><p>I restart the browser a couple of times per day to keep memory use slim, which in turn keeps the browser responsive. Restarting is super fast and responsive because I have &quot;Don&#39;t load tabs until selected&quot; (see previous point).
This is the happiest I&#39;ve been with any browser in years. However, there are still a bunch of pain points. I want SO much more.</p>
</li>
<li><p>I want to tag URLs without bookmarking them. The bookmark concept just gets in the way. It&#39;s an unnecessary unit of psychological weight. It&#39;s a vestigial metaphor of days gone by.</p>
</li>
<li>I want to open a tab group by typing the name of the group in the URL bar.</li>
<li>I want to add URLs to multiple groups easily, similar to tagging. I&#39;d like to do it via the keyboard.</li>
<li>I want to send the current tab to a different group (or groups) using only the keyboard.</li>
<li>I want app tabs that are specific to a given group, and some that are global.</li>
<li>I want to switch quickly from an app tab back to the last non-app tab I was at. Or be able to peek quickly at an app tab without losing my context in the current set of tabs.</li>
<li>I want to switch quickly back to the last tab I was at. (Eg: When I open a new tab, and get sent to the end of the current set of tabs). OR be able to have new tabs open immediately to the right of the current tab, with linked parentage.</li>
<li>I&#39;m tired of sites being browsers inside a browser. And I don&#39;t want &quot;site-specific&quot; browsers - I want a &quot;me-specific&quot; browser, for local or dynamic content.</li>
<li>Firefox creates the <tab> elements for hidden tabs when restoring the session. It would re/start even faster and use even less memory if the XUL elements for hidden tabs were not created until the group itself was opened.</li>
<li>As I work, memory use increases and responsiveness decreases, since I keep visiting more and more tabs. If I haven&#39;t visited a tab in a while, Firefox should unload it. If I haven&#39;t visited a group in a while, Firefox should completely unload the whole group, session content <em>and</em> XUL elements.</li>
<li>A downside of the &quot;Don&#39;t load tabs until selected&quot; option is that tab content is not ready and waiting when you select the tab. The web content has to load and the session data for the tab must be restored. Firefox should pre-load tabs that are adjacent to the active tab. This feature, combined with the dormant-izing of tabs described above would result in a decent balance of instant-gratification availability and responsiveness and resource frugality.
One idea I had was a merging of tagging and groups: The groups in Panorama would be comprised of the set of tags that exist. This would result in nice integration bits like search-by-tag in the awesomebar being equivalent to search-in-group. It also might mean that we&#39;ll need to make Panorama &quot;bigger&quot; - maybe allow it to be zoomed, or make it an infinite canvas.</li>
</ul>
<p>An idea for navigating dynamic content is to merge feeds and groups. Imagine you have a BBC group, which has the BBC feed as it&#39;s source. The set of &quot;tabs&quot; in that group are the items in the feed. If you open the group, all the URLs in the feed are loaded into tabs (but not <em>really</em> loaded if you restore-on-demand).</p>
<p>Anyways, it&#39;s interesting to think about how to prototype some of these ideas in an add-on or a collection of them. I&#39;m sure some of the items above already exist as add-ons.</p>
<p>I realize that I&#39;m not a &quot;typical user&quot;. However, after almost 6 years of browser-making, I&#39;m pretty damn sure that there is no such person. I do not believe that the one-size-fits-all browser is the future. When adding a feature or fixing a bug, we shouldn&#39;t have to choose between grandma and the geeks. In order to stay relevant in a highly-personalized future, we should strive to ensure that Firefox is pliable enough that we who make it are not restricted by it, and more importantly we must ensure that add-on developers are free to mash-up and remix and experiment the f*ck out of it.</p>
]]></description><link>/2012/01/unbookmarking-the-future-of-browsing/index.html</link><guid isPermaLink="true">/2012/01/unbookmarking-the-future-of-browsing/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[browsing]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[panorama]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Fri, 27 Jan 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Feature Development in 2012]]></title><description><![CDATA[<p>This year we started talking about ways to improve the methods in which develop Firefox features. This is a snapshot of where we&#39;re at, and what&#39;s coming next.</p>
<p>We began with some conversations about current problems regarding coordination, speed, contribution, regressions, ease of development: <a href="https://groups.google.com/forum/#!topic/mozilla.dev.planning/K1fr4VqtQTA">my initial dev.planning post</a>, <a href="http://incompleteness.me/mozblog/2011/09/16/how-to-eat-an-elephant/">Joe Walker&#39;s post &#39;How to Eat an Elephant&#39;</a>, <a href="http://autonome.wordpress.com/2011/10/25/building-firefox-in-the-post-browser-age/">my blog post</a>, <a href="https://groups.google.com/forum/#!topic/mozilla.dev.planning/oCMjhx5siEU/discussion">dev.planning add-on bundling post</a>.</p>
<p>There was general recognition that the Firefox development model is not agile nor flexible enough to meet the needs of our 2012 goals. We need to be able to ship features that are developed mostly outside of what&#39;s considered the &quot;core&quot; Firefox team. We need to better support the use of external code repositories and bug tracking systems. We need to support features written using the Add-on SDK, both inside and bundled with Firefox.</p>
<p>Here&#39;s where we&#39;re at:</p>
<ul>
<li>A group of people formed to start discussing how to make these things happen: the Jetpack Features group. We meet every other Friday (<a href="https://wiki.mozilla.org/Jetpack/Features">meeting details and notes</a>).</li>
<li>We have a project branch (Cedar) where we can experiment and do performance testing.</li>
<li>We corralled the Firefox and Toolkit module owners and the leads of the SDK project in a room to orchestrate the mechanics of landing the SDK inside Firefox itself (<a href="https://etherpad.mozilla.org/jetpack-in-firefox">notes</a>).</li>
<li>L10n: The Jetpack team are hard at work on closing this gap with both <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=691782">localized strings in script</a> and <a href="https://github.com/mozilla/addon-sdk/wiki/HTML-Page-Localization">localization of HTML content inside add-ons</a>.</li>
<li>Performance: <a href="http://blog.mozilla.com/addons/2011/12/12/sdk-1-3-performance-impact/">Jeff Griffiths blogged recently</a> about the performance impact of the core SDK runtime on startup time. More performance tests are coming.</li>
<li>Feature bundling: The BrowserID feature will likely ship in Firefox as a bundled add-on. There are still open questions though: Is it uninstallable? Does it even show up in the Add-ons Manager? Can it upgrade outside of the Firefox dev cycle? More work to do here.</li>
<li><p>Automation: We have the Jetpack unit tests being run with every Mozilla-central check-in (<a href="http://tbpl.mozilla.org/?tree=Firefox&amp;noignore=1">though hidden by default currently</a>). We have the SDK unit tests running on every SDK check-in for both Nightly and Aurora (<a href="https://tbpl.mozilla.org/?tree=Jetpack&amp;usetinderbox=1">tree</a>). We still need the Mozilla-central unit tests run on every SDK check-in (that&#39;ll come with integrating the SDK into Firefox), and <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=702684">performance tests run for Mozilla-central and SDK check-ins</a>.
What&#39;s coming up in 2012:</p>
</li>
<li><p>Completing the picture of addon-as-feature integration into the Moz-ecosystem: l10n, performance and unit test automation.</p>
</li>
<li>Ship BrowserID as a bundled add-on.</li>
<li>Ship the SDK inside Firefox (the relevant parts, anyway).</li>
<li>Ship Web Apps as a bundled add-on, if it makes sense to do so.</li>
</ul>
]]></description><link>/2011/12/firefox-feature-development-in-2012/index.html</link><guid isPermaLink="true">/2011/12/firefox-feature-development-in-2012/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Fri, 23 Dec 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Resume review.]]></title><description><![CDATA[<p>A friend recently asked me to take a look at his resume. After reading countless resumes and doing hundreds of interviews for Mozilla over the last 5+ years (whoa, almost 6 now!), a bunch of stuff came jumbling out. With his permission, I&#39;ve copied the feedback here. Maybe it&#39;ll be of use to someone looking for a manager&#39;s eye on their resume. Most of the comments make sense on their own, so I didn&#39;t copy the resume itself here.</p>
<p><strong>Hey!</strong> Overall, looks good - you look like a solid candidate for a Java programming gig, with some potential for leadership, but not interested in it. Probably a senior coding member on a team (given the # of years experience) or a lone-wolf programmer that a manager could hand a project off to and expect you to run with it.</p>
<p>A couple of thoughts below with my critical hat on, ranging from grammar to technical. Please take with many grains of salt - obviously I&#39;m not representative of all hiring managers. Also, I didn&#39;t have the context about whether this is tailored for a specific position, or if you are just getting ready to hit the market. Is the resume tailored for your ideal job, or the job you&#39;d settle for? Hard to evaluate without that context.</p>
<ul>
<li>My biggest criticism is that your personality doesn&#39;t come through, only your technical skills. Everyone has a list of current/former employers, a list of acronyms, and <em>some</em> have a list of side projects (you get points for that in my book). The summary is your first chance to personalize what is otherwise an abstract description of a skill set, so take advantage of it. For example, you could start with &quot;I am a lead developer&quot; instead of &quot;Lead developer&quot;. Honestly, do you really talk in robot language like that in real life? No. Would you want to work with someone that did? Probably not. So, look for any opportunity to be more than just a developer of code.</li>
<li>Clarify if you&#39;re looking to lead or not, or even open to it. For me, this will contextualize my technical assessment of a candidate. Are you interested in project management? Are you interested in people management? Your resume currently says no, that you only want to code, but can work with non-programmers as necessary.</li>
<li>&quot;My main focuses are...&quot; - is both redundant (focus implies main-ness) and misapplied (focus shouldn&#39;t ever be used in the plural, by definition, IMO). Could say something like &quot;My core responsibilities are...&quot;, etc. You use focus later in a similar way in the Objective section: &quot;expand professional focus&quot; to include some other languages. That&#39;s the opposite of focusing :D</li>
<li>I&#39;d take &quot;SOAP/RESTful&quot; out of the summary, is overly specific, not necessary.</li>
<li>&quot;often responsible&quot; - Nah, you <em>are</em> responsible for that stuff. No need to lessen your impact with qualifying adjectives, especially in your resume of all places.</li>
<li>The Objective section seems to say that you want more variety in your work than you currently have, and that you&#39;d like to learn a few specific programming languages. Is that about right? It sounds like you&#39;re bored. That isn&#39;t bad, but that&#39;s the impression I get. Again, what to put here really depends on what your actual objective is. Is it to get a job writing re-usable Java libs for web front-ends? Or a job writing Python scripts against big data-sets? You should decide that up front, and be as clear as possible about it. If you need two resumes, so be it.</li>
<li>The bits about the actual work you did are great. Instead of just listing the thing, you explain the impact that the thing had, the long term result for the business, etc.</li>
<li>If you have degrees from those college years, note them. The multiple year sequences you were at Acme College don&#39;t provide value, could just pick one or aggregate into one period where it makes sense.</li>
<li><p>Needs a spell-check and grammar pass (eg: devloping, importanly, colloborating)
Final thought: What questions would I ask you after reading this resume, when we did a phone screen? What are things not called out explicitly in a resume, but are part of an experienced developer&#39;s toolbox... IOW, the stuff that shows you know not only how to write code, but to <em>ship</em> software.</p>
</li>
<li><p>I&#39;d probably ask a couple of technical questions of medium difficulty, just to confirm that you can talk comfortably at the level of technical knowledge described in the resume.</p>
</li>
<li>I&#39;d dig into problem scenarios like the hardest problem you had to solve, both architectural and bug-wise. What tools/patterns you used, etc.</li>
<li>I&#39;d ask about performance problems - triaging them, debugging them, what tools for profiling, potential bottlenecks, etc.</li>
<li>I&#39;d ask about your testing and validation approaches, what unit test toolkits you&#39;ve used, what automation you&#39;ve written.</li>
<li>Would ask you to describe your launch processes - things like staging servers, failover scenarios, backups, etc.</li>
</ul>
]]></description><link>/2011/12/resume-review/index.html</link><guid isPermaLink="true">/2011/12/resume-review/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Wed, 21 Dec 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building Firefox in the Post-Browser Age]]></title><description><![CDATA[<p>Ok, so maybe we aren&#39;t in the post-browser age <em>yet</em>. But we&#39;re getting there, and quickly. Most of the &quot;apps&quot; I use on my phone are useless without an always-on data connection, and they communicate with their respective motherships via HTTP. We&#39;re staring down a near-future with multiple Web-stack operating systems for both desktop and portable devices. We have server-side application platforms that look startlingly like pieces of a traditional Web client.</p>
<p>All of those places are the Web, so that&#39;s where Mozilla has got to be, when and if it&#39;s possible to do so. And between desktop Firefox, mobile Firefox, Chromeless, B2G, Pancake, Open Web Apps and the various Firefox features developed by the Labs and the Services groups, we&#39;ve got a lot of application logic that needs to exist in various forms across those disparate environments.</p>
<p>Up until recently, even including most of the mobile efforts to date, we&#39;ve had a pretty narrow idea of what constitutes Firefox: Mozilla&#39;s browser application with a front-end built in XUL, and rendering content using Gecko, stored entirely in a single source repository.</p>
<p>This narrow view is insufficient given the needs of internet users and the plans we have to serve those needs in the immediate future. This has been starkly illustrated by the recent move to a native UI for mobile Firefox, projects like Pancake, and the expansion of the development of Firefox features by groups outside of the core team.</p>
<p>A few months ago I dumped a couple of thoughts into <a href="https://groups.google.com/forum/#!msg/mozilla.dev.planning/K1fr4VqtQTA/h_orDOFqQKMJ">a thread on the mozilla.dev.planning newsgroup</a> about these things. More than anything, that thread showed me that the broad spectrum of activity in Mozilla today makes our narrow view of Firefox a huge barrier to future success. Some people didn&#39;t agree that there was a problem at all. Some people railed against Jetpack or Github, while admitting they&#39;d never used either. Some people agreed that developing Firefox is slow and fragile, and pointed at the relative historical success of that approach. Disturbingly, I got a bunch of private emails thanking me for starting the conversation... what does <em>that</em> mean?! Overall though, there was a lot of agreement on this point: We need more people to be able to work on Firefox faster, and in a more heterogeneous environment.</p>
<p>There&#39;s a bunch of work towards that end going on right now, both in Firefox team itself and in Mozilla generally, around lowering the barriers to contribution. Specific to Firefox core development though, one experiment in alternate approaches is the attempt to ship the BrowserID feature as a Jetpack-based add-on that is developed on Github and bundled with Firefox. There are a lot of moving parts, but the exercise is helping us figure out the up- and downsides to building features as add-ons, as well as providing performance data about the Add-on SDK. Maybe it&#39;ll work, maybe we&#39;ll have to re-route and patch it against the core. Maybe we&#39;ll land somewhere in-between.</p>
<p>Regardless of that experiment&#39;s outcome, I think we need to be experimenting hard with how we develop Firefox, and asking questions about the longer-term development landscape:</p>
<ul>
<li>Code changes currently have non-deterministic effects in the Firefox ecosystem. We have a jumble of services that stagger into existence at startup, and then race for the exit at shutdown, beating up the file-system at both ends of the application lifecycle. &quot;Async&quot; is a pattern, not a system - without a system, making a bunch of things asynchronous means that the application&#39;s behavior as a whole is generally less predictable. Is there a more systematic way that we can manage the loading and unloading of core browser services?</li>
<li>Calcification: Check out the <a href="https://wiki.mozilla.org/Firefox/Cleanup">&quot;cleanup page&quot;</a>. There are long-despised-and-untouched pieces of our core infrastructure, such as URL classifier, importers, autocomplete, and parts of Places. Why is it so hard to change these? What are the barriers to making them better?</li>
<li>Modularity: Cu.import is great in that it provides some of the benefits that we used XPCOM JS services for, but without the XPCOM. But are we using it enough? Jetpack development puts much more emphasis on modularity via a core built on CommonJS, and I&#39;ve found it to make browser features written in Jetpack far easier to follow, debug, and contribute to. Maybe we should be putting code into modules where we&#39;d normally add it to browser.js, or XBL widgets moreso than we are now? This could reduce our dependence on the XUL window mega-scope that we get in browser.js, which I&#39;d argue leads to code that is easier to developer, debug, test and maintain.</li>
<li>Abstracting the application logic away from XUL/XPCOM where possible, allowing for more portable code. This doesn&#39;t make sense in a lot of places in the front-end, but in others such as sync or expiration policies or tab grouping algorithms or frecency generation, it might. These are things which could be useful across a number of different application contexts.
So where from here? There&#39;s general agreement that the Add-on SDK needs to ship in the browser. This might help address some of the questions above. However, it won&#39;t immediately help us share code with other Firefoxes or Mozilla projects, or make core development inherently less-fragile or our application behavior any more deterministic. And there are tools like Cu.import, which we have now, and Harmony modules, which we might have soon (can we use those in chrome?!) that could help with the modularity part.</li>
</ul>
<p>But only some of this is about the technology - other parts are social. As I said above, some people do not agree that developing Firefox is slow and fraught with peril. Is that plain ol&#39; resistance to change, or just the lack of a clear alternative? And maybe we code reviewers should be more forward-looking, demanding larger refactorings instead of non-invasive surgeries. But that&#39;s challenging when you&#39;re constrained for time, or the regression cost of refactoring is so high that you become risk averse.</p>
<p>I&#39;d love to hear your thoughts on the future of Firefox application development - especially the core Firefox team, and the people working on Firefox features in other groups or via add-ons. Myk Melez has been corralling a group to talk about feature development with the Add-on SDK specifically, but it quickly spreads into these broader issues. He&#39;s starting a list for it, but until then there are regular meetings, <a href="http://j.mp/uVeOiT">details available in his dev.planning post</a>.</p>
]]></description><link>/2011/10/building-firefox-in-the-post-browser-age/index.html</link><guid isPermaLink="true">/2011/10/building-firefox-in-the-post-browser-age/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Wed, 26 Oct 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building Firefox in the Post-Browser Age]]></title><description><![CDATA[<p>Ok, so maybe we aren&#39;t in the post-browser age <em>yet</em>. But we&#39;re getting there, and quickly. Most of the &quot;apps&quot; I use on my phone are useless without an always-on data connection, and they communicate with their respective motherships via HTTP. We&#39;re staring down a near-future with multiple Web-stack operating systems for both desktop and portable devices. We have server-side application platforms that look startlingly like pieces of a traditional Web client.</p>
<p>All of those places are the Web, so that&#39;s where Mozilla has got to be, when and if it&#39;s possible to do so. And between desktop Firefox, mobile Firefox, Chromeless, B2G, Pancake, Open Web Apps and the various Firefox features developed by the Labs and the Services groups, we&#39;ve got a lot of application logic that needs to exist in various forms across those disparate environments.</p>
<p>Up until recently, even including most of the mobile efforts to date, we&#39;ve had a pretty narrow idea of what constitutes Firefox: Mozilla&#39;s browser application with a front-end built in XUL, and rendering content using Gecko, stored entirely in a single source repository.</p>
<p>This narrow view is insufficient given the needs of internet users and the plans we have to serve those needs in the immediate future. This has been starkly illustrated by the recent move to a native UI for mobile Firefox, projects like Pancake, and the expansion of the development of Firefox features by groups outside of the core team.</p>
<p>A few months ago I dumped a couple of thoughts into <a href="https://groups.google.com/forum/#!msg/mozilla.dev.planning/K1fr4VqtQTA/h_orDOFqQKMJ">a thread on the mozilla.dev.planning newsgroup</a> about these things. More than anything, that thread showed me that the broad spectrum of activity in Mozilla today makes our narrow view of Firefox a huge barrier to future success. Some people didn&#39;t agree that there was a problem at all. Some people railed against Jetpack or Github, while admitting they&#39;d never used either. Some people agreed that developing Firefox is slow and fragile, and pointed at the relative historical success of that approach. Disturbingly, I got a bunch of private emails thanking me for starting the conversation... what does <em>that</em> mean?! Overall though, there was a lot of agreement on this point: We need more people to be able to work on Firefox faster, and in a more heterogeneous environment.</p>
<p>There&#39;s a bunch of work towards that end going on right now, both in Firefox team itself and in Mozilla generally, around lowering the barriers to contribution. Specific to Firefox core development though, one experiment in alternate approaches is the attempt to ship the BrowserID feature as a Jetpack-based add-on that is developed on Github and bundled with Firefox. There are a lot of moving parts, but the exercise is helping us figure out the up- and downsides to building features as add-ons, as well as providing performance data about the Add-on SDK. Maybe it&#39;ll work, maybe we&#39;ll have to re-route and patch it against the core. Maybe we&#39;ll land somewhere in-between.</p>
<p>Regardless of that experiment&#39;s outcome, I think we need to be experimenting hard with how we develop Firefox, and asking questions about the longer-term development landscape:</p>
<ul>
<li>Code changes currently have non-deterministic effects in the Firefox ecosystem. We have a jumble of services that stagger into existence at startup, and then race for the exit at shutdown, beating up the file-system at both ends of the application lifecycle. &quot;Async&quot; is a pattern, not a system - without a system, making a bunch of things asynchronous means that the application&#39;s behavior as a whole is generally less predictable. Is there a more systematic way that we can manage the loading and unloading of core browser services?</li>
<li>Calcification: Check out the <a href="https://wiki.mozilla.org/Firefox/Cleanup">&quot;cleanup page&quot;</a>. There are long-despised-and-untouched pieces of our core infrastructure, such as URL classifier, importers, autocomplete, and parts of Places. Why is it so hard to change these? What are the barriers to making them better?</li>
<li>Modularity: Cu.import is great in that it provides some of the benefits that we used XPCOM JS services for, but without the XPCOM. But are we using it enough? Jetpack development puts much more emphasis on modularity via a core built on CommonJS, and I&#39;ve found it to make browser features written in Jetpack far easier to follow, debug, and contribute to. Maybe we should be putting code into modules where we&#39;d normally add it to browser.js, or XBL widgets moreso than we are now? This could reduce our dependence on the XUL window mega-scope that we get in browser.js, which I&#39;d argue leads to code that is easier to developer, debug, test and maintain.</li>
<li>Abstracting the application logic away from XUL/XPCOM where possible, allowing for more portable code. This doesn&#39;t make sense in a lot of places in the front-end, but in others such as sync or expiration policies or tab grouping algorithms or frecency generation, it might. These are things which could be useful across a number of different application contexts.
So where from here? There&#39;s general agreement that the Add-on SDK needs to ship in the browser. This might help address some of the questions above. However, it won&#39;t immediately help us share code with other Firefoxes or Mozilla projects, or make core development inherently less-fragile or our application behavior any more deterministic. And there are tools like Cu.import, which we have now, and Harmony modules, which we might have soon (can we use those in chrome?!) that could help with the modularity part.</li>
</ul>
<p>But only some of this is about the technology - other parts are social. As I said above, some people do not agree that developing Firefox is slow and fraught with peril. Is that plain ol&#39; resistance to change, or just the lack of a clear alternative? And maybe we code reviewers should be more forward-looking, demanding larger refactorings instead of non-invasive surgeries. But that&#39;s challenging when you&#39;re constrained for time, or the regression cost of refactoring is so high that you become risk averse.</p>
<p>I&#39;d love to hear your thoughts on the future of Firefox application development - especially the core Firefox team, and the people working on Firefox features in other groups or via add-ons. Myk Melez has been corralling a group to talk about feature development with the Add-on SDK specifically, but it quickly spreads into these broader issues. He&#39;s starting a list for it, but until then there are regular meetings, <a href="http://j.mp/uVeOiT">details available in his dev.planning post</a>.</p>
]]></description><link>/2011/10/building-firefox-in-the-post-browser-age/index.html</link><guid isPermaLink="true">/2011/10/building-firefox-in-the-post-browser-age/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Wed, 26 Oct 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[The Mozilla Open Data Project]]></title><description><![CDATA[<p>The Mozilla Open Data Project is an index of all of the open APIs and data-sources available in the Mozilla project.</p>
<p>It&#39;s also something that does not exist yet!</p>
<p>Or maybe it does, but I couldn&#39;t find it...</p>
<p>Anyways, we&#39;ve got massive amounts of data available throughout the project, from check-in logs to performance data to bugzilla APIs. However, there&#39;s no central location that lists all of the sources that currently exist. This also means that&#39;s it&#39;s not easy to scan and see what&#39;s not available that should be.</p>
<p>Maybe this is something we should list on a public index that already exists, like <a href="http://www.programmableweb.com/">Programmable Web</a>.</p>
<p>For now, I started a list here: <a href="https://wiki.mozilla.org/Modp">https://wiki.mozilla.org/Modp</a></p>
<p>Please add any sources of data or public APIs that you know of to that list, or here in the comments and I&#39;ll add them for you.</p>
<p>UPDATE: To clarify, this is different than the community metrics work being done by the Metrics team. But we&#39;re talking about having this information available in the metrics portal at some point in the future, likely driven off a publicly editable source.</p>
]]></description><link>/2011/10/the-mozilla-open-data-project/index.html</link><guid isPermaLink="true">/2011/10/the-mozilla-open-data-project/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Thu, 13 Oct 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[The Mozilla Open Data Project]]></title><description><![CDATA[<p>The Mozilla Open Data Project is an index of all of the open APIs and data-sources available in the Mozilla project.</p>
<p>It&#39;s also something that does not exist yet!</p>
<p>Or maybe it does, but I couldn&#39;t find it...</p>
<p>Anyways, we&#39;ve got massive amounts of data available throughout the project, from check-in logs to performance data to bugzilla APIs. However, there&#39;s no central location that lists all of the sources that currently exist. This also means that&#39;s it&#39;s not easy to scan and see what&#39;s not available that should be.</p>
<p>Maybe this is something we should list on a public index that already exists, like <a href="http://www.programmableweb.com/">Programmable Web</a>.</p>
<p>For now, I started a list here: <a href="https://wiki.mozilla.org/Modp">https://wiki.mozilla.org/Modp</a></p>
<p>Please add any sources of data or public APIs that you know of to that list, or here in the comments and I&#39;ll add them for you.</p>
<p>UPDATE: To clarify, this is different than the community metrics work being done by the Metrics team. But we&#39;re talking about having this information available in the metrics portal at some point in the future, likely driven off a publicly editable source.</p>
]]></description><link>/2011/10/the-mozilla-open-data-project/index.html</link><guid isPermaLink="true">/2011/10/the-mozilla-open-data-project/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Thu, 13 Oct 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Visualizing web page memory use in Firefox]]></title><description><![CDATA[<p>I remixed about:memory using <a href="http://mbostock.github.com/d3/">D3</a> to make a treemap visualization of how loaded URLs are using memory in Firefox.</p>
<p>Load it by clicking the widget on the add-on bar, or Cmd/Ctrl+Shift+Y</p>
<p>This visualization focuses on which web pages are using large amounts of memory - this is not a complete accounting of all memory being used. This doesn&#39;t yet show how much is being used by some of the Firefox internals.</p>
<p>Add-on installation does not require a restart. Only tested on Nightly builds.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/aboutmemory-treemap-visuali/">Install</a></p>
<p><a href="https://github.com/autonome/Memtreemap">Source code</a></p>
<p><a href="memtreemap.png"><img src="http://autonome.files.wordpress.com/2011/09/memtreemap.png" alt="" title="memtreemap.png"></a></p>
]]></description><link>/2011/09/visualizing-web-page-memory-use-in-firefox/index.html</link><guid isPermaLink="true">/2011/09/visualizing-web-page-memory-use-in-firefox/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 10 Sep 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Visualizing web page memory use in Firefox]]></title><description><![CDATA[<p>I remixed about:memory using <a href="http://mbostock.github.com/d3/">D3</a> to make a treemap visualization of how loaded URLs are using memory in Firefox.</p>
<p>Load it by clicking the widget on the add-on bar, or Cmd/Ctrl+Shift+Y</p>
<p>This visualization focuses on which web pages are using large amounts of memory - this is not a complete accounting of all memory being used. This doesn&#39;t yet show how much is being used by some of the Firefox internals.</p>
<p>Add-on installation does not require a restart. Only tested on Nightly builds.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/aboutmemory-treemap-visuali/">Install</a></p>
<p><a href="https://github.com/autonome/Memtreemap">Source code</a></p>
<p><a href="memtreemap.png"><img src="http://autonome.files.wordpress.com/2011/09/memtreemap.png" alt="" title="memtreemap.png"></a></p>
]]></description><link>/2011/09/visualizing-web-page-memory-use-in-firefox/index.html</link><guid isPermaLink="true">/2011/09/visualizing-web-page-memory-use-in-firefox/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 10 Sep 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Dormancy: Freeing up memory from unused tabs]]></title><description><![CDATA[<p>Dormancy &#39;retires&#39; tabs that have gone unused for a while, freeing up that memory. It then restores the tabs to life when accessed.</p>
<p>While Firefox 9 adds restore-on-demand for users that restore their session by default, many users will never benefit from it. This add-on targets users who don&#39;t restore session, but do have long-running instances of Firefox and many tabs. This might land as a core feature in Firefox 9 (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=675539">https://bugzilla.mozilla.org/show_bug.cgi?id=675539</a>).</p>
<p>NOTE: This is highly experimental, has only been tested on the Nightly builds, and probably will destroy your session. You&#39;ve been warned.</p>
<p>Tabs are considered inactive when they haven&#39;t been selected in longer than 5 minutes. To change that, set this pref to a value in milliseconds:</p>
<ul>
<li>extensions.dormancy.TabDormancyAgeMs</li>
</ul>
<p>Tabs are checked for inactivity every 5 minutes. To change this, set this pref to a value in milliseconds:</p>
<ul>
<li>extensions.dormancy.TabCheckIntervalMs</li>
</ul>
<p>Known bugs:</p>
<ul>
<li>Awesomebar entry for dormant tabs shows data URI</li>
<li>Sometimes dormant tabs have no title and no favicon
EXPERIMENTAL. MAY EAT YOUR SESSION OR DO OTHER BAD THINGS.</li>
</ul>
<p><a href="http://j.mp/oW3xQN">INSTALL</a></p>
<p><a href="http://j.mp/n82njh">Source code</a></p>
]]></description><link>/2011/09/dormancy-freeing-up-memory-from-unused-tabs/index.html</link><guid isPermaLink="true">/2011/09/dormancy-freeing-up-memory-from-unused-tabs/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[Memory]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 03 Sep 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Dormancy: Freeing up memory from unused tabs]]></title><description><![CDATA[<p>Dormancy &#39;retires&#39; tabs that have gone unused for a while, freeing up that memory. It then restores the tabs to life when accessed.</p>
<p>While Firefox 9 adds restore-on-demand for users that restore their session by default, many users will never benefit from it. This add-on targets users who don&#39;t restore session, but do have long-running instances of Firefox and many tabs. This might land as a core feature in Firefox 9 (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=675539">https://bugzilla.mozilla.org/show_bug.cgi?id=675539</a>).</p>
<p>NOTE: This is highly experimental, has only been tested on the Nightly builds, and probably will destroy your session. You&#39;ve been warned.</p>
<p>Tabs are considered inactive when they haven&#39;t been selected in longer than 5 minutes. To change that, set this pref to a value in milliseconds:</p>
<ul>
<li>extensions.dormancy.TabDormancyAgeMs</li>
</ul>
<p>Tabs are checked for inactivity every 5 minutes. To change this, set this pref to a value in milliseconds:</p>
<ul>
<li>extensions.dormancy.TabCheckIntervalMs</li>
</ul>
<p>Known bugs:</p>
<ul>
<li>Awesomebar entry for dormant tabs shows data URI</li>
<li>Sometimes dormant tabs have no title and no favicon
EXPERIMENTAL. MAY EAT YOUR SESSION OR DO OTHER BAD THINGS.</li>
</ul>
<p><a href="http://j.mp/oW3xQN">INSTALL</a></p>
<p><a href="http://j.mp/n82njh">Source code</a></p>
]]></description><link>/2011/09/dormancy-freeing-up-memory-from-unused-tabs/index.html</link><guid isPermaLink="true">/2011/09/dormancy-freeing-up-memory-from-unused-tabs/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[Memory]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 03 Sep 2011 00:00:00 GMT</pubDate></item></channel></rss>