<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[undefined - Dietrich Ayala]]></title><description><![CDATA[Internet freedom, the web and Mozilla.]]></description><link>/</link><generator>Ghost</generator><lastBuildDate>Thu, 20 Jul 2017 12:11:34 GMT</lastBuildDate><atom:link href="/tag/undefined/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Unbookmarking the Future of Browsing]]></title><description><![CDATA[<p>I am needy:</p>
<ul>
<li>I want to remember URLs. Bookmarking is too manual and akin to throwing URLs in the <a href="http://j.mp/wh2cXN">sarlacc pit</a>. The user-interface pieces around bookmarking have not changed in a decade. No, the awesomebar is not a good tool for this. I don&#39;t even come close to being able to recall what I want the awesomebar to recall. I need to be ambiently prompted in a way that is visual and has context.</li>
<li>I need to be able to focus on a given task, project or idea. A single sea of tabs doesn&#39;t help at all. I want blinders. I want an environment. Task immersion.</li>
<li>I need to be able to categorize URLs into groups, such that the whole group is easily accessible. Trees and menus can go to hell, along with the RSI, eye-strain and visual boredom they provide.</li>
<li>I need to be able to switch contexts quickly and easily. Eg: From bug triage to perf to dashboards to music, etc.</li>
<li><p>I don&#39;t want to leave the browser. Windows are super heavyweight feeling and come along with all kinds of operating system baggage: visual, interaction, performance, etc.
I realized recently that a pattern had emerged in my browser usage that meets a bunch of these needs:</p>
</li>
<li><p>I use Firefox&#39;s Panorama feature to manage groups of tabs. I have groups for a bunch of work areas, and for Food, Music, Design, JavaScript, Health, and many more. This provides task-specific browser contexts, as well as keyboard shortcuts for switching contexts with ease.</p>
</li>
<li>I set up Firefox to restore my session every time it starts. This way my groups persist, and all the URLs in each group are loaded with their cookies and other session data ready to go when I need them.</li>
<li>I have &quot;Don&#39;t load tabs until selected&quot; checked, so that Firefox does all this with as little memory as possible - the web pages in all the tabs in all the groups aren&#39;t loaded until I actually use them.</li>
<li><p>I restart the browser a couple of times per day to keep memory use slim, which in turn keeps the browser responsive. Restarting is super fast and responsive because I have &quot;Don&#39;t load tabs until selected&quot; (see previous point).
This is the happiest I&#39;ve been with any browser in years. However, there are still a bunch of pain points. I want SO much more.</p>
</li>
<li><p>I want to tag URLs without bookmarking them. The bookmark concept just gets in the way. It&#39;s an unnecessary unit of psychological weight. It&#39;s a vestigial metaphor of days gone by.</p>
</li>
<li>I want to open a tab group by typing the name of the group in the URL bar.</li>
<li>I want to add URLs to multiple groups easily, similar to tagging. I&#39;d like to do it via the keyboard.</li>
<li>I want to send the current tab to a different group (or groups) using only the keyboard.</li>
<li>I want app tabs that are specific to a given group, and some that are global.</li>
<li>I want to switch quickly from an app tab back to the last non-app tab I was at. Or be able to peek quickly at an app tab without losing my context in the current set of tabs.</li>
<li>I want to switch quickly back to the last tab I was at. (Eg: When I open a new tab, and get sent to the end of the current set of tabs). OR be able to have new tabs open immediately to the right of the current tab, with linked parentage.</li>
<li>I&#39;m tired of sites being browsers inside a browser. And I don&#39;t want &quot;site-specific&quot; browsers - I want a &quot;me-specific&quot; browser, for local or dynamic content.</li>
<li>Firefox creates the <tab> elements for hidden tabs when restoring the session. It would re/start even faster and use even less memory if the XUL elements for hidden tabs were not created until the group itself was opened.</li>
<li>As I work, memory use increases and responsiveness decreases, since I keep visiting more and more tabs. If I haven&#39;t visited a tab in a while, Firefox should unload it. If I haven&#39;t visited a group in a while, Firefox should completely unload the whole group, session content <em>and</em> XUL elements.</li>
<li>A downside of the &quot;Don&#39;t load tabs until selected&quot; option is that tab content is not ready and waiting when you select the tab. The web content has to load and the session data for the tab must be restored. Firefox should pre-load tabs that are adjacent to the active tab. This feature, combined with the dormant-izing of tabs described above would result in a decent balance of instant-gratification availability and responsiveness and resource frugality.
One idea I had was a merging of tagging and groups: The groups in Panorama would be comprised of the set of tags that exist. This would result in nice integration bits like search-by-tag in the awesomebar being equivalent to search-in-group. It also might mean that we&#39;ll need to make Panorama &quot;bigger&quot; - maybe allow it to be zoomed, or make it an infinite canvas.</li>
</ul>
<p>An idea for navigating dynamic content is to merge feeds and groups. Imagine you have a BBC group, which has the BBC feed as it&#39;s source. The set of &quot;tabs&quot; in that group are the items in the feed. If you open the group, all the URLs in the feed are loaded into tabs (but not <em>really</em> loaded if you restore-on-demand).</p>
<p>Anyways, it&#39;s interesting to think about how to prototype some of these ideas in an add-on or a collection of them. I&#39;m sure some of the items above already exist as add-ons.</p>
<p>I realize that I&#39;m not a &quot;typical user&quot;. However, after almost 6 years of browser-making, I&#39;m pretty damn sure that there is no such person. I do not believe that the one-size-fits-all browser is the future. When adding a feature or fixing a bug, we shouldn&#39;t have to choose between grandma and the geeks. In order to stay relevant in a highly-personalized future, we should strive to ensure that Firefox is pliable enough that we who make it are not restricted by it, and more importantly we must ensure that add-on developers are free to mash-up and remix and experiment the f*ck out of it.</p>
]]></description><link>/2012/01/unbookmarking-the-future-of-browsing/index.html</link><guid isPermaLink="true">/2012/01/unbookmarking-the-future-of-browsing/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[browsing]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[panorama]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Fri, 27 Jan 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Dormancy: Freeing up memory from unused tabs]]></title><description><![CDATA[<p>Dormancy &#39;retires&#39; tabs that have gone unused for a while, freeing up that memory. It then restores the tabs to life when accessed.</p>
<p>While Firefox 9 adds restore-on-demand for users that restore their session by default, many users will never benefit from it. This add-on targets users who don&#39;t restore session, but do have long-running instances of Firefox and many tabs. This might land as a core feature in Firefox 9 (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=675539">https://bugzilla.mozilla.org/show_bug.cgi?id=675539</a>).</p>
<p>NOTE: This is highly experimental, has only been tested on the Nightly builds, and probably will destroy your session. You&#39;ve been warned.</p>
<p>Tabs are considered inactive when they haven&#39;t been selected in longer than 5 minutes. To change that, set this pref to a value in milliseconds:</p>
<ul>
<li>extensions.dormancy.TabDormancyAgeMs</li>
</ul>
<p>Tabs are checked for inactivity every 5 minutes. To change this, set this pref to a value in milliseconds:</p>
<ul>
<li>extensions.dormancy.TabCheckIntervalMs</li>
</ul>
<p>Known bugs:</p>
<ul>
<li>Awesomebar entry for dormant tabs shows data URI</li>
<li>Sometimes dormant tabs have no title and no favicon
EXPERIMENTAL. MAY EAT YOUR SESSION OR DO OTHER BAD THINGS.</li>
</ul>
<p><a href="http://j.mp/oW3xQN">INSTALL</a></p>
<p><a href="http://j.mp/n82njh">Source code</a></p>
]]></description><link>/2011/09/dormancy-freeing-up-memory-from-unused-tabs/index.html</link><guid isPermaLink="true">/2011/09/dormancy-freeing-up-memory-from-unused-tabs/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[Memory]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 03 Sep 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Github+Bugzilla Add-on Updated]]></title><description><![CDATA[<p>I updated the add-on to either show which bug it&#39;ll add the patch to, or link to the Enter Bug page on Bugzilla. If you choose to create a new bug, the Bugzilla page will open in a new tab.</p>
<p>The &quot;new bug&quot; scenario is still far too bumpy, requiring you to go to a new tab, get the new bug number, go back to the pull request page, update the pull request title, and then reload the page. Maybe in the next version we could put the new bug page in a panel in the current tab, and then automatically submit the attachment after the bug is created?</p>
<p><a href="http://j.mp/dYtZbs">Install</a>.</p>
<p>Screenshot of bug detected:</p>
<p><img src="dPzAy.png" alt="" title="bug detected"></p>
<p>Screenshot of no bug detected:</p>
<p><img src="COQno.png" alt="" title="no bug detected"></p>
]]></description><link>/2011/03/githubbugzilla-add-on-updated/index.html</link><guid isPermaLink="true">/2011/03/githubbugzilla-add-on-updated/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[Bugzilla]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[Github]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Tue, 29 Mar 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Github + Bugzilla (an Addon for Firefox 4)]]></title><description><![CDATA[<p>We use Github for the source code of the <a href="https://jetpack.mozillalabs.com/" title="Add-on SDK">Firefox Add-on SDK (aka Jetpack)</a>. We use Bugzilla to track bugs and feature development. These two systems do not play nicely together.</p>
<p>One especially annoying aspect of the workflow we use for the Add-on SDK is that it&#39;s a pain to submit a change in a way that satisfies both the Github and Bugzilla workflows. On Github you need to create a branch for your change, push it to Github, then go the page for the branch and submit a &quot;pull request&quot;, informing the forkees that you have changes you&#39;d like merged into the main repository. On Bugzilla, the typical process is to attach a diff of your changes to a bug, and request review from a specific person.</p>
<p>Atul Varma improved things with a great idea: Submit an HTML file as a bug attachment, which points to the pull-request page on Github. He added a feature to <a href="https://github.com/toolness/pybugzilla" title="Pybugzilla">Pybugzilla</a> that, given a pull-request URL and bug id, would generate the HTML file and submit it as an attachment to the bug. We now had something that was attached to a bug, that a reviewer could r+ or r-, making it easy for anyone following along to know where things were at, while allowing the code review itself to be done inline on Github.</p>
<p>However, using the tool isn&#39;t easy. You have to do your development work, then go to the Github page to make the pull request, then go back to the command line to construct the correct invocation of the command, then back to the Bugzilla page to request review from someone.</p>
<p>So I wrote an add-on to reduce the number of steps. With the Github Bugzilla Tweaks add-on, there&#39;s now a button the Github pull-request page that allows you to submit the request as an attachment on a bug in one-click:</p>
<p><img src="4qtB.png" alt="" title="Screenshout"></p>
<p>To make it work, just title your pull request starting with &quot;bug ######&quot;, replacing # with the bug id from Bugzilla. The add-on logs into Bugzilla with the stored credentials found in the Firefox password manager.</p>
<p><a href="http://j.mp/dYtZbs" title="Install">Install</a>.</p>
<p><a href="http://j.mp/g2LLee" title="Source code.">Source code</a>.</p>
]]></description><link>/2011/03/github-bugzilla-an-addon-for-firefox-4/index.html</link><guid isPermaLink="true">/2011/03/github-bugzilla-an-addon-for-firefox-4/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[Githug]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 19 Mar 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[cmd: Quick Command Execution for Firefox 4]]></title><description><![CDATA[<p>Cmd allows you to quickly execute Firefox&#39;s built-in commands via a  small keyboard-activated panel. While many of the browser commands might have  keyboard shortcuts, I often do not remember them. Now I don&#39;t have to.  This add-on allows me to just type the first few characters and hit  enter. This add-on does not require a browser restart.</p>
<p><a href="http://people.mozilla.com/~dietrich/cmd.xpi" title="Install cmd">Install</a>.</p>
<p><a href="https://github.com/autonome/cmd" title="Source code">Source code</a>.</p>
<p>Usage and features:</p>
<ul>
<li>Launch cmd with control+shift+;. In the next release this will be configurable via a preference.</li>
<li>Start typing to see matching commands.</li>
<li>Hit  the tab key to cycle through multiple matches (shift+tab to cycle  backwards). Example: type &quot;pre&quot; and hit tab a bunch of times.</li>
<li>Hit enter to select the current match.</li>
<li>Hit escape to hide cmd without selecting a command.</li>
<li>The last executed command is shown by default.
The  available commands are based on all existing menu items and registered  keyboard shortcuts that reference <command> elements in the  browser.</li>
</ul>
<p>What I use it for:</p>
<ul>
<li>Executing commands without having to know their keyboard shortcut.</li>
<li>Bookmarking without having to click the star, while having it default to Unsorted Bookmarks.</li>
<li>Quickly getting to the About page, to check for nightly updates.
Some commands don&#39;t work, like &quot;Subscribe to page&quot;. I would really like this command to work. Perhaps in the future I&#39;ll add an API for creating new commands. This tool will never compare to the extreme power of visual command tools like Ubiquity. However it&#39;s a very lightweight way to access built-in commands without needing to remember their shortcuts, or using the mouse.</li>
</ul>
]]></description><link>/2011/03/cmd-quick-command-execution-for-firefox-4/index.html</link><guid isPermaLink="true">/2011/03/cmd-quick-command-execution-for-firefox-4/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Fri, 18 Mar 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building Add-ons with Jetpack, Flightdeck and... Vim.]]></title><description><![CDATA[<p>AddonEditor is an add-on for Firefox that allows you to use an external editor when building add-ons with the Add-ons Builder (aka Flightdeck). Yeah, say that 10 times fast.</p>
<p>While Skywriter (aka Bespin) is nice, it&#39;s just not [insert your favorite editor here]. So I stole the code from the <a href="http://bit.ly/gZQIiP">Ubiquity project for loading an external app as editor</a>, and converted it to a CommonJS module for Jetpack (which I&#39;ve listed on the <a href="http://mzl.la/aDar20">Jetpack Modules page</a>). I built an add-on using Jetpack&#39;s page-mod module to add buttons to the Add-on Builder for loading a file in an external editor:</p>
<p><a href="addon-editor.png"><img src="http://autonome.files.wordpress.com/2010/12/addon-editor.png" alt="" title="addon-editor"></a></p>
<p>When you click the button the first time, you&#39;re prompted with a file-open dialog. Select the editor application of your choice, and the file will open in it. From then on, your chosen editor will automatically load files when you click the button. To clear your choice, choose the other button.</p>
<p><a href="http://bit.ly/eDVYEo">Install AddonEditor</a>. Requires Firefox 4 Beta 7 or newer.</p>
<p><a href="http://bit.ly/idHrqa">Clone and make your own, based on AddonEditor.</a> I built it using  Jetpack 0.10, which isn&#39;t released yet. However, I don&#39;t think it takes advantage of anything new, so it might be test-able from the Builder. But the Builder is giving errors when I hit the &quot;test&quot; button (which I&#39;ve reported to Zalun), so I can&#39;t tell for sure yet.</p>
<p>BEWARE:</p>
<ul>
<li>I&#39;ve only tested on Linux. Let me know in the comments if it works or doesn&#39;t for you.</li>
<li>Terminal apps not liked, apparently: /usr/bin/vim hangs Firefox completely. /usr/bin/gvim works fine.</li>
<li>The UI augmentation to Flightdeck probably made Zalun puke. It should probably just be an option in the context menu or something. Except that you&#39;d never find it. Ideas?</li>
</ul>
]]></description><link>/2010/12/building-add-ons-with-jetpack-flightdeck-and-vim/index.html</link><guid isPermaLink="true">/2010/12/building-add-ons-with-jetpack-flightdeck-and-vim/index.html</guid><category><![CDATA[Add-on]]></category><category><![CDATA[Development]]></category><category><![CDATA[Add-ons]]></category><category><![CDATA[extensions]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Mon, 06 Dec 2010 00:00:00 GMT</pubDate></item></channel></rss>