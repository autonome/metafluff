<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[undefined - Dietrich Ayala]]></title><description><![CDATA[Internet freedom, the web and Mozilla.]]></description><link>/</link><generator>Ghost</generator><lastBuildDate>Thu, 20 Jul 2017 12:11:34 GMT</lastBuildDate><atom:link href="/tag/undefined/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Unbookmarking the Future of Browsing]]></title><description><![CDATA[<p>I am needy:</p>
<ul>
<li>I want to remember URLs. Bookmarking is too manual and akin to throwing URLs in the <a href="http://j.mp/wh2cXN">sarlacc pit</a>. The user-interface pieces around bookmarking have not changed in a decade. No, the awesomebar is not a good tool for this. I don&#39;t even come close to being able to recall what I want the awesomebar to recall. I need to be ambiently prompted in a way that is visual and has context.</li>
<li>I need to be able to focus on a given task, project or idea. A single sea of tabs doesn&#39;t help at all. I want blinders. I want an environment. Task immersion.</li>
<li>I need to be able to categorize URLs into groups, such that the whole group is easily accessible. Trees and menus can go to hell, along with the RSI, eye-strain and visual boredom they provide.</li>
<li>I need to be able to switch contexts quickly and easily. Eg: From bug triage to perf to dashboards to music, etc.</li>
<li><p>I don&#39;t want to leave the browser. Windows are super heavyweight feeling and come along with all kinds of operating system baggage: visual, interaction, performance, etc.
I realized recently that a pattern had emerged in my browser usage that meets a bunch of these needs:</p>
</li>
<li><p>I use Firefox&#39;s Panorama feature to manage groups of tabs. I have groups for a bunch of work areas, and for Food, Music, Design, JavaScript, Health, and many more. This provides task-specific browser contexts, as well as keyboard shortcuts for switching contexts with ease.</p>
</li>
<li>I set up Firefox to restore my session every time it starts. This way my groups persist, and all the URLs in each group are loaded with their cookies and other session data ready to go when I need them.</li>
<li>I have &quot;Don&#39;t load tabs until selected&quot; checked, so that Firefox does all this with as little memory as possible - the web pages in all the tabs in all the groups aren&#39;t loaded until I actually use them.</li>
<li><p>I restart the browser a couple of times per day to keep memory use slim, which in turn keeps the browser responsive. Restarting is super fast and responsive because I have &quot;Don&#39;t load tabs until selected&quot; (see previous point).
This is the happiest I&#39;ve been with any browser in years. However, there are still a bunch of pain points. I want SO much more.</p>
</li>
<li><p>I want to tag URLs without bookmarking them. The bookmark concept just gets in the way. It&#39;s an unnecessary unit of psychological weight. It&#39;s a vestigial metaphor of days gone by.</p>
</li>
<li>I want to open a tab group by typing the name of the group in the URL bar.</li>
<li>I want to add URLs to multiple groups easily, similar to tagging. I&#39;d like to do it via the keyboard.</li>
<li>I want to send the current tab to a different group (or groups) using only the keyboard.</li>
<li>I want app tabs that are specific to a given group, and some that are global.</li>
<li>I want to switch quickly from an app tab back to the last non-app tab I was at. Or be able to peek quickly at an app tab without losing my context in the current set of tabs.</li>
<li>I want to switch quickly back to the last tab I was at. (Eg: When I open a new tab, and get sent to the end of the current set of tabs). OR be able to have new tabs open immediately to the right of the current tab, with linked parentage.</li>
<li>I&#39;m tired of sites being browsers inside a browser. And I don&#39;t want &quot;site-specific&quot; browsers - I want a &quot;me-specific&quot; browser, for local or dynamic content.</li>
<li>Firefox creates the <tab> elements for hidden tabs when restoring the session. It would re/start even faster and use even less memory if the XUL elements for hidden tabs were not created until the group itself was opened.</li>
<li>As I work, memory use increases and responsiveness decreases, since I keep visiting more and more tabs. If I haven&#39;t visited a tab in a while, Firefox should unload it. If I haven&#39;t visited a group in a while, Firefox should completely unload the whole group, session content <em>and</em> XUL elements.</li>
<li>A downside of the &quot;Don&#39;t load tabs until selected&quot; option is that tab content is not ready and waiting when you select the tab. The web content has to load and the session data for the tab must be restored. Firefox should pre-load tabs that are adjacent to the active tab. This feature, combined with the dormant-izing of tabs described above would result in a decent balance of instant-gratification availability and responsiveness and resource frugality.
One idea I had was a merging of tagging and groups: The groups in Panorama would be comprised of the set of tags that exist. This would result in nice integration bits like search-by-tag in the awesomebar being equivalent to search-in-group. It also might mean that we&#39;ll need to make Panorama &quot;bigger&quot; - maybe allow it to be zoomed, or make it an infinite canvas.</li>
</ul>
<p>An idea for navigating dynamic content is to merge feeds and groups. Imagine you have a BBC group, which has the BBC feed as it&#39;s source. The set of &quot;tabs&quot; in that group are the items in the feed. If you open the group, all the URLs in the feed are loaded into tabs (but not <em>really</em> loaded if you restore-on-demand).</p>
<p>Anyways, it&#39;s interesting to think about how to prototype some of these ideas in an add-on or a collection of them. I&#39;m sure some of the items above already exist as add-ons.</p>
<p>I realize that I&#39;m not a &quot;typical user&quot;. However, after almost 6 years of browser-making, I&#39;m pretty damn sure that there is no such person. I do not believe that the one-size-fits-all browser is the future. When adding a feature or fixing a bug, we shouldn&#39;t have to choose between grandma and the geeks. In order to stay relevant in a highly-personalized future, we should strive to ensure that Firefox is pliable enough that we who make it are not restricted by it, and more importantly we must ensure that add-on developers are free to mash-up and remix and experiment the f*ck out of it.</p>
]]></description><link>/2012/01/unbookmarking-the-future-of-browsing/index.html</link><guid isPermaLink="true">/2012/01/unbookmarking-the-future-of-browsing/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[browsing]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[panorama]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Fri, 27 Jan 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building Firefox in the Post-Browser Age]]></title><description><![CDATA[<p>Ok, so maybe we aren&#39;t in the post-browser age <em>yet</em>. But we&#39;re getting there, and quickly. Most of the &quot;apps&quot; I use on my phone are useless without an always-on data connection, and they communicate with their respective motherships via HTTP. We&#39;re staring down a near-future with multiple Web-stack operating systems for both desktop and portable devices. We have server-side application platforms that look startlingly like pieces of a traditional Web client.</p>
<p>All of those places are the Web, so that&#39;s where Mozilla has got to be, when and if it&#39;s possible to do so. And between desktop Firefox, mobile Firefox, Chromeless, B2G, Pancake, Open Web Apps and the various Firefox features developed by the Labs and the Services groups, we&#39;ve got a lot of application logic that needs to exist in various forms across those disparate environments.</p>
<p>Up until recently, even including most of the mobile efforts to date, we&#39;ve had a pretty narrow idea of what constitutes Firefox: Mozilla&#39;s browser application with a front-end built in XUL, and rendering content using Gecko, stored entirely in a single source repository.</p>
<p>This narrow view is insufficient given the needs of internet users and the plans we have to serve those needs in the immediate future. This has been starkly illustrated by the recent move to a native UI for mobile Firefox, projects like Pancake, and the expansion of the development of Firefox features by groups outside of the core team.</p>
<p>A few months ago I dumped a couple of thoughts into <a href="https://groups.google.com/forum/#!msg/mozilla.dev.planning/K1fr4VqtQTA/h_orDOFqQKMJ">a thread on the mozilla.dev.planning newsgroup</a> about these things. More than anything, that thread showed me that the broad spectrum of activity in Mozilla today makes our narrow view of Firefox a huge barrier to future success. Some people didn&#39;t agree that there was a problem at all. Some people railed against Jetpack or Github, while admitting they&#39;d never used either. Some people agreed that developing Firefox is slow and fragile, and pointed at the relative historical success of that approach. Disturbingly, I got a bunch of private emails thanking me for starting the conversation... what does <em>that</em> mean?! Overall though, there was a lot of agreement on this point: We need more people to be able to work on Firefox faster, and in a more heterogeneous environment.</p>
<p>There&#39;s a bunch of work towards that end going on right now, both in Firefox team itself and in Mozilla generally, around lowering the barriers to contribution. Specific to Firefox core development though, one experiment in alternate approaches is the attempt to ship the BrowserID feature as a Jetpack-based add-on that is developed on Github and bundled with Firefox. There are a lot of moving parts, but the exercise is helping us figure out the up- and downsides to building features as add-ons, as well as providing performance data about the Add-on SDK. Maybe it&#39;ll work, maybe we&#39;ll have to re-route and patch it against the core. Maybe we&#39;ll land somewhere in-between.</p>
<p>Regardless of that experiment&#39;s outcome, I think we need to be experimenting hard with how we develop Firefox, and asking questions about the longer-term development landscape:</p>
<ul>
<li>Code changes currently have non-deterministic effects in the Firefox ecosystem. We have a jumble of services that stagger into existence at startup, and then race for the exit at shutdown, beating up the file-system at both ends of the application lifecycle. &quot;Async&quot; is a pattern, not a system - without a system, making a bunch of things asynchronous means that the application&#39;s behavior as a whole is generally less predictable. Is there a more systematic way that we can manage the loading and unloading of core browser services?</li>
<li>Calcification: Check out the <a href="https://wiki.mozilla.org/Firefox/Cleanup">&quot;cleanup page&quot;</a>. There are long-despised-and-untouched pieces of our core infrastructure, such as URL classifier, importers, autocomplete, and parts of Places. Why is it so hard to change these? What are the barriers to making them better?</li>
<li>Modularity: Cu.import is great in that it provides some of the benefits that we used XPCOM JS services for, but without the XPCOM. But are we using it enough? Jetpack development puts much more emphasis on modularity via a core built on CommonJS, and I&#39;ve found it to make browser features written in Jetpack far easier to follow, debug, and contribute to. Maybe we should be putting code into modules where we&#39;d normally add it to browser.js, or XBL widgets moreso than we are now? This could reduce our dependence on the XUL window mega-scope that we get in browser.js, which I&#39;d argue leads to code that is easier to developer, debug, test and maintain.</li>
<li>Abstracting the application logic away from XUL/XPCOM where possible, allowing for more portable code. This doesn&#39;t make sense in a lot of places in the front-end, but in others such as sync or expiration policies or tab grouping algorithms or frecency generation, it might. These are things which could be useful across a number of different application contexts.
So where from here? There&#39;s general agreement that the Add-on SDK needs to ship in the browser. This might help address some of the questions above. However, it won&#39;t immediately help us share code with other Firefoxes or Mozilla projects, or make core development inherently less-fragile or our application behavior any more deterministic. And there are tools like Cu.import, which we have now, and Harmony modules, which we might have soon (can we use those in chrome?!) that could help with the modularity part.</li>
</ul>
<p>But only some of this is about the technology - other parts are social. As I said above, some people do not agree that developing Firefox is slow and fraught with peril. Is that plain ol&#39; resistance to change, or just the lack of a clear alternative? And maybe we code reviewers should be more forward-looking, demanding larger refactorings instead of non-invasive surgeries. But that&#39;s challenging when you&#39;re constrained for time, or the regression cost of refactoring is so high that you become risk averse.</p>
<p>I&#39;d love to hear your thoughts on the future of Firefox application development - especially the core Firefox team, and the people working on Firefox features in other groups or via add-ons. Myk Melez has been corralling a group to talk about feature development with the Add-on SDK specifically, but it quickly spreads into these broader issues. He&#39;s starting a list for it, but until then there are regular meetings, <a href="http://j.mp/uVeOiT">details available in his dev.planning post</a>.</p>
]]></description><link>/2011/10/building-firefox-in-the-post-browser-age/index.html</link><guid isPermaLink="true">/2011/10/building-firefox-in-the-post-browser-age/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Wed, 26 Oct 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Visualizing web page memory use in Firefox]]></title><description><![CDATA[<p>I remixed about:memory using <a href="http://mbostock.github.com/d3/">D3</a> to make a treemap visualization of how loaded URLs are using memory in Firefox.</p>
<p>Load it by clicking the widget on the add-on bar, or Cmd/Ctrl+Shift+Y</p>
<p>This visualization focuses on which web pages are using large amounts of memory - this is not a complete accounting of all memory being used. This doesn&#39;t yet show how much is being used by some of the Firefox internals.</p>
<p>Add-on installation does not require a restart. Only tested on Nightly builds.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/aboutmemory-treemap-visuali/">Install</a></p>
<p><a href="https://github.com/autonome/Memtreemap">Source code</a></p>
<p><a href="memtreemap.png"><img src="http://autonome.files.wordpress.com/2011/09/memtreemap.png" alt="" title="memtreemap.png"></a></p>
]]></description><link>/2011/09/visualizing-web-page-memory-use-in-firefox/index.html</link><guid isPermaLink="true">/2011/09/visualizing-web-page-memory-use-in-firefox/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 10 Sep 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Dormancy: Freeing up memory from unused tabs]]></title><description><![CDATA[<p>Dormancy &#39;retires&#39; tabs that have gone unused for a while, freeing up that memory. It then restores the tabs to life when accessed.</p>
<p>While Firefox 9 adds restore-on-demand for users that restore their session by default, many users will never benefit from it. This add-on targets users who don&#39;t restore session, but do have long-running instances of Firefox and many tabs. This might land as a core feature in Firefox 9 (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=675539">https://bugzilla.mozilla.org/show_bug.cgi?id=675539</a>).</p>
<p>NOTE: This is highly experimental, has only been tested on the Nightly builds, and probably will destroy your session. You&#39;ve been warned.</p>
<p>Tabs are considered inactive when they haven&#39;t been selected in longer than 5 minutes. To change that, set this pref to a value in milliseconds:</p>
<ul>
<li>extensions.dormancy.TabDormancyAgeMs</li>
</ul>
<p>Tabs are checked for inactivity every 5 minutes. To change this, set this pref to a value in milliseconds:</p>
<ul>
<li>extensions.dormancy.TabCheckIntervalMs</li>
</ul>
<p>Known bugs:</p>
<ul>
<li>Awesomebar entry for dormant tabs shows data URI</li>
<li>Sometimes dormant tabs have no title and no favicon
EXPERIMENTAL. MAY EAT YOUR SESSION OR DO OTHER BAD THINGS.</li>
</ul>
<p><a href="http://j.mp/oW3xQN">INSTALL</a></p>
<p><a href="http://j.mp/n82njh">Source code</a></p>
]]></description><link>/2011/09/dormancy-freeing-up-memory-from-unused-tabs/index.html</link><guid isPermaLink="true">/2011/09/dormancy-freeing-up-memory-from-unused-tabs/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[Memory]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 03 Sep 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Wallflower: Un-Socializing Your Web]]></title><description><![CDATA[<p>I was looking at about:memory and noticed entries for Facebook and Google+ URLs, even though I didn&#39;t have either open. I figured they were probably from the social buttonry that decorates the web these days. No big deal... except they were taking up a bunch of memory! The Facebook button was using over 20mb and the Google+ button was taking over 40mb!</p>
<p>I have never clicked either of these buttons.</p>
<p>So I wrote Wallflower, a simple Firefox add-on (restartless of course) that removes these buttons from any page your browse to, saving your precious memory, CPU and battery life for the content you actually want.</p>
<p><a href="http://j.mp/nLG8wX">Install Wallflower</a>.</p>
<p>View the <a href="https://github.com/autonome/Wallflower">source code on Github</a>.</p>
]]></description><link>/2011/08/wallflower-un-socializing-your-web/index.html</link><guid isPermaLink="true">/2011/08/wallflower-un-socializing-your-web/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Wed, 24 Aug 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Peek: Apps, App Tabs, and Context.]]></title><description><![CDATA[<p>The new app tab feature in Firefox is great. I use it a lot... which has starkly illustrated how apps and tabs have very different use-cases and usage patterns. Often I will check my Gmail app tab because I see the glowing notification that a new email has arrived, do something (or nothing), and then pop back to where I was browsing... in one of those 78 tabs I have open?!
The windowing model in operating systems allows me switch back and forth between contexts with ease. But app tabs do not:</p>
<ul>
<li>If I&#39;m using my Gmail app tab and I didn&#39;t open any links while there, I can still see the last tab I was at, and click on it. But I have to use the mouse if I want to get directly back there.</li>
<li>Out of sheer muscle memory and mouse-averseness, sometimes I can traverse tabs via the next/previous-tab keyboard shortcuts to get back to where I was. Sometimes it&#39;s a <em>lot</em> of tabs, so either I&#39;ll hold the arrow key down, speeding past the tab I wanted (and back and forth a few times), or I&#39;ll just hit the arrow key a bunch of times in quick succession. Both options are frustrating, slow and RSI-inducing.</li>
<li><p>Or I could expend mental energy to search in the awesomebar and switch to that tab, which often looks like this: &quot;hm, type &#39;bug&#39; and then try to remember some words in the bug summary, but those words match a bunch of other bugs, and i don&#39;t know the bug number, and also I&#39;m on an attachment page because I&#39;m reviewing a patch on the bug, so the summary won&#39;t be in the page title...&quot; and on and on. Now add the fact that switch-to-tab rarely even shows up in the awesomebar for me, and well, a generally high level of fail with this option.
Then there&#39;s link opening:</p>
</li>
<li><p>Links opened in app tabs are put at the beginning of your tabs, and the tab strip is animatedly scrolled there. Boom, instantly lost where I was before checking my email.</p>
</li>
<li>We tried an experiment where they open at the end of the set of open tabs. I found that to have serious &quot;out of sight, out of mind&quot; problems. That experiment was rolled back. And it doesn&#39;t necessarily solve the context problem anyway.</li>
<li>Both approaches cause excess amounts of whizzing animations, either when you want to &quot;go around the horn&quot; to get to the tabs you just opened from app tabs, or when you want to go to them and then get back to where you were.</li>
<li>There&#39;s no right answer! Sometimes I see a link to a recipe in my Seesmic app tab that I&#39;d like to open in that series of tabs related to food that I have open somewhere in the middle of my open tabs. The user is not in control of <em>where</em> these links are opened. I can&#39;t choose whether to open them at the beginning or end of the tab strip, or in a new tab group, or new window, etc. Part of me thinks that I actually might work best in a world where each app tab is bound to a single tab group, so that tab growth is bound to the source... but that&#39;s a vision for another day (and blog post and add-on).
So I&#39;ve made Peek, an add-on that&#39;s a hybrid solution: Instead of making you go to your app tabs, your app tabs will come to you. Peek allows you to open your app tabs in a floating panel that opens on top of wherever you are in your tabs. Links open to the right of whatever your current active tab is, and in the background, so that when you&#39;re finished peeking, you are exactly where you left off.</li>
</ul>
<p>To use Peek, first create some app tabs. Then you can peek at them using the keyboard shortcut ALT+SHIFT+1-9 where the number corresponds with the order your app tabs are in. To stop peeking, hit escape (or switch apps or anything else that takes focus away from the panel).</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/peek/">INSTALL</a>. Peek is a Jetpack add-on that does not require a restart of the browser. User beware: This is an experimental add-on - I&#39;ve been using it on Nightly builds, but haven&#39;t done much testing elsewhere.</p>
<p>Benefits:</p>
<ul>
<li>Interact with your apps, and when you&#39;re done, be exactly where you left off browsing.</li>
<li>Links are opened in the context of wherever you&#39;re peeking.
<a href="screen-shot-2011-08-19-at-1-46-45-pm.png"><img src="http://autonome.files.wordpress.com/2011/08/screen-shot-2011-08-19-at-1-46-45-pm.png" alt="" title="Screen shot 2011-08-19 at 1.46.45 PM"></a></li>
</ul>
]]></description><link>/2011/08/peek-apps-app-tabs-and-context/index.html</link><guid isPermaLink="true">/2011/08/peek-apps-app-tabs-and-context/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 20 Aug 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Extensibly Awesome: A Jetpack API for the Firefox Location Bar]]></title><description><![CDATA[<p>I tweaked some of <a href="http://mozillalabs.com/prospector/2011/06/01/exploring-social-search-with-twitter-address-bar-search/">Mardak&#39;s code for the Twitter Add-on</a>, and created a Jetpack module that makes it terribly simple to write add-ons that extend the awesomebar with your own suggestions. As an example, here&#39;s an add-on that uses the Google Translate API to translate text into a specified language directly in the location bar. If you type in the keyword &#39;translate&#39;, followed by a language code and some text, it will show the translation in the awesomebar results:</p>
<p><a href="screen-shot-2011-06-09-at-3-36-53-am.png"><img src="http://autonome.files.wordpress.com/2011/06/screen-shot-2011-06-09-at-3-36-53-am.png" alt="Screenshot" title="Screenshot"></a></p>
<p>The code:</p>
<p><pre>require(&#39;awesomebar&#39;).add({
  keyword: &#39;translate&#39;,
  onSearch: function(query, suggest) {
    let lang = query.substring(0, query.indexOf(&#39; &#39;));
    let text = query.substring(query.indexOf(&#39; &#39;));
    if (lang.length == 2 &amp;&amp; text.length &gt; 2) {
      translate(lang, text, function(translatedText) {
        suggest({
          title: &#39;Translated text in &#39; + lang + &#39;: &#39; + translatedText,
          url: &#39;<a href="http://translate.google.com/?tl=">http://translate.google.com/?tl=</a>&#39; + lang +
               &#39;&amp;q=&#39; + encodeURIComponent(text),
        }, true);
      });
    }
  }
});</p>
<p>function translate(lang, text, callback) {
  require(&#39;request&#39;).Request({
    url: &#39;<a href="http://ajax.googleapis.com/ajax/services/language/translate">http://ajax.googleapis.com/ajax/services/language/translate</a>&#39;,
    content: {
      v: &#39;1.0&#39;,
      q: text,
      langpair: &#39;&#39;&#39; + lang
    },
    headers: {
      Referer: require(&#39;tabs&#39;).activeTab.location
    },
    onComplete: function() {
      callback(this.response.json.responseData.translatedText);
    }
  }).get();
}</pre>
The example needs niceties such as being able to write full language names, but you get the gist.</p>
<p>Here&#39;s the <a href="https://github.com/autonome/Jetpack-Modules/blob/master/awesomebar.js">awesomebar.js module</a>.</p>
<p>There&#39;s a bit of documentation in there. The code could use some cleanup, and could probably be much smaller if converted to use the internal Jetpack APIs for things like window-watching, etc.</p>
]]></description><link>/2011/06/extensibly-awesome/index.html</link><guid isPermaLink="true">/2011/06/extensibly-awesome/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Thu, 09 Jun 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Github+Bugzilla Add-on Updated]]></title><description><![CDATA[<p>I updated the add-on to either show which bug it&#39;ll add the patch to, or link to the Enter Bug page on Bugzilla. If you choose to create a new bug, the Bugzilla page will open in a new tab.</p>
<p>The &quot;new bug&quot; scenario is still far too bumpy, requiring you to go to a new tab, get the new bug number, go back to the pull request page, update the pull request title, and then reload the page. Maybe in the next version we could put the new bug page in a panel in the current tab, and then automatically submit the attachment after the bug is created?</p>
<p><a href="http://j.mp/dYtZbs">Install</a>.</p>
<p>Screenshot of bug detected:</p>
<p><img src="dPzAy.png" alt="" title="bug detected"></p>
<p>Screenshot of no bug detected:</p>
<p><img src="COQno.png" alt="" title="no bug detected"></p>
]]></description><link>/2011/03/githubbugzilla-add-on-updated/index.html</link><guid isPermaLink="true">/2011/03/githubbugzilla-add-on-updated/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[Bugzilla]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[Github]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Tue, 29 Mar 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Badged Widgets with the Firefox 4 Add-on SDK]]></title><description><![CDATA[<p>Earlier tonight, <a href="http://sparklin.org/" title="Elisée on Twitter">Elisée</a> came into <a href="irc://irc.mozilla.org/#jetpack" title="#jetpack on IRC">#jetpack</a> with some questions, and we got to talking about badging on widgets. He&#39;d built a solution for his project, but we both agreed it should be easier. It&#39;s something that we&#39;ve gotten quite a few requests for, so using Elisée&#39;s approach, I made a standalone module for badging Widgets.</p>
<p><a href="https://github.com/autonome/Jetpack-Modules/blob/master/BadgedWidget.js" title="Source code">Module source code (and example).</a></p>
<p>The BadgedWidget API allows you to specify badge text, background color, and background opacity. The API needs to be properly integrated into the core Widget object, should allow updating each property individually, and a few other niceties (full control over styling?). But for now, here&#39;s a bird in your hand. If you&#39;ve got suggestions, let me know in the comments. Screenshot below.</p>
<p><img src="bBdbj.png" alt="Screenshot" title="Screenshot"></p>
]]></description><link>/2011/03/badged-widgets-with-the-firefox-4-add-on-sdk/index.html</link><guid isPermaLink="true">/2011/03/badged-widgets-with-the-firefox-4-add-on-sdk/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Mon, 28 Mar 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Github + Bugzilla (an Addon for Firefox 4)]]></title><description><![CDATA[<p>We use Github for the source code of the <a href="https://jetpack.mozillalabs.com/" title="Add-on SDK">Firefox Add-on SDK (aka Jetpack)</a>. We use Bugzilla to track bugs and feature development. These two systems do not play nicely together.</p>
<p>One especially annoying aspect of the workflow we use for the Add-on SDK is that it&#39;s a pain to submit a change in a way that satisfies both the Github and Bugzilla workflows. On Github you need to create a branch for your change, push it to Github, then go the page for the branch and submit a &quot;pull request&quot;, informing the forkees that you have changes you&#39;d like merged into the main repository. On Bugzilla, the typical process is to attach a diff of your changes to a bug, and request review from a specific person.</p>
<p>Atul Varma improved things with a great idea: Submit an HTML file as a bug attachment, which points to the pull-request page on Github. He added a feature to <a href="https://github.com/toolness/pybugzilla" title="Pybugzilla">Pybugzilla</a> that, given a pull-request URL and bug id, would generate the HTML file and submit it as an attachment to the bug. We now had something that was attached to a bug, that a reviewer could r+ or r-, making it easy for anyone following along to know where things were at, while allowing the code review itself to be done inline on Github.</p>
<p>However, using the tool isn&#39;t easy. You have to do your development work, then go to the Github page to make the pull request, then go back to the command line to construct the correct invocation of the command, then back to the Bugzilla page to request review from someone.</p>
<p>So I wrote an add-on to reduce the number of steps. With the Github Bugzilla Tweaks add-on, there&#39;s now a button the Github pull-request page that allows you to submit the request as an attachment on a bug in one-click:</p>
<p><img src="4qtB.png" alt="" title="Screenshout"></p>
<p>To make it work, just title your pull request starting with &quot;bug ######&quot;, replacing # with the bug id from Bugzilla. The add-on logs into Bugzilla with the stored credentials found in the Firefox password manager.</p>
<p><a href="http://j.mp/dYtZbs" title="Install">Install</a>.</p>
<p><a href="http://j.mp/g2LLee" title="Source code.">Source code</a>.</p>
]]></description><link>/2011/03/github-bugzilla-an-addon-for-firefox-4/index.html</link><guid isPermaLink="true">/2011/03/github-bugzilla-an-addon-for-firefox-4/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[Githug]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 19 Mar 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[cmd: Quick Command Execution for Firefox 4]]></title><description><![CDATA[<p>Cmd allows you to quickly execute Firefox&#39;s built-in commands via a  small keyboard-activated panel. While many of the browser commands might have  keyboard shortcuts, I often do not remember them. Now I don&#39;t have to.  This add-on allows me to just type the first few characters and hit  enter. This add-on does not require a browser restart.</p>
<p><a href="http://people.mozilla.com/~dietrich/cmd.xpi" title="Install cmd">Install</a>.</p>
<p><a href="https://github.com/autonome/cmd" title="Source code">Source code</a>.</p>
<p>Usage and features:</p>
<ul>
<li>Launch cmd with control+shift+;. In the next release this will be configurable via a preference.</li>
<li>Start typing to see matching commands.</li>
<li>Hit  the tab key to cycle through multiple matches (shift+tab to cycle  backwards). Example: type &quot;pre&quot; and hit tab a bunch of times.</li>
<li>Hit enter to select the current match.</li>
<li>Hit escape to hide cmd without selecting a command.</li>
<li>The last executed command is shown by default.
The  available commands are based on all existing menu items and registered  keyboard shortcuts that reference <command> elements in the  browser.</li>
</ul>
<p>What I use it for:</p>
<ul>
<li>Executing commands without having to know their keyboard shortcut.</li>
<li>Bookmarking without having to click the star, while having it default to Unsorted Bookmarks.</li>
<li>Quickly getting to the About page, to check for nightly updates.
Some commands don&#39;t work, like &quot;Subscribe to page&quot;. I would really like this command to work. Perhaps in the future I&#39;ll add an API for creating new commands. This tool will never compare to the extreme power of visual command tools like Ubiquity. However it&#39;s a very lightweight way to access built-in commands without needing to remember their shortcuts, or using the mouse.</li>
</ul>
]]></description><link>/2011/03/cmd-quick-command-execution-for-firefox-4/index.html</link><guid isPermaLink="true">/2011/03/cmd-quick-command-execution-for-firefox-4/index.html</guid><category><![CDATA[Add-ons]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Fri, 18 Mar 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Tracking Firefox UI Response Time]]></title><description><![CDATA[<p>I wrote an add-on for Firefox 4 that tracks how long various parts of the browser&#39;s user-interface take to load. It does not require a restart of the browser.</p>
<p><a href="http://people.mozilla.com/~dietrich/aboutresponse.xpi">Click here to install.</a></p>
<ul>
<li>It measures the duration between &#39;popupshowing&#39; and &#39;popupshown&#39; events. This covers menus, menu-like things, and those floating panels you&#39;re starting to see everywhere.</li>
<li>You can see your results at <a href="response">about:response</a>. There won&#39;t be anything there if you just installed the add-on. Browse around for a few days and then check it out.</li>
<li>It doesn&#39;t track popups without an id yet. It could also be nicer by showing the containing menu name if available.</li>
<li>I&#39;d like to add window load times. What else in the front-end could we be measuring? I was thinking about <command> execution, but there&#39;s not a way to do that without modifying the core, afaict.</li>
<li>Perhaps we could add a button for users to submit their anonymized data somewhere.
Try it out, let me know if you have any problems. The <a href="https://github.com/autonome/about-response">source code</a> is available on Github.</li>
</ul>
<p><a href="about-response-screenshot.png"><img src="http://autonome.files.wordpress.com/2011/02/about-response-screenshot.png" alt="about-response-screenshot" title="about-response-screenshot"></a></p>
]]></description><link>/2011/02/tracking-firefox-ui-response-time/index.html</link><guid isPermaLink="true">/2011/02/tracking-firefox-ui-response-time/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Tue, 22 Feb 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building Add-ons with Jetpack, Flightdeck and... Vim.]]></title><description><![CDATA[<p>AddonEditor is an add-on for Firefox that allows you to use an external editor when building add-ons with the Add-ons Builder (aka Flightdeck). Yeah, say that 10 times fast.</p>
<p>While Skywriter (aka Bespin) is nice, it&#39;s just not [insert your favorite editor here]. So I stole the code from the <a href="http://bit.ly/gZQIiP">Ubiquity project for loading an external app as editor</a>, and converted it to a CommonJS module for Jetpack (which I&#39;ve listed on the <a href="http://mzl.la/aDar20">Jetpack Modules page</a>). I built an add-on using Jetpack&#39;s page-mod module to add buttons to the Add-on Builder for loading a file in an external editor:</p>
<p><a href="addon-editor.png"><img src="http://autonome.files.wordpress.com/2010/12/addon-editor.png" alt="" title="addon-editor"></a></p>
<p>When you click the button the first time, you&#39;re prompted with a file-open dialog. Select the editor application of your choice, and the file will open in it. From then on, your chosen editor will automatically load files when you click the button. To clear your choice, choose the other button.</p>
<p><a href="http://bit.ly/eDVYEo">Install AddonEditor</a>. Requires Firefox 4 Beta 7 or newer.</p>
<p><a href="http://bit.ly/idHrqa">Clone and make your own, based on AddonEditor.</a> I built it using  Jetpack 0.10, which isn&#39;t released yet. However, I don&#39;t think it takes advantage of anything new, so it might be test-able from the Builder. But the Builder is giving errors when I hit the &quot;test&quot; button (which I&#39;ve reported to Zalun), so I can&#39;t tell for sure yet.</p>
<p>BEWARE:</p>
<ul>
<li>I&#39;ve only tested on Linux. Let me know in the comments if it works or doesn&#39;t for you.</li>
<li>Terminal apps not liked, apparently: /usr/bin/vim hangs Firefox completely. /usr/bin/gvim works fine.</li>
<li>The UI augmentation to Flightdeck probably made Zalun puke. It should probably just be an option in the context menu or something. Except that you&#39;d never find it. Ideas?</li>
</ul>
]]></description><link>/2010/12/building-add-ons-with-jetpack-flightdeck-and-vim/index.html</link><guid isPermaLink="true">/2010/12/building-add-ons-with-jetpack-flightdeck-and-vim/index.html</guid><category><![CDATA[Add-on]]></category><category><![CDATA[Development]]></category><category><![CDATA[Add-ons]]></category><category><![CDATA[extensions]]></category><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Mon, 06 Dec 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox, Plugins and Jetpack Widgets]]></title><description><![CDATA[<p>Flash was chewing CPU in one of my myriad tabs, so I used <a href="https://jetpack.mozillalabs.com/">Jetpack</a> and the new <a href="https://developer.mozilla.org/en/Addons/Add-on_Manager">AddonsManager API</a> to whip up a quick add-on to enable and disable Flash quickly. It&#39;s &lt;30 lines of code and an image. It puts an icon in the Firefox 4 add-on bar that toggles the plug-in, and sends a Growl notification (or whatever system your OS uses) indicating that the plug-in was successfully enabled or disabled. Screenshot:</p>
<p><img src="flashtoggle.png" alt="" title="flashtoggle"></p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/260486/">Install FlashToggle.</a> Requires Firefox 4 beta 7 or newer.</p>
<p><a href="https://builder.mozillalabs.com/addon/1004584/latest/">Clone and make your own on the Add-on Builder.</a> This might require a minor change in the code since I built using Jetpack 0.10, which isn&#39;t released yet. Changing &#39;contentURL&#39; to &#39;image&#39; in the widget options should do the trick.</p>
<p>The entire code listing:</p>
<pre>function toggleFlash(callback) {
  const { Cu } = require("chrome");
  Cu.import("resource://gre/modules/AddonManager.jsm", this);
  AddonManager.getAddonsByTypes(["plugin"], function(addons) {
    for (let i = 0; i < addons.length; i++) {
      if (addons[i].name == "Shockwave Flash") {
        addons[i].userDisabled = !addons[i].userDisabled;
        callback(addons[i].userDisabled);
        break;
      }
    }
  });
}

let flashLogoURL = require("self").data.url("flash-logo.jpg");
require("widget").Widget({
  label: "Toggle Flash",
  contentURL: flashLogoURL,
  onClick: function() {
    toggleFlash(function(disabled) {
      let message = "Flash is now " + (disabled ? "disabled" : "enabled") + ".";
      require("notifications").notify({
        title: message,
        iconURL: flashLogoURL
      });
    });
  }
});</pre>]]></description><link>/2010/12/firefox-plugins-and-jetpack-widgets/index.html</link><guid isPermaLink="true">/2010/12/firefox-plugins-and-jetpack-widgets/index.html</guid><category><![CDATA[Add-on]]></category><category><![CDATA[Development]]></category><category><![CDATA[firefox]]></category><category><![CDATA[Flash]]></category><category><![CDATA[jetpack]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 04 Dec 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Upcoming changes to the Jetpack Widget API]]></title><description><![CDATA[<p>Between <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=612169">bug 612169</a> and <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=569479">bug 569479</a>, the widget API has undergone a major transformation in the upcoming <a href="https://wiki.mozilla.org/Labs/Jetpack/SDK/0.10">0.10 SDK release</a>.</p>
<p>Both sets of changes have made the API more compact, reducing the amount of code required to build widgets. The Electrolysis (e10s) changes are in preparation for moving Jetpack code out of the main Firefox process. They also make the widget API significantly more powerful, combining the current widget functionality with content scripts.</p>
<p>The e10s changes have affected the API to a significant degree; your widgets will certainly require more than just cosmetic changes.  I was worried at first that the e10s changes would complicate things, causing more verbose code patterns, and tricky message sequences to wire things together. However, the opposite was true: The documentation examples and the automated test code were both <em>more compact</em> and <em>simpler</em> after I&#39;d rewritten them to use the new API.</p>
<p>Here&#39;s an example widget that shows the Facebook profile pic of the most recent friend in your news feed:</p>
<p><pre>require(&quot;widget&quot;).Widget({
  label: &quot;Latest Friend&quot;,
  contentURL: &quot;<a href="https://www.facebook.com/home.php">https://www.facebook.com/home.php</a>&quot;,
  contentScript: &quot;document.location = document.querySelector(&#39;.profilePic&#39;).src;&quot;,
  contentScriptWhen: &quot;ready&quot;,
  onClick: function() require(&quot;tabs&quot;).tabs.active.location = this.contentURL
});</pre>
Hmmm, with the page-worker module, querySelectorAll and some hot timer action, you could have a Rockmelt-y bar...</p>
<p>A summary of the API changes:</p>
<ul>
<li>You no longer need to explicitly add and remove widgets.</li>
<li>Constructing a widget immediately adds it to the add-on bar. To remove a widget, call its destroy() method.</li>
<li>The image property has been removed. Instead use the contentURL property, which can be used with image URLs, or local or remote content URLs. The content property is still present, used for HTML fragments or plain text.</li>
<li>The API now exposes the page-mod API set - meaning that you can attach a content script either inline via contentScript, or a separate file via contentScriptURL, and specify whether it runs at load or when the DOM is ready via contentScriptWhen.</li>
<li>The onLoad and onReady event listeners have been removed in favor of content scripts, where you can listen for those events, and post messages back to your Jetpack code. The examples in the docs show how easy this is.
For more details, check out the <a href="https://github.com/mozilla/addon-sdk/blob/master/packages/addon-kit/docs/widget.md">updated widget API documentation</a>.</li>
</ul>
]]></description><link>/2010/11/upcoming-changes-to-the-jetpack-widget-api/index.html</link><guid isPermaLink="true">/2010/11/upcoming-changes-to-the-jetpack-widget-api/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[JavaScript]]></category><category><![CDATA[jetpack]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Tue, 23 Nov 2010 00:00:00 GMT</pubDate></item></channel></rss>