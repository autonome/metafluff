<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[undefined - Dietrich Ayala]]></title><description><![CDATA[Internet freedom, the web and Mozilla.]]></description><link>/</link><generator>Ghost</generator><lastBuildDate>Thu, 20 Jul 2017 12:11:34 GMT</lastBuildDate><atom:link href="/tag/undefined/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Firefox Startup Performance Weekly Summary]]></title><description><![CDATA[<p>Current numbers are available on the <a href="http://graphs.mozilla.org/dashboard/snapshot/">Performance  Snapshot</a> page for all tests.</p>
<p>Summary current startup performance, relative to Firefox 3.5:</p>
<ul>
<li>Warm startup: For Mac, 34% better on 3.6 and 32% better on 3.7. Flat on Windows for 3.6, and since Windows 3.6 was ~5% improved over 3.5 last post, so there appears to be a regression here. However, the graph data is not showing a 5% regression, so something might be incorrect in the snapshot code.</li>
<li><p>Cold startup:  For Mac, I&#39;m discarding past numbers since we were not measuring it correctly (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=532965">bug 532965</a>). For  Windows, still not measuring yet. For Linux, the ~9% regression discrepancy from the last post is now gone,  putting 3.6 at 3% improved over 3.5 and trunk at a 3% regression. However, there are <a href="http://graphs.mozilla.org/#tests=[{%22test%22:%2255%22,%22branch%22:%2210%22,%22machine%22:%22188%22},{%22test%22:%2255%22,%22branch%22:%2210%22,%22machine%22:%22190%22},{%22test%22:%2255%22,%22branch%22:%2210%22,%22machine%22:%22191%22},{%22test%22:%2255%22,%22branch%22:%2210%22,%22machine%22:%22192%22},{%22test%22:%2255%22,%22branch%22:%2210%22,%22machine%22:%22193%22},{%22test%22:%2255%22,%22branch%22:%2210%22,%22machine%22:%22194%22},{%22test%22:%2255%22,%22branch%22:%2210%22,%22machine%22:%22195%22},{%22test%22:%2255%22,%22branch%22:%2210%22,%22machine%22:%22196%22},{%22test%22:%2255%22,%22branch%22:%2210%22,%22machine%22:%22197%22},{%22test%22:%2255%22,%22branch%22:%2210%22,%22machine%22:%22198%22},{%22test%22:%2255%22,%22branch%22:%2210%22,%22machine%22:%22200%22},{%22test%22:%2255%22,%22branch%22:%2210%22,%22machine%22:%22201%22},{%22test%22:%2255%22,%22branch%22:%2210%22,%22machine%22:%22202%22},{%22test%22:%2255%22,%22branch%22:%2210%22,%22machine%22:%22203%22},{%22test%22:%2255%22,%22branch%22:%2210%22,%22machine%22:%22204%22}]">regular multi-run spikes in the graph</a>, so I&#39;m not sure we&#39;re getting the best data out of this measurement scheme either.
This week&#39;s activity:</p>
</li>
<li><p>Rob Strong landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=532552">bug 532552</a>, which removes the blocklist service from the startup path. This <a href="http://exchangecode.com/robert/work/ce_logs/log.txt">log of WinCE startup</a>, generated from <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=470116">Taras&#39; patch here</a>, made it apparent that the service was in the startup path and taking a significant amount of time. Poke around that log, there&#39;s more goods to be had.</p>
</li>
<li>Taras landed a bunch of JAR related bugs on branch: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510844">bug 510844</a>, <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=511754">bug 511754</a>, <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=525755">bug 525755</a>, <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=523065">bug 523065</a>, <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=521227">bug 521227</a>.</li>
<li>Rob Strong put up a <a href="http://blog.mozilla.com/rstrong/2009/11/29/the-fastest-code-is-the-code-that-never-runs/" title="http://blog.mozilla.com/rstrong/2009/11/29/the-fastest-code-is-the-code-that-never-runs/">detailed  post</a> about his startup improvements to the  update service, the  effect on mobile, and pointed out some other  front-end services that  could benefit from the same treatment.</li>
<li>Joel&#39;s static Firefox is working (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=525013" title="https://bugzilla.mozilla.org/show_bug.cgi?id=525013">bug 525013</a>), and is showing ~10% improvement in  startup time on Mac. He&#39;s moved on to improving code locality (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=531406" title="https://bugzilla.mozilla.org/show_bug.cgi?id=531406">bug 531406</a>). However, time-ordering of symbols  doesn&#39;t seem to improve the sequentiality of the page-ins by much, so  maybe more improvements there. More data on the bug.</li>
<li>Ben is making progress on the fastload replacement in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=520309" title="https://bugzilla.mozilla.org/show_bug.cgi?id=520309">bug 520309</a>.</li>
<li>No updates on Windows cold-startup testing for  Talos on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=522807">bug  522807</a>. I need to test on Vista, and turn off Pre/Superfetch.</li>
<li>Taras has a new patch up for service caching (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=516085" title="https://bugzilla.mozilla.org/show_bug.cgi?id=516085">bug 516085</a>).</li>
<li>Rebasing on Windows in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=484799" title="https://bugzilla.mozilla.org/show_bug.cgi?id=484799">bug 484799</a> messed up mobile builds, was backed out.</li>
<li><p>Jonathan Kew&#39;s patch on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=519445">bug        519445</a> for further reductions in Mac startup       time spent in  font system initialization, is ready to land when the tree re-opens.
Projects in a holding pattern:</p>
</li>
<li><p>Super-fast-path-ing of Components.* (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=512584" title="https://bugzilla.mozilla.org/show_bug.cgi?id=512584">bug  512584</a>) is on hold, blocking on getting help from JS team or  someone else who knows that code.</p>
</li>
<li>Ryan Flint has a WIP patch to minify JS on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=524858">bug  524858</a> that significantly reduces the size of shipped JavaScript  files.</li>
<li>JARification: David abandoned <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">moving JS          modules into a JAR file</a>, since those files are fastloaded.         However, since we want things like post-extension-install  restarts  to   be     fast, and those cause fastload cache invalidation,  we might   want  to   do   things like this anyways. I filed a bug for  the same   treatment  for     components. These are lower priority,  since they&#39;re   not the  normal     startup case. Follow along with all  JAR-ification   via<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513027"> the         tracker  bug</a>.</li>
<li>Startup Timeline: No updates, still not landed. Add [ft] in the        whiteboard of your bug w/ the function names you want timed and David        will generate it and update the bug.</li>
<li>Static Analysis: No progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">bug        506128</a>.  David needs to file a bug with the final log of        named-yet-uncalled  functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file        bugs  for each, generate Talos config patches and profile data, and    then     move  it into Rel-Eng territory. Also, need to get a separate       Tinderbox  tree,  since it&#39;s going to cause a bazillion new  columns.</li>
<li><a href="http://wagerlabs.com/">Joel        Reymont</a> noted in<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug        513076</a> that there are serious drawbacks to getting our libraries  in       the dyld  shared cache on Mac, so has deprioritized that work.</li>
<li>No updates on Zack&#39;s CSS parser changes in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">bug          513149</a>.
As usual, more details and links are  available on <a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements">the       project wiki</a>, and we&#39;re available to answer questions in <a href="irc://irc.mozilla.org/#startup">#startup on irc.mozilla.org</a>.</li>
</ul>
]]></description><link>/2009/12/firefox-startup-performance-weekly-summary-12/index.html</link><guid isPermaLink="true">/2009/12/firefox-startup-performance-weekly-summary-12/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 05 Dec 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Summary]]></title><description><![CDATA[<p>Current numbers are available on the <a href="http://graphs.mozilla.org/dashboard/snapshot/">Performance  Snapshot</a> page.</p>
<p>Summary, relative to Firefox 3.5:</p>
<ul>
<li>Warm startup: For Mac, 36% better on 3.6 and 35% better on 3.7. For  Windows, 5% and 5%. Flat on Linux. Also, Warm startup for Mac on 3.6 is a whopping 13% better than last week, due to the landing of <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=517804">bug 517804</a>.</li>
<li><p>Cold startup:  For Mac, 20% better on both 3.6 and 3.7. For  Windows, not measuring yet. For Linux, we&#39;re seeing a regression of ~9% across branch and trunk in the snapshot but not on the graphs, so I need to figure out where the discrepancy is.
This week&#39;s activity:</p>
</li>
<li><p>Dirty-cold-Ts went live this week, thanks to Alice and Lukas. Example: <a href="http://graphs.mozilla.org/#tests=[{%22test%22:%2266%22,%22branch%22:%2210%22,%22machine%22:%22169%22},{%22test%22:%2266%22,%22branch%22:%2210%22,%22machine%22:%22170%22},{%22test%22:%2266%22,%22branch%22:%2210%22,%22machine%22:%22172%22},{%22test%22:%2266%22,%22branch%22:%2210%22,%22machine%22:%22173%22},{%22test%22:%2266%22,%22branch%22:%2210%22,%22machine%22:%22174%22},{%22test%22:%2266%22,%22branch%22:%2210%22,%22machine%22:%22175%22},{%22test%22:%2266%22,%22branch%22:%2210%22,%22machine%22:%22177%22},{%22test%22:%2266%22,%22branch%22:%2210%22,%22machine%22:%22178%22},{%22test%22:%2266%22,%22branch%22:%2210%22,%22machine%22:%22180%22},{%22test%22:%2266%22,%22branch%22:%2210%22,%22machine%22:%22181%22},{%22test%22:%2266%22,%22branch%22:%2210%22,%22machine%22:%22182%22}]" title="http://tinyurl.com/258pht">cold startup with a  large places.sqlite on Mac</a>.</p>
</li>
<li>Joel is making progress on making a super-static Firefox in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=525013" title="https://bugzilla.mozilla.org/show_bug.cgi?id=525013">bug 525013</a>.</li>
<li>Ben is making progress on the fastload replacement in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=520309" title="https://bugzilla.mozilla.org/show_bug.cgi?id=520309">bug 520309</a>.</li>
<li>No updates on Windows cold-startup testing for  Talos on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=522807">bug  522807</a>. I need to test on Vista, and turn off Pre/Superfetch.</li>
<li>Taras has patches up for service caching (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=516085" title="https://bugzilla.mozilla.org/show_bug.cgi?id=516085">bug 516085</a>) and super-fast-path-ing of Components.* (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=512584" title="https://bugzilla.mozilla.org/show_bug.cgi?id=512584">bug 512584</a>), however the latter he&#39;s hit a wall, passing on to Blake or someone else who knows that code.</li>
<li>Ted landed rebasing on Windows in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=484799" title="https://bugzilla.mozilla.org/show_bug.cgi?id=484799">bug 484799</a>.</li>
<li>Jonathan Kew has a new patch in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=519445">bug        519445</a> for further reductions in Mac startup       time spent in  font system initialization, just about there...</li>
<li><p>Ryan Flint put a patch to minify JS on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=524858">bug 524858</a>, not working yet, but significantly reduced the size of shipped JavaScript files.
Projects in a holding pattern:</p>
</li>
<li><p>JARification: David abandoned <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">moving JS          modules into a JAR file</a>, since those files are fastloaded.         However, since we want things like post-extension-install  restarts  to   be     fast, and those cause fastload cache invalidation,  we might   want  to   do   things like this anyways. I filed a bug for  the same   treatment  for     components. These are lower priority,  since they&#39;re   not the  normal     startup case. Follow along with all  JAR-ification   via<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513027"> the         tracker  bug</a>.</p>
</li>
<li>Startup Timeline: No updates, still not landed. Add [ft] in the        whiteboard of your bug w/ the function names you want timed and David        will generate it and update the bug.</li>
<li>Static Analysis: No progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">bug        506128</a>.  David needs to file a bug with the final log of        named-yet-uncalled  functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file        bugs  for each, generate Talos config patches and profile data, and    then     move  it into Rel-Eng territory. Also, need to get a separate       Tinderbox  tree,  since it&#39;s going to cause a bazillion new  columns.</li>
<li><a href="http://wagerlabs.com/">Joel        Reymont</a> noted in<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug        513076</a> that there are serious drawbacks to getting our libraries  in       the dyld  shared cache on Mac, so has deprioritized that work.</li>
<li>No updates on Zack&#39;s CSS parser changes in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">bug          513149</a>.
As usual, more details and links are  available on <a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements">the       project wiki</a>, and we&#39;re available to answer questions in <a href="irc://irc.mozilla.org/#startup">#startup on irc.mozilla.org</a>.</li>
</ul>
]]></description><link>/2009/11/firefox-startup-performance-weekly-summary-11/index.html</link><guid isPermaLink="true">/2009/11/firefox-startup-performance-weekly-summary-11/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 21 Nov 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Summary]]></title><description><![CDATA[<p>Current numbers are available on the <a href="http://graphs.mozilla.org/dashboard/snapshot/">Performance Snapshot</a> page. Thanks to <a href="http://atlee.ca/blog/">Chris Atlee</a> for deploying it to the graph server. The snapshot is updated every 5 minutes with fresh data from Talos.</p>
<p>Summary, relative to Firefox 3.5:</p>
<ul>
<li>Warm startup: For Mac, 26% better on 3.6 and 31% better on 3.7. For Windows, 4% and 7%. Flat on Linux.</li>
<li><p>Cold startup:  For Mac, 22% better on 3.6, 23% better on 3.7. For Windows, not measuring yet. For Linux, 3% and 9%.
This week&#39;s activity:</p>
</li>
<li><p>Using the data from <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=524202">bug 524202</a>, Joel is tracking down exactly how and when dynamic library code is loaded. They&#39;re past diagnostics, and are now into implementation, coaxing the linker into ordering functions in the optimal sequence. See <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=524202#c3">this  comment</a> for a good summary of the issue. Joel put up <a href="http://wagerlabs.com/post/230853261/tracking-io-patterns-in-memory-mapped-dynamic-libaries">a very detailed blog post</a> about the work they&#39;ve been doing.</p>
</li>
<li>Ryan Flint updated the<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=496217"> spellcheck bug</a> with some new findings.</li>
<li>I got a working (so far) patch for Windows cold-startup testing for Talos on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=522807">bug 522807</a>.</li>
<li>Taras is in the patch review cycle for service caching in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=516085">bug         516085</a>.</li>
<li>Re-enabling rebasing on  Windows in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=484799">bug    484799</a> has review now, just needs landing.</li>
<li>John Dagget and Jonathan Kew have a bunch of new findings in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=519445">bug       519445</a> for further reductions in Mac startup       time spent in font system initialization. Sometimes the patch helps, sometimes it doesn&#39;t.</li>
<li>B<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=512645">ug    512645</a>, removing the setTimeout 10ms wait in chrome JS has landed.</li>
<li><p>Drew&#39;s work on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506814">bug     506814</a>, getting rid of Change      GetPersistentDescriptor/SetPersistentDescriptor on Mac, has landed.
Projects in a holding pattern:</p>
</li>
<li><p>Ben Hsieh has been prototyping a whole Fastload cache  replacement in  <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=520309">bug   520309</a>.</p>
</li>
<li>JARification: David abandoned <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">moving JS         modules into a JAR file</a>, since those files are fastloaded.        However, since we want things like post-extension-install restarts  to   be     fast, and those cause fastload cache invalidation, we might   want  to   do   things like this anyways. I filed a bug for the same   treatment  for     components. These are lower priority, since they&#39;re   not the  normal     startup case. Follow along with all JAR-ification   via<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513027"> the        tracker  bug</a>.</li>
<li>Startup Timeline: No updates, still not landed. Add [ft] in the       whiteboard of your bug w/ the function names you want timed and David       will generate it and update the bug.</li>
<li>Static Analysis: No progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">bug       506128</a>.  David needs to file a bug with the final log of       named-yet-uncalled  functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file       bugs  for each, generate Talos config patches and profile data, and   then     move  it into Rel-Eng territory. Also, need to get a separate      Tinderbox  tree,  since it&#39;s going to cause a bazillion new columns.</li>
<li><a href="http://wagerlabs.com/">Joel       Reymont</a> noted in<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug       513076</a> that there are serious drawbacks to getting our libraries in       the dyld  shared cache on Mac, so has deprioritized that work.</li>
<li>No updates on Zack&#39;s CSS parser changes in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">bug         513149</a>.
As usual, more details and links are  available on <a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements">the      project wiki</a>, and we&#39;re available to answer questions in <a href="irc://irc.mozilla.org/#startup">#startup on irc.mozilla.org</a>.</li>
</ul>
]]></description><link>/2009/11/firefox-startup-performance-weekly-summary-10/index.html</link><guid isPermaLink="true">/2009/11/firefox-startup-performance-weekly-summary-10/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 14 Nov 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Summary]]></title><description><![CDATA[<p>This week brings a boost in visibility of results, not just for startup, but for all the performance testing we&#39;re doing on all branches and platforms. As I mentioned last week, I was working on an automated method of generating the cross-branch startup results. Luckily <a href="http://blog.johnath.com/">Johnath </a>and <a href="http://atlee.ca/blog/">Chris Atlee</a> had done the hard work when making the <a href="http://graphs.mozilla.org/dashboard/">performance dashboard</a>. It has a JSON file that contains a roll-up of the previous 7 days performance data, which is updated every 5 minutes with new Talos results. Using that as the datasource, I wrote  a script summarizes the results for each test+branch+OS combination across all the boxes that returned results, as well as stable branch and previous week differences. The final product gives a snapshot view of how each branch compares to the stable branch.</p>
<p>This is useful for a few different reasons. First, we (and the press and our users and our managers and everyone really) are able to know at-a-glance how any branch compares to the stable release branch. An example of another use is that before the JS team does a Tracemonkey merge, they can quickly see if any major performance effects can be expected.</p>
<p>The table shows red or green for any differences that are outside of a 2% threshold, to take test noise into account. This is quite liberal, as I&#39;ve already calculated the numbers to take into account whether the difference is within the standard deviation. Reducing the noise in the tests would be a big help - perhaps some researcher will take up <a href="http://weblogs.mozillazine.org/roc/archives/2009/11/challenges_in_s.html">Roc&#39;s challenge</a>. A second point of trust is my math :) I&#39;m not a statistician, so please view source and let me know where I&#39;ve miscalculated.</p>
<p>An example of the full report is <a href="http://people.mozilla.org/~dietrich/snapshot/">here</a>. I&#39;m going to file a bug and work with release-engineering to get it pushed out to the graph server, where the dashboard lives. The data from this week&#39;s startup table is copied below (though sans the color-coding of the real thing. Actually, now Wordpress keeps stripping out my styles, so you get an ugly table this week).</p>
<h1 id="ts">Ts</h1>
<p><table style="border-spacing:0;border-collapse:collapse;border:0 0 1px 1px solid #600;"></p>
<p><tbody></p>
<p><tr></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;"></td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">Firefox3.5</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">Firefox3.6</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">Firefox</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">TraceMonkey</td>
</tr></p>
<p><tr></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">Leopard</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median:  1469deviation: 110mean: 1481</p>
<p>from last week: 2%</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median:  1115
deviation: 59
mean: 1096
from last week: 3%
from 3.5: 26%</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median: 1036
deviation: 48
mean: 1006
from last week: 1%
from 3.5: 32%</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median: 1014
deviation:  38
mean: 1000
from last week: 0%
from 3.5: 32%</td>
</tr></p>
<p><tr></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">Linux</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median:  625
deviation: 7
mean: 626
from last week: 0%</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median:  632
deviation: 7
mean: 633
from last week: 0%
from 3.5: -1%</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median: 619
deviation: 10
mean: 623
from last week: 1%</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median: 628
deviation: 7
mean: 628
from last week: 0%</td>
</tr></p>
<p><tr></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">Vista</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median:  538
deviation: 8
mean: 540
from last week: 0%</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median:  533
deviation: 13
mean: 537
from last week: 1%
from 3.5: 1%</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median: 503
deviation: 23
mean: 509
from last week: 0%
from  3.5: 6%</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median: 511
deviation: 41
mean: 531
from last week: 11%
from 3.5: 2%</td>
</tr></p>
<p><tr></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">XP</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median:  461
deviation: 6
mean: 461
from last week: 0%</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median:  464
deviation: 6
mean: 464
from last week: 1%
from 3.5: -1%</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median: 448
deviation: 7
mean: 448
from last week: 0%
from  3.5: 3%</td></p>
<p><td style="background-color:#ffc;border:1px 1px 0 0 solid #600;margin:0;padding:4px;">median: 530
deviation: 38
mean: 501
from last week: 10%
from  3.5: -9%</td>
</tr>
</tbody></table>
This week&#39;s activity:</p>
<ul>
<li>Taras and Joel are still working on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=524202">bug 524202</a>, tracking down exactly how and when dynamic library code is loaded. They&#39;re past diagnostics, and are now into implementation, coaxing the linker into ordering functions in the optimal sequence. See <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=524202#c3">this  comment</a> for a good summary of the issue. Joel put up <a href="http://wagerlabs.com/post/230853261/tracking-io-patterns-in-memory-mapped-dynamic-libaries">a very detailed blog post</a> about the work they&#39;ve been doing.</li>
<li>Ryan Flint <a href="http://screwedbydesign.com/blog/2009/11/this-week-in-perf-nov06.php">posted an update on his startup bug activity</a> this week.</li>
<li>Have a patch enabling Windows cold-startup testing for Talos for <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=522807">bug 522807</a>, but it&#39;s causing the whole OS to freeze, only recoverable via reboot. Fun! I also added some <a href="https://wiki.mozilla.org/Firefox/Sprints/Startup_Time_Improvements#Tips.2C_Tools">details and links about how Prefetch/SuperFetch work</a> on Windows to the wiki.</li>
<li>Rob Strong pushed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=311965">bug 311965</a> to mozilla-central, comm-central and 1.9.2 while also ensuring not to break all the toolkit apps that depend on this code. Truly a gentleman of the Mozilla ecosystem.</li>
<li>Taras put a new patch up for service caching in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=516085">bug         516085</a>.</li>
<li>Everything is about ready for re-enabling rebasing on  Windows in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=484799">bug    484799</a>, just needs landing.</li>
<li>John Dagget posted some test times in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=519445">bug       519445</a> for yet further reductions in Mac startup       time spent in font system initialization, just needs review.</li>
<li><p>B<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=512645">ug    512645</a>, removing the setTimeout 10ms wait in chrome JS, is ready to land. I&#39;ll try to land this weekend if the bug owner doesn&#39;t get around to it first (hint hint).
Projects in a holding pattern:</p>
</li>
<li><p>Drew has a patch up for <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506814">bug    506814</a>, getting rid of Change     GetPersistentDescriptor/SetPersistentDescriptor on Mac, just needs   review from Josh.</p>
</li>
<li>Ben Hsieh has been prototyping a whole Fastload cache  replacement in  <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=520309">bug   520309</a>.</li>
<li>JARification: David abandoned <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">moving JS         modules into a JAR file</a>, since those files are fastloaded.        However, since we want things like post-extension-install restarts  to   be     fast, and those cause fastload cache invalidation, we might   want  to   do   things like this anyways. I filed a bug for the same   treatment  for     components. These are lower priority, since they&#39;re   not the  normal     startup case. Follow along with all JAR-ification   via<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513027"> the        tracker  bug</a>.</li>
<li>Startup Timeline: No updates, still not landed. Add [ft] in the       whiteboard of your bug w/ the function names you want timed and David       will generate it and update the bug.</li>
<li>Static Analysis: No progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">bug       506128</a>.  David needs to file a bug with the final log of       named-yet-uncalled  functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file       bugs  for each, generate Talos config patches and profile data, and   then     move  it into Rel-Eng territory. Also, need to get a separate      Tinderbox  tree,  since it&#39;s going to cause a bazillion new columns.</li>
<li><a href="http://wagerlabs.com/">Joel       Reymont</a> noted in<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug       513076</a> that there are serious drawbacks to getting our libraries in       the dyld  shared cache on Mac, so has deprioritized that work.</li>
<li>No updates on Zack&#39;s CSS parser changes in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">bug         513149</a>.
As usual, more details and links are  available on <a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements">the      project wiki</a>, and we&#39;re available to answer questions in <a href="irc://irc.mozilla.org/#startup">#startup on irc.mozilla.org</a>.</li>
</ul>
<p>UPDATE: Fixed link to full report.</p>
]]></description><link>/2009/11/firefox-startup-performance-weekly-summary-9/index.html</link><guid isPermaLink="true">/2009/11/firefox-startup-performance-weekly-summary-9/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 07 Nov 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Summary]]></title><description><![CDATA[<p>No numbers summary this week, as 1) there weren&#39;t any major landings and 2) I&#39;m working on a script to automate the generation of these summarized numbers. Updates on the week&#39;s activity is below. As usual, more details and links are  available on <a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements">the     project wiki</a>, and we&#39;re available to answer questions in <a href="irc://irc.mozilla.org/#startup">#startup on irc.mozilla.org</a>.</p>
<ul>
<li>Taras and Joel are working on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=524202">bug 524202</a>, tracking down exactly how and when dynamic library code is loaded. See <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=524202#c3">this comment</a> for a good summary of the issue.</li>
<li>I think I&#39;ve found a scenario for stable cold startup numbers on Windows, which is basically: 1) Run consume.exe for N seconds where N is how long it takes to consume all physical RAM (and which also pegs the CPU), 2) sleep for 30 seconds (or however long it takes for the system to quiet down) and 3) measure startup time as usual. Next step is to get a Talos patch up, and work with Rel/Eng to get it deployed into testing so we can see numbers on real Talos boxes.</li>
<li><p>Rob Strong split up the update service in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=311965">bug 311965</a>, has most reviews (affects all toolkit apps) and is about ready to land. This showed a significant win on WinCE startup.
Projects in a holding pattern:</p>
</li>
<li><p>Drew has a patch up for <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506814">bug    506814</a>, getting rid of Change     GetPersistentDescriptor/SetPersistentDescriptor on Mac, just needs   review from Josh.</p>
</li>
<li>B<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=512645">ug   512645</a>, removing the setTimeout 10ms wait in chrome JS, <span style="text-decoration:line-through;">is just  waiting on review</span> just needs to be landed (thanks jesse).</li>
<li>Ben Hsieh has been prototyping a whole Fastload cache  replacement in  <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=520309">bug   520309</a>.</li>
<li>Ted has been looking at re-enabling rebasing on  Windows in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=484799">bug   484799</a> for a potential performance boost there.</li>
<li>Service caching work in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=516085">bug        516085</a> still needs to be pushed  to  the  Places branch for  testing.</li>
<li>Moving font-loading out of the startup path on Mac: Jonathan Kew    filed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=519445">bug      519445</a> with a WIP patch for yet further reductions in Mac startup      time spent in font system initialization.</li>
<li>JARification: David abandoned <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">moving JS         modules into a JAR file</a>, since those files are fastloaded.        However, since we want things like post-extension-install restarts  to   be     fast, and those cause fastload cache invalidation, we might   want  to   do   things like this anyways. I filed a bug for the same   treatment  for     components. These are lower priority, since they&#39;re   not the  normal     startup case. Follow along with all JAR-ification   via<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513027"> the        tracker  bug</a>.</li>
<li>Startup Timeline: No updates, still not landed. Add [ft] in the       whiteboard of your bug w/ the function names you want timed and David       will generate it and update the bug.</li>
<li>Static Analysis: No progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">bug       506128</a>.  David needs to file a bug with the final log of       named-yet-uncalled  functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file       bugs  for each, generate Talos config patches and profile data, and   then     move  it into Rel-Eng territory. Also, need to get a separate      Tinderbox  tree,  since it&#39;s going to cause a bazillion new columns.</li>
<li><a href="http://wagerlabs.com/">Joel       Reymont</a> noted in<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug       513076</a> that there are serious drawbacks to getting our libraries in       the dyld  shared cache on Mac, so has deprioritized that work.</li>
<li>No updates on Zack&#39;s CSS parser changes in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">bug         513149</a>.</li>
</ul>
]]></description><link>/2009/10/firefox-startup-performance-weekly-summary-8/index.html</link><guid isPermaLink="true">/2009/10/firefox-startup-performance-weekly-summary-8/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 31 Oct 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Summary]]></title><description><![CDATA[<p>This week brought a big win on Mac, and a slew of changes that are about to land.</p>
<p>Recent activity:</p>
<ul>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=517045">Bug 517045</a> is fixed and brings another win on Mac. Found by Joel Reymont and fixed by John Daggett, it improves cold startup by ~20% and warm startup by ~4%. It gets better: Jonathan Kew filed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=519445">bug 519445</a> with a WIP patch for yet further reductions in Mac startup time spent in font system initialization.</li>
<li>Taras Glek&#39;s <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=507288">work on combining the     different preference files</a> into a single one is ready to land.</li>
<li>We now have unit-tested optimized builds, thanks to Release Engineering&#39;s work on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">bug 486783</a>. This means we can now turn on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=419893">PGO for Places, mozStorage and SQLite</a>, which I&#39;ll land presently.</li>
<li>B<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=504858">ug    504858</a> pushes back the population of the bookmarks toolbar until after   the  browser window comes up. The patch has review, is ready to land.</li>
<li>Alfred Kayser&#39;s patch on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510844">bug    510844</a> which should increase throughput of JAR file reading, is   ready to land.</li>
<li>Ben Hsieh got review on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510991">bug 510991</a>, which removes some stats() from the startup path.</li>
<li>I&#39;m no longer able to reproduce the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=517741">cold startup regression from 3.5 to 3.6</a>. I turned of SuperFetch, which resulted in more stable numbers, but there was no visible regression, even in builds going back a couple of months. Juan is going to test on Windows XP.</li>
<li>Ben Hsieh has a patch up for review on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=511761">bug   511761</a>, which removes needless stat()s of component files, and improves and clarifies current cache invalidation behavior.</li>
<li>Service caching work in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=516085">bug   516085</a>, made no progress. Next week I&#39;ll try pushing this  to the Places branch to get a better idea of the total performance  impact of the change.</li>
<li><p>Zack is working on major CSS parser changes in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">bug    513149</a>.
Projects in a holding pattern:</p>
</li>
<li><p>Cold Startup Testing: Drew and Alice made a bunch of progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">bug    510587</a>,  to create a new Ts that measures cold startup. Alice is    working on mobile Talos though, so this is sidelined for a bit. The only    issue left is reliable Windows measurement, but we&#39;re not going to    block on it, can live with Mac and Linux to start off.</p>
</li>
<li>JARification: David abandoned <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">moving JS     modules into a JAR file</a>, since those files are fastloaded.    However, since we want things like post-extension-install restarts to be    fast, and those cause fastload cache invalidation, we might want to  do   things like this anyways. I filed a bug for the same treatment for    components. These are lower priority, since they&#39;re not the normal    startup case. Follow along with all JAR-ification via<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513027"> the    tracker  bug</a>.</li>
<li>Startup Timeline: No updates, still not landed. Add [ft] in the   whiteboard of your bug w/ the function names you want timed and David   will generate it and update the bug.</li>
<li>Static Analysis: No progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">bug   506128</a>.  David needs to file a bug with the final log of   named-yet-uncalled  functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file   bugs  for each, generate Talos config patches and profile data, and then   move  it into Rel-Eng territory. Also, need to get a separate  Tinderbox  tree,  since it&#39;s going to cause a bazillion new columns.</li>
<li><a href="http://wagerlabs.com/">Joel   Reymont</a> noted in<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug   513076</a> that there are serious drawbacks to getting our libraries in   the dyld  shared cache on Mac, so has deprioritized that work.</li>
</ul>
]]></description><link>/2009/10/firefox-startup-performance-weekly-summary-4/index.html</link><guid isPermaLink="true">/2009/10/firefox-startup-performance-weekly-summary-4/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 03 Oct 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Summary]]></title><description><![CDATA[<p>Let&#39;s start with the numbers. Vlad spent some time measuring warm startup on the Mac, and it looks very nice: Firefox 3.6 starts up about 10% faster than 3.5, and 3.7 starts up about 20% faster than 3.5. I measured both cold and warm startup on Windows 7, and the picture is not so rosy there. Warm startup is basically flat across 3.5, 3.6 and 3.7, in my tests. Cold startup is... well, weird. Allow me to explain...</p>
<p>My cold startup methodology is simple: On a basically clean install of Windows 7, I&#39;d create a new profile, start the browser up, close it and then reboot. Then I&#39;d measure Firefox startup time after the OS settled. Then I&#39;d do that reboot-and-measure step a bunch more times. Yes, so much fun. I measured Firefox startup time using the method Vlad posted to his blog. This doesn&#39;t do anything to avoid OS optimizations that might persist across reboots, which is a potential flaw, as you&#39;ll see below.</p>
<p>Firefox 3, 3.6 and 3.7 all had consistent numbers across their runs. However, Firefox 3.5 displayed a unique behavior: The first two cold starts were appropriately slow, similar to the cold startup times of the other versions. The subsequent runs were <em>very</em> fast for a cold start! I rebooted a few times, and started other versions a few times, then tried a series of 3.5 runs again... and saw the same thing: the first two runs were in the ballpark of other Firefox versions, but subsequent runs were crazy fast. Vlad was talking earlier in the week about a predictive optimization feature that Windows has, learning from an application&#39;s behavior to optimize it&#39;s performance. Possibly that feature works fantastically with Firefox 3.5, and for whatever reason does not work nearly as well with previous or subsequent versions of the app? I&#39;ve clearly crossed into the realm of fantasy here, so alternate theories are welcome. Perhaps I should round-robin through all versions instead of doing serial runs of the same version.</p>
<p>Firefox 3.5 aside, when measuring cold startup I also see the regression that <a href="http://blog.mozilla.com/adw/2009/09/04/cold-ts/">Drew blogged about</a>. We&#39;ll get a bug filed and help from QA to get a regression range for this.</p>
<p>Status updates:</p>
<ul>
<li>Startup Timeline: Still not landed, and David found that the timeline instrumentation if put in certain places causes major stability issues. As before, he can provide timeline info for you, just point him at the code by putting [ft] in the whiteboard of your bug.</li>
<li>PGO for Places, mozStorage and SQLite: Still blocking on Rel-Eng fixing <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">bug 486783</a>. I still need to connect with John O&#39;Duinn and see if we can move this up in the schedule.</li>
<li>JARification: David started working on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">moving JS modules into a JAR file</a>. Follow along with all JAR-ification via<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513027"> the tracker bug</a>. Alfred Kayser is working on getting <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510844">bug 510844</a> landed, which should increase throughput of JAR file reading.</li>
<li>JS Component Combining: Further effort is probably not worth it, since these components are fastloaded. Removing the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=512827">needless file stats when these are first instantiated</a> is what we need to do. I need to talk to Damon and find a XPConnect/Component-loader person for this.</li>
<li>Static Analysis: No progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">Bug 506128</a>. David needs to file a bug with the final log of named-yet-uncalled functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file bugs for each, generate Talos config patches and profile data, and then move it into Rel-Eng territory. Also, need to get a separate Tinderbox tree, since it&#39;s going to cause a bazillion new columns.</li>
<li>Cold Startup Testing: Drew and Alice made a bunch of progress on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">bug 510587</a>, to create a new Ts that measures cold startup. They&#39;re starting with Mac and Linux, and will tackle Windows later. Drew <a href="http://blog.mozilla.com/adw/2009/09/04/cold-ts/">blogged about their work</a> on this.</li>
<li><a href="http://wagerlabs.com/">Joel Reymont</a> noted in<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug 513076</a> that there are serious drawbacks to getting our libraries in the dyld shared cache on Mac, so is deprioritizing that work for now.</li>
<li><a href="http://screwedbydesign.com/blog/2009/09/this-week-in-perf-sep04.php">Ryan Flint blogged about</a> various front-end improvements he&#39;s working on that affect startup time.</li>
<li>CSS Parsing Time: Zack says his work in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">bug 513149</a> might improve CSS parsing time by 50%, and it&#39;s next on his list.</li>
</ul>
]]></description><link>/2009/09/firefox-startup-performance-weekly-summary/index.html</link><guid isPermaLink="true">/2009/09/firefox-startup-performance-weekly-summary/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sun, 06 Sep 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Startup Performance Weekly Roundup]]></title><description><![CDATA[<p>The Firefox and Platform teams were both onsite at the Mountain View office this week, getting some face-to-face time. There was a lot of great conversation and productive interaction between groups. The team of people focusing on application startup time went over all <a href="https://bugzilla.mozilla.org/buglist.cgi?quicksearch=sw:[ts]">the bugs marked [ts]</a>, discussing and prioritizing.</p>
<ul>
<li>Startup Timeline: While the timeline hasn&#39;t landed yet, you can still take advantage of it: David Dahl has an instrumented build, and will provide timeline info for you if you have an area you want to know about. More details on <a href="http://daviddahl.blogspot.com/2009/08/functiontimertimeline-update.html">his post</a>.</li>
<li>PGO for Places, mozStorage and SQLite: Still blocking on Rel-Eng fixing <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">bug 486783</a>. I need to connect with John O&#39;Duinn and see if we can move this up in the schedule.</li>
<li>JAR Transition: Taras landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=508421">bug 508421</a> which allows anything in jar:toolkit.jar!/res/* to be loaded via resource://gre-resources/. This makes it very easy to move individual files into a jar, and access them in a fairly transparent way from code. This helps cold startup, as well as page-load time. He <a href="http://blog.mozilla.com/tglek/2009/08/27/moving-files-into-jars/">posted a HOWTO</a> for taking advantage of this.</li>
<li>JS Component Combining: No progress this week.</li>
<li>Static Analysis: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">Bug 506128</a> is wrapping up. David need to file a bug with the final log of named-yet-uncalled functions.</li>
<li>Dirty Profile Testing: No progress. Need to list scenarios, file bugs for each, generate Talos config patches and profile data, and then move it into Rel-Eng territory. Also, need to get a separate Tinderbox tree, since it&#39;s going to cause a bazillion new columns.</li>
<li>Cold Startup Testing: Drew Willcoxon is working on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">bug 510587</a>, to create a new Ts that measures cold startup. He&#39;s got patches up for adding head/tail file support to Talos. A new issue that cropped up this week is that the simulated cold-startup methods on Windows don&#39;t appear to work very well, so he&#39;s looking for advice there, as well as looking into reboot support in Talos.</li>
<li><a href="http://wagerlabs.com/">Joel Reymont</a> noticed that Safari&#39;s libs are loaded from the OS&#39;s warm cache, and ours are not! In<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513076"> bug 513076</a> he&#39;s investigating whether or not we can get our dynamic libraries in there as well.</li>
<li>Ryan Flint started looking into taking NSS and spellcheck initialization out of the startup path, and found that Shark says they&#39;re not in it on a regular startup! However, I found a <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=511515">recent bug from Vlad</a> talking about crazy stuff NSS does at startup (aside from the temp file dir skullduggery), so need to figure out how he&#39;s seeing that, and why Shark isn&#39;t.</li>
<li>CSS Parsing Time: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=91242">Bug 91242</a> says CSS parsing is 5.5% of startup time... in 2001. Taras has mentioned several times that it&#39;s still significant, so asked him for numbers for contemporary builds. <a href="http://zwol.livejournal.com/">Zack Weinberg</a> is working on <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=513149">speeding up parsing using a machine generated lexer</a>, need to get numbers from him on what kind of a difference it makes in parse time.
And if you haven&#39;t yet, read through<a href="http://blog.mozilla.com/tglek/2009/08/20/cleaning-up-startup-disk-io/"> Taras&#39; annotated log of files opened at startup</a>. If you see anything that can be delayed, or want to dig into why a certain file is loaded, let me know! Or just file a bug and put &quot;[ts]&quot; in the bug&#39;s status whiteboard.</li>
</ul>
]]></description><link>/2009/08/firefox-startup-performance-weekly-roundup/index.html</link><guid isPermaLink="true">/2009/08/firefox-startup-performance-weekly-roundup/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[fx-team]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sun, 30 Aug 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Weekly Firefox Startup Performance Roundup]]></title><description><![CDATA[<h2 id="progress">Progress</h2>
<ul>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=419893">Enabling PGO for SQLite, mozStorage and Places</a>: Found that the trunk unit test boxes have PGO disabled. I&#39;m leery of checking this in without it being properly tested because these components handle so much user data. Next steps: <a href="http://backinblakk.blogspot.com/">Lukas Blakk</a> is working on the infrastructure <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=486783">to enable unit-testing of PGO builds</a>.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=507038">JS Component  Combining</a>: The combined 60,000 line JS file (!!!) has a problem somewhere  in there, causing component registration to fail about 2/3 of the way through. Next steps: Get all the components registering, get numbers on  a few platforms to gauge the effect.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=480735">Startup Timeline</a>: No progress. Vlad said it was land-able, earlier in the week. Next steps: Figure out what needs to happen here to finalize and land. David needs to un-rot the instrumentation patch once the timeline lands (rots quickly).</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510309">XPT Linking</a>: Landed! However, really only helps cold startup, which we don&#39;t currently measure. Next steps: Once cold startup testing is available, disable and re-enable to get actual numbers on the effect.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506128">Static  Analysis</a>: No progress, David was out part of the week, and was  working on unblocking the dirty profile tests (details below). Next  steps: Reduce false positives in the dead-code finder, and run against  the full browser context.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=414660">Dirty Profile Testing</a>: Due to a ton of hard work from Alice, dirty profiling of Ts was enabled on mozilla-central! They are the boxes suffixed &quot;dirty&quot; on the tree, currently testing Ts and Ts-shutdown for profiles with small and medium places.sqlite files on all platforms. Data is available for these tests on the graph server - you can see the effect of Vlad&#39;s landing of <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506470">bug 506470</a> on startup for a profile with a medium-sized places.sqlite file on <a href="http://graphs.mozilla.org/#tests=[{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22170%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22171%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22172%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22173%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22174%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22175%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22176%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22177%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22178%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22179%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22181%22},{%22test%22:%2253%22,%22branch%22:%221%22,%22machine%22:%22182%22}]">this graph</a>. Next steps: get various other dirty profile scenarios detailed, file bugs and get in the pipe. Figure out tree pollution issues.</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510587">Cold-startup Testing</a>: Ts throws out the max value of it&#39;s ten runs, so we don&#39;t have a measurement of how long browser takes to initially startup. Drew, with help from Alice, has started working on the Talos changes necessary to get this measurement up and running. We&#39;ve got <a href="https://wiki.mozilla.org/Firefox/Sprints/Startup_Time_Improvements#Tips.2C_Tools">methods for simulated cold startup</a> from Vlad, Rob Arnold and others<a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements_Notes#Rob_Arnold_notes_on_simulated_cold_startup_on_Windows"></a>. Next steps: Implement support for head/tail scripts for Talos tests, write those scripts for cold startup for all platforms, hand off to rel-eng for deployment.</li>
<li><a href="http://wagerlabs.com/">Joel  Reymont</a> started working on Firefox performance on Mac, and posted <a href="http://wagerlabs.com/post/168237170/faster-mac-firefox">a  comparison of dynamic linking time for Firefox and Safari</a>, and started <a href="https://wiki.mozilla.org/Firefox/Projects/Startup_Time_Improvements/joelr_notes">posting notes on his methodology on the wiki</a>.</li>
<li><a href="http://blog.vlad1.com/">Vlad</a> landed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=506470">bug 506470</a>, which delays the initialization of Growl on Mac, winning 7.5% on Ts. As seen above, it&#39;s a win on dirty profiles without Growl as well as regular Ts (empty profile).</li>
<li><a href="http://blog.mozilla.com/tglek/2009/08/20/cleaning-up-startup-disk-io/#more-173">Taras Glek posted</a> a summary of ways to spend less time in disk IO at startup, the performance characteristics of IO on restricted devices, and a log of files opened at startup.</li>
</ul>
<h2 id="further-reading">Further Reading</h2>
<ul>
<li><a href="https://wiki.mozilla.org/Firefox/Sprints/Startup_Time_Improvements">Startup Project wiki</a></li>
<li><a href="http://blog.mozilla.com/adw/2009/08/21/firefox-startup-2/">Drew&#39;s post for this week</a></li>
<li>Taras&#39; post <a href="http://blog.mozilla.com/tglek/2009/08/20/cleaning-up-startup-disk-io/#more-173">listing files opened on startup</a>
[UPDATE: Added Taras&#39; post, and a link to Joel&#39;s notes.]</li>
</ul>
]]></description><link>/2009/08/weekly-firefox-startup-performance-roundup-2/index.html</link><guid isPermaLink="true">/2009/08/weekly-firefox-startup-performance-roundup-2/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Sat, 22 Aug 2009 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firefox Performance: The "don't touch the damn disk" edition.]]></title><description><![CDATA[<p>I mentioned in previous blog posts that the clearest message that has come out of the Firefox startup performance research is that most of the time starting the application is spent loading and reading files from disk. On some platforms, file IO is far more expensive than others - this hurts startup time especially bad on Mac, and on mobile devices. This post highlights some work that <a href="http://blog.mozilla.com/tglek/" title="Blog">Taras Glek</a> has done to reduce file IO in Firefox (and other Mozilla applications) by improving the way we package collections of files and directories into JAR files.</p>
<p>First, he resurrected an <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=201224">older idea</a>, modifying our JAR file reader to <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=504864">map the contents of JAR files into memory</a> using <a href="http://en.wikipedia.org/wiki/Mmap">mmap</a>. He then <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=468011">combined a bunch of smaller JAR files</a> into two bigger files: browser.jar and toolkit.jar. These changes provide a few benefits:</p>
<ul>
<li>Our reader was stat&#39;ing the JAR file each time that it read something from inside. The mmap change reduces the system calls necessary to read all the smaller files from inside our JAR files.</li>
<li>Fewer JAR files means files are fewer places on disk, and the initial JAR finding, opening and reading system calls happen fewer times.</li>
<li>By combining files inside a large JAR, they&#39;re placed contiguously on disk, allowing the smaller files inside of the JARs to be found and read much quicker.
The effects of these changes were significant. The landing of the JAR-combining change resulted in some fabulous graphs, shown below, along with comments to highlight the good bits.</li>
</ul>
<p>[caption id=&quot;attachment_387&quot; align=&quot;aligncenter&quot; width=&quot;540&quot; caption=&quot;Tp3 Graphs&quot;]<a href="taras_tp3.png"><img src="http://autonome.files.wordpress.com/2009/08/taras_tp3.png" alt="Tp3 Graphs" title="Tp3 Graphs"></a>[/caption]</p>
<p>Tp3 is a page loading test - it cycles through 400 pages from the Alexa Top 500 list from 2006, measuring how long it takes to open each page. As you can see on the graph, the time it took to complete the test went down by about 6.5% on Leopard, 9% on Linux, 2.5% on Tiger, 11% on Windows XP, and a clear downward trend on Vista, where the noise level is a bit too high to get a number.</p>
<p>[caption id=&quot;attachment_388&quot; align=&quot;aligncenter&quot; width=&quot;540&quot; caption=&quot;Tp4 Graphs&quot;]<a href="taras_tp4.png"><img src="http://autonome.files.wordpress.com/2009/08/taras_tp4.png" alt="Tp4 Graphs" title="Tp4 Graphs"></a>[/caption]</p>
<p>Tp4 is the successor to Tp3, and cycles through 100 of the Alexa Top 500, from 2009. The time to run the test improved by 3.5% on Leopard, 7.8% on Linux, 2.5% on Tiger, 6% on Windows XP, and again Vista clearly improved, but the noise level is too high to easily figure out by how much.</p>
<p>[caption id=&quot;attachment_389&quot; align=&quot;aligncenter&quot; width=&quot;540&quot; caption=&quot;Ts Graphs&quot;]<a href="taras_ts.png"><img src="http://autonome.files.wordpress.com/2009/08/taras_ts.png" alt="Ts Graphs" title="Ts Graphs"></a>[/caption]</p>
<p>Ts is a basic browser startup test - it measures the average time to start the browser up. There&#39;s no clear startup win visible here, except perhaps on Vista. There&#39;s maybe even a slight loss on Mac. However, if you look closer, you&#39;ll notice that the graphs for Linux and Vista and Windows XP are all much less <em>noisy</em>! The absolute wall clock time did not decrease, but the variation in startup time decreased significantly on those platforms. An upside to this is that true performance improvements and regressions on those platforms will be easier to spot.</p>
<p>[caption id=&quot;attachment_390&quot; align=&quot;aligncenter&quot; width=&quot;540&quot; caption=&quot;Txul Graphs&quot;]<a href="taras_txul.png"><img src="http://autonome.files.wordpress.com/2009/08/taras_txul.png" alt="Txul Graphs" title="Txul Graphs"></a>[/caption]</p>
<p>The same effect is seen in the tests measuring how long it takes to open a new XUL window. There&#39;s maybe a slight improvement on Windows, and a regression on Tiger, but the level of noise on every platform has decreased, some down near zero variation between runs.</p>
<p>The improvement in page-load time from Taras&#39; changes is quite clear. There&#39;s work in progress to <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=510611">make the JAR IO even more efficient</a>, as well as putting <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=509755">additional</a> <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=508421">directories</a> of small files into the JAR files. You can follow progress and get even more details on <a href="http://blog.mozilla.com/tglek/">Taras&#39; blog</a>.</p>
]]></description><link>/2009/08/firefox-performance-the-dont-touch-the-damn-disk-edition/index.html</link><guid isPermaLink="true">/2009/08/firefox-performance-the-dont-touch-the-damn-disk-edition/index.html</guid><category><![CDATA[firefox]]></category><category><![CDATA[firefox]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[mozilla]]></category><category><![CDATA[Performance]]></category><category><![CDATA[startup]]></category><dc:creator><![CDATA[Dietrich Ayala]]></dc:creator><pubDate>Tue, 18 Aug 2009 00:00:00 GMT</pubDate></item></channel></rss>